
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b828  0800b828  0000c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b830  0800b830  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b838  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ef8  2000006c  0800b8a4  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f64  0800b8a4  0000df64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd64  00000000  00000000  0000d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e0  00000000  00000000  00029df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0002dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001279  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dd0  00000000  00000000  000308f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfb7  00000000  00000000  000366c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994fb  00000000  00000000  00052680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebb7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e70  00000000  00000000  000ebbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f2a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a59c 	.word	0x0800a59c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800a59c 	.word	0x0800a59c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fc4c 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f826 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8ba 	bl	80002e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f892 	bl	8000298 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f866 	bl	8000244 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f003 f85c 	bl	8003234 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UsartRecieveSem */
  UsartRecieveSemHandle = osSemaphoreNew(1, 0, &UsartRecieveSem_attributes);
 800017c:	4a09      	ldr	r2, [pc, #36]	@ (80001a4 <main+0x44>)
 800017e:	2100      	movs	r1, #0
 8000180:	2001      	movs	r0, #1
 8000182:	f003 f997 	bl	80034b4 <osSemaphoreNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a07      	ldr	r2, [pc, #28]	@ (80001a8 <main+0x48>)
 800018a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ModbusTask */
  ModbusTaskHandle = osThreadNew(StartModbusTask, NULL, &ModbusTask_attributes);
 800018c:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <main+0x4c>)
 800018e:	2100      	movs	r1, #0
 8000190:	4807      	ldr	r0, [pc, #28]	@ (80001b0 <main+0x50>)
 8000192:	f003 f8b5 	bl	8003300 <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a06      	ldr	r2, [pc, #24]	@ (80001b4 <main+0x54>)
 800019a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800019c:	f003 f87c 	bl	8003298 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <main+0x40>
 80001a4:	0800ae74 	.word	0x0800ae74
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	0800ae50 	.word	0x0800ae50
 80001b0:	08000395 	.word	0x08000395
 80001b4:	20000158 	.word	0x20000158

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	@ 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	@ 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f009 fc84 	bl	8009ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001da:	2301      	movs	r3, #1
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2302      	movs	r3, #2
 80001ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fa97 	bl	8001734 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800020c:	f000 f936 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fd04 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000236:	f000 f921 	bl	800047c <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	@ 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000248:	4b11      	ldr	r3, [pc, #68]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_USART1_UART_Init+0x50>)
 800024c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800024e:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000256:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000262:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800026a:	220c      	movs	r2, #12
 800026c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027a:	4805      	ldr	r0, [pc, #20]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800027c:	f002 f8e4 	bl	8002448 <HAL_UART_Init>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000286:	f000 f8f9 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000088 	.word	0x20000088
 8000294:	40013800 	.word	0x40013800

08000298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <MX_DMA_Init+0x48>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a0f      	ldr	r2, [pc, #60]	@ (80002e0 <MX_DMA_Init+0x48>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <MX_DMA_Init+0x48>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2105      	movs	r1, #5
 80002ba:	200e      	movs	r0, #14
 80002bc:	f000 fcab 	bl	8000c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002c0:	200e      	movs	r0, #14
 80002c2:	f000 fcc4 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2105      	movs	r1, #5
 80002ca:	200f      	movs	r0, #15
 80002cc:	f000 fca3 	bl	8000c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002d0:	200f      	movs	r0, #15
 80002d2:	f000 fcbc 	bl	8000c4e <HAL_NVIC_EnableIRQ>

}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b24      	ldr	r3, [pc, #144]	@ (800038c <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a23      	ldr	r2, [pc, #140]	@ (800038c <MX_GPIO_Init+0xa8>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b21      	ldr	r3, [pc, #132]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b1e      	ldr	r3, [pc, #120]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1d      	ldr	r2, [pc, #116]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <MX_GPIO_Init+0xa8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <MX_GPIO_Init+0xa8>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a11      	ldr	r2, [pc, #68]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_GPIO_Init+0xa8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035e:	480c      	ldr	r0, [pc, #48]	@ (8000390 <MX_GPIO_Init+0xac>)
 8000360:	f001 f9d0 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000364:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000372:	2303      	movs	r3, #3
 8000374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <MX_GPIO_Init+0xac>)
 800037e:	f000 ff81 	bl	8001284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	bf00      	nop
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40011000 	.word	0x40011000

08000394 <StartModbusTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b0b4      	sub	sp, #208	@ 0xd0
 8000398:	af02      	add	r7, sp, #8
 800039a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	modbus_t *ctx = NULL;
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	uint8_t req[180];
	int rc;
	// Создаем структуру модбас регистров
	modbus_mapping_t *modbus_map;
	modbus_map = modbus_mapping_new(10, 0, 0x15, 0);  // обнуляем значения
 80003a2:	2300      	movs	r3, #0
 80003a4:	2215      	movs	r2, #21
 80003a6:	2100      	movs	r1, #0
 80003a8:	200a      	movs	r0, #10
 80003aa:	f008 fd9f 	bl	8008eec <modbus_mapping_new>
 80003ae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
	modbus_map->tab_registers[1] = 0;
 80003b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80003b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003b8:	3302      	adds	r3, #2
 80003ba:	2200      	movs	r2, #0
 80003bc:	801a      	strh	r2, [r3, #0]
	ctx = modbus_new_rtu("COM1", 115200, 0, 8, 1);
 80003be:	2301      	movs	r3, #1
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2308      	movs	r3, #8
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80003ca:	4822      	ldr	r0, [pc, #136]	@ (8000454 <StartModbusTask+0xc0>)
 80003cc:	f006 fce6 	bl	8006d9c <modbus_new_rtu>
 80003d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	modbus_set_slave(ctx, 1);
 80003d4:	2101      	movs	r1, #1
 80003d6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80003da:	f008 fc19 	bl	8008c10 <modbus_set_slave>
	modbus_set_byte_timeout(ctx, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80003e6:	f008 fc5b 	bl	8008ca0 <modbus_set_byte_timeout>
	modbus_set_response_timeout(ctx, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80003f2:	f008 fc29 	bl	8008c48 <modbus_set_response_timeout>
	modbus_connect(ctx);
 80003f6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80003fa:	f008 fc77 	bl	8008cec <modbus_connect>
	modbus_flush(ctx);
 80003fe:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8000402:	f006 ff81 	bl	8007308 <modbus_flush>
  /* Infinite loop */
  for(;;)
  {
	rc = modbus_receive(ctx, req);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4619      	mov	r1, r3
 800040c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8000410:	f007 fa7a 	bl	8007908 <modbus_receive>
 8000414:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
		if (rc == 8)
 8000418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800041c:	2b08      	cmp	r3, #8
 800041e:	d109      	bne.n	8000434 <StartModbusTask+0xa0>
		{
			modbus_reply(ctx, req, rc, modbus_map);
 8000420:	f107 0108 	add.w	r1, r7, #8
 8000424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800042c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8000430:	f007 fb0a 	bl	8007a48 <modbus_reply>
		}
		modbus_map->tab_registers[1]+=1;
 8000434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800043a:	3302      	adds	r3, #2
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000444:	3302      	adds	r3, #2
 8000446:	3201      	adds	r2, #1
 8000448:	b292      	uxth	r2, r2
 800044a:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f003 f803 	bl	8003458 <osDelay>
	rc = modbus_receive(ctx, req);
 8000452:	e7d8      	b.n	8000406 <StartModbusTask+0x72>
 8000454:	0800a5d0 	.word	0x0800a5d0

08000458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d101      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800046a:	f000 fadf 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40000800 	.word	0x40000800

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <Error_Handler+0x8>

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048e:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <HAL_MspInit+0x68>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <HAL_MspInit+0x68>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <HAL_MspInit+0x68>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <HAL_MspInit+0x68>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a11      	ldr	r2, [pc, #68]	@ (80004f0 <HAL_MspInit+0x68>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_MspInit+0x68>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	210f      	movs	r1, #15
 80004c2:	f06f 0001 	mvn.w	r0, #1
 80004c6:	f000 fba6 	bl	8000c16 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <HAL_MspInit+0x6c>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <HAL_MspInit+0x6c>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000

080004f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a47      	ldr	r2, [pc, #284]	@ (8000630 <HAL_UART_MspInit+0x138>)
 8000514:	4293      	cmp	r3, r2
 8000516:	f040 8086 	bne.w	8000626 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800051a:	4b46      	ldr	r3, [pc, #280]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a45      	ldr	r2, [pc, #276]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 8000520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b43      	ldr	r3, [pc, #268]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b40      	ldr	r3, [pc, #256]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a3f      	ldr	r2, [pc, #252]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b3d      	ldr	r3, [pc, #244]	@ (8000634 <HAL_UART_MspInit+0x13c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000554:	2303      	movs	r3, #3
 8000556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4836      	ldr	r0, [pc, #216]	@ (8000638 <HAL_UART_MspInit+0x140>)
 8000560:	f000 fe90 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4619      	mov	r1, r3
 8000578:	482f      	ldr	r0, [pc, #188]	@ (8000638 <HAL_UART_MspInit+0x140>)
 800057a:	f000 fe83 	bl	8001284 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800057e:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <HAL_UART_MspInit+0x144>)
 8000580:	4a2f      	ldr	r2, [pc, #188]	@ (8000640 <HAL_UART_MspInit+0x148>)
 8000582:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000584:	4b2d      	ldr	r3, [pc, #180]	@ (800063c <HAL_UART_MspInit+0x144>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <HAL_UART_MspInit+0x144>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000590:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <HAL_UART_MspInit+0x144>)
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000596:	4b29      	ldr	r3, [pc, #164]	@ (800063c <HAL_UART_MspInit+0x144>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_UART_MspInit+0x144>)
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <HAL_UART_MspInit+0x144>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005a8:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_UART_MspInit+0x144>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005ae:	4823      	ldr	r0, [pc, #140]	@ (800063c <HAL_UART_MspInit+0x144>)
 80005b0:	f000 fb6a 	bl	8000c88 <HAL_DMA_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80005ba:	f7ff ff5f 	bl	800047c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a1e      	ldr	r2, [pc, #120]	@ (800063c <HAL_UART_MspInit+0x144>)
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005c4:	4a1d      	ldr	r2, [pc, #116]	@ (800063c <HAL_UART_MspInit+0x144>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000648 <HAL_UART_MspInit+0x150>)
 80005ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005d2:	2210      	movs	r2, #16
 80005d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 80005fc:	f000 fb44 	bl	8000c88 <HAL_DMA_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000606:	f7ff ff39 	bl	800047c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 800060e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000610:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <HAL_UART_MspInit+0x14c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2105      	movs	r1, #5
 800061a:	2025      	movs	r0, #37	@ 0x25
 800061c:	f000 fafb 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000620:	2025      	movs	r0, #37	@ 0x25
 8000622:	f000 fb14 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40013800 	.word	0x40013800
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	200000d0 	.word	0x200000d0
 8000640:	40020058 	.word	0x40020058
 8000644:	20000114 	.word	0x20000114
 8000648:	40020044 	.word	0x40020044

0800064c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <HAL_UART_MspDeInit+0x4c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d117      	bne.n	800068e <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_UART_MspDeInit+0x50>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <HAL_UART_MspDeInit+0x50>)
 8000664:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000668:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800066a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <HAL_UART_MspDeInit+0x54>)
 8000670:	f000 ff8c 	bl	800158c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fb5f 	bl	8000d3c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fb5a 	bl	8000d3c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000688:	2025      	movs	r0, #37	@ 0x25
 800068a:	f000 faee 	bl	8000c6a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40013800 	.word	0x40013800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800

080006a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	@ (800078c <HAL_InitTick+0xe8>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a33      	ldr	r2, [pc, #204]	@ (800078c <HAL_InitTick+0xe8>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b31      	ldr	r3, [pc, #196]	@ (800078c <HAL_InitTick+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006d2:	f107 0210 	add.w	r2, r7, #16
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fc1b 	bl	8001f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ec:	f001 fbec 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 80006f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80006f2:	e004      	b.n	80006fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006f4:	f001 fbe8 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 80006f8:	4603      	mov	r3, r0
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000700:	4a23      	ldr	r2, [pc, #140]	@ (8000790 <HAL_InitTick+0xec>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	3b01      	subs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <HAL_InitTick+0xf0>)
 800070e:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <HAL_InitTick+0xf4>)
 8000710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <HAL_InitTick+0xf0>)
 8000714:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000718:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800071a:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <HAL_InitTick+0xf0>)
 800071c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <HAL_InitTick+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <HAL_InitTick+0xf0>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <HAL_InitTick+0xf0>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000732:	4818      	ldr	r0, [pc, #96]	@ (8000794 <HAL_InitTick+0xf0>)
 8000734:	f001 fc3e 	bl	8001fb4 <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800073e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000742:	2b00      	cmp	r3, #0
 8000744:	d11b      	bne.n	800077e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000746:	4813      	ldr	r0, [pc, #76]	@ (8000794 <HAL_InitTick+0xf0>)
 8000748:	f001 fc8c 	bl	8002064 <HAL_TIM_Base_Start_IT>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000752:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000756:	2b00      	cmp	r3, #0
 8000758:	d111      	bne.n	800077e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800075a:	201e      	movs	r0, #30
 800075c:	f000 fa77 	bl	8000c4e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d808      	bhi.n	8000778 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000766:	2200      	movs	r2, #0
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	201e      	movs	r0, #30
 800076c:	f000 fa53 	bl	8000c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000770:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <HAL_InitTick+0xf8>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e002      	b.n	800077e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800077e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000782:	4618      	mov	r0, r3
 8000784:	3738      	adds	r7, #56	@ 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	431bde83 	.word	0x431bde83
 8000794:	20000164 	.word	0x20000164
 8000798:	40000800 	.word	0x40000800
 800079c:	20000004 	.word	0x20000004

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
//DMA TX USART
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <DMA1_Channel4_IRQHandler+0x10>)
 80007da:	f000 fc1f 	bl	800101c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000114 	.word	0x20000114

080007e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
//DMA RX USART
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <DMA1_Channel5_IRQHandler+0x10>)
 80007ee:	f000 fc15 	bl	800101c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000d0 	.word	0x200000d0

080007fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <TIM4_IRQHandler+0x10>)
 8000802:	f001 fc81 	bl	8002108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000164 	.word	0x20000164

08000810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <USART1_IRQHandler+0x10>)
 8000816:	f001 ff2f 	bl	8002678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000088 	.word	0x20000088

08000824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return 1;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <_kill>:

int _kill(int pid, int sig)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800083c:	f009 fbe0 	bl	800a000 <__errno>
 8000840:	4603      	mov	r3, r0
 8000842:	2216      	movs	r2, #22
 8000844:	601a      	str	r2, [r3, #0]
  return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_exit>:

void _exit (int status)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800085a:	f04f 31ff 	mov.w	r1, #4294967295
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffe7 	bl	8000832 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <_exit+0x12>

08000868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800087a:	f3af 8000 	nop.w
 800087e:	4601      	mov	r1, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf0      	blt.n	800087a <_read+0x12>
  }

  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e009      	b.n	80008c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf1      	blt.n	80008b4 <_write+0x12>
  }
  return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_close>:

int _close(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000900:	605a      	str	r2, [r3, #4]
  return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
	...

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f009 fb48 	bl	800a000 <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20005000 	.word	0x20005000
 800099c:	00000400 	.word	0x00000400
 80009a0:	200001ac 	.word	0x200001ac
 80009a4:	20002f68 	.word	0x20002f68

080009a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b4:	f7ff fff8 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ba:	490c      	ldr	r1, [pc, #48]	@ (80009ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009bc:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d0:	4c09      	ldr	r4, [pc, #36]	@ (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009de:	f009 fb15 	bl	800a00c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fbbd 	bl	8000160 <main>
  bx lr
 80009e6:	4770      	bx	lr
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009f0:	0800b838 	.word	0x0800b838
  ldr r2, =_sbss
 80009f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009f8:	20002f64 	.word	0x20002f64

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8f5 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff fe44 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fd34 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200001b0 	.word	0x200001b0

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	@ (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	200001b0 	.word	0x200001b0

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4906      	ldr	r1, [pc, #24]	@ (8000afc <__NVIC_EnableIRQ+0x34>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db12      	blt.n	8000b38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	490a      	ldr	r1, [pc, #40]	@ (8000b44 <__NVIC_DisableIRQ+0x44>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	3320      	adds	r3, #32
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b32:	f3bf 8f6f 	isb	sy
}
 8000b36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff2b 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff40 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ffb2 	bl	8000b9c <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff81 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff33 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff41 	bl	8000b00 <__NVIC_DisableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e043      	b.n	8000d26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <HAL_DMA_Init+0xa8>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_DMA_Init+0xac>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	009a      	lsls	r2, r3, #2
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <HAL_DMA_Init+0xb0>)
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000cd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	bffdfff8 	.word	0xbffdfff8
 8000d34:	cccccccd 	.word	0xcccccccd
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e046      	b.n	8000ddc <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_DMA_DeInit+0xac>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4a18      	ldr	r2, [pc, #96]	@ (8000dec <HAL_DMA_DeInit+0xb0>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a15      	ldr	r2, [pc, #84]	@ (8000df0 <HAL_DMA_DeInit+0xb4>)
 8000d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	bffdfff8 	.word	0xbffdfff8
 8000dec:	cccccccd 	.word	0xcccccccd
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Start_IT+0x20>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e04b      	b.n	8000eac <HAL_DMA_Start_IT+0xb8>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d13a      	bne.n	8000e9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f9eb 	bl	8001228 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 020e 	orr.w	r2, r2, #14
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e00f      	b.n	8000e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0204 	bic.w	r2, r2, #4
 8000e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 020a 	orr.w	r2, r2, #10
 8000e8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e005      	b.n	8000eaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d005      	beq.n	8000f50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2204      	movs	r2, #4
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e051      	b.n	8000ff4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 020e 	bic.w	r2, r2, #14
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_DMA_Abort_IT+0xd4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d029      	beq.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <HAL_DMA_Abort_IT+0xd8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d022      	beq.n	8000fca <HAL_DMA_Abort_IT+0x9e>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1f      	ldr	r2, [pc, #124]	@ (8001008 <HAL_DMA_Abort_IT+0xdc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01a      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x98>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <HAL_DMA_Abort_IT+0xe0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d012      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x92>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <HAL_DMA_Abort_IT+0xe4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00a      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x8c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_DMA_Abort_IT+0xe8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d102      	bne.n	8000fb2 <HAL_DMA_Abort_IT+0x86>
 8000fac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb0:	e00e      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fb6:	e00b      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fbc:	e008      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc2:	e005      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc8:	e002      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fca:	2310      	movs	r3, #16
 8000fcc:	e000      	b.n	8000fd0 <HAL_DMA_Abort_IT+0xa4>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <HAL_DMA_Abort_IT+0xec>)
 8000fd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	4798      	blx	r3
    } 
  }
  return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020008 	.word	0x40020008
 8001004:	4002001c 	.word	0x4002001c
 8001008:	40020030 	.word	0x40020030
 800100c:	40020044 	.word	0x40020044
 8001010:	40020058 	.word	0x40020058
 8001014:	4002006c 	.word	0x4002006c
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	2204      	movs	r2, #4
 800103a:	409a      	lsls	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d04f      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xc8>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	2b00      	cmp	r3, #0
 800104c:	d04a      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0204 	bic.w	r2, r2, #4
 800106a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a66      	ldr	r2, [pc, #408]	@ (800120c <HAL_DMA_IRQHandler+0x1f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d029      	beq.n	80010ca <HAL_DMA_IRQHandler+0xae>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a65      	ldr	r2, [pc, #404]	@ (8001210 <HAL_DMA_IRQHandler+0x1f4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d022      	beq.n	80010c6 <HAL_DMA_IRQHandler+0xaa>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a63      	ldr	r2, [pc, #396]	@ (8001214 <HAL_DMA_IRQHandler+0x1f8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01a      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xa4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a62      	ldr	r2, [pc, #392]	@ (8001218 <HAL_DMA_IRQHandler+0x1fc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d012      	beq.n	80010ba <HAL_DMA_IRQHandler+0x9e>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a60      	ldr	r2, [pc, #384]	@ (800121c <HAL_DMA_IRQHandler+0x200>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x98>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001220 <HAL_DMA_IRQHandler+0x204>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d102      	bne.n	80010ae <HAL_DMA_IRQHandler+0x92>
 80010a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ac:	e00e      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010b2:	e00b      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80010b8:	e008      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010be:	e005      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c4:	e002      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010c6:	2340      	movs	r3, #64	@ 0x40
 80010c8:	e000      	b.n	80010cc <HAL_DMA_IRQHandler+0xb0>
 80010ca:	2304      	movs	r3, #4
 80010cc:	4a55      	ldr	r2, [pc, #340]	@ (8001224 <HAL_DMA_IRQHandler+0x208>)
 80010ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8094 	beq.w	8001202 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010e2:	e08e      	b.n	8001202 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	2202      	movs	r2, #2
 80010ea:	409a      	lsls	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d056      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x186>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d051      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10b      	bne.n	8001124 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020a 	bic.w	r2, r2, #10
 800111a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a38      	ldr	r2, [pc, #224]	@ (800120c <HAL_DMA_IRQHandler+0x1f0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d029      	beq.n	8001182 <HAL_DMA_IRQHandler+0x166>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a37      	ldr	r2, [pc, #220]	@ (8001210 <HAL_DMA_IRQHandler+0x1f4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d022      	beq.n	800117e <HAL_DMA_IRQHandler+0x162>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a35      	ldr	r2, [pc, #212]	@ (8001214 <HAL_DMA_IRQHandler+0x1f8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x15c>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a34      	ldr	r2, [pc, #208]	@ (8001218 <HAL_DMA_IRQHandler+0x1fc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d012      	beq.n	8001172 <HAL_DMA_IRQHandler+0x156>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a32      	ldr	r2, [pc, #200]	@ (800121c <HAL_DMA_IRQHandler+0x200>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00a      	beq.n	800116c <HAL_DMA_IRQHandler+0x150>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a31      	ldr	r2, [pc, #196]	@ (8001220 <HAL_DMA_IRQHandler+0x204>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d102      	bne.n	8001166 <HAL_DMA_IRQHandler+0x14a>
 8001160:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001164:	e00e      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 8001166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800116a:	e00b      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 800116c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001170:	e008      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 8001172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001176:	e005      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 8001178:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117c:	e002      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 800117e:	2320      	movs	r3, #32
 8001180:	e000      	b.n	8001184 <HAL_DMA_IRQHandler+0x168>
 8001182:	2302      	movs	r3, #2
 8001184:	4a27      	ldr	r2, [pc, #156]	@ (8001224 <HAL_DMA_IRQHandler+0x208>)
 8001186:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	2b00      	cmp	r3, #0
 8001196:	d034      	beq.n	8001202 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011a0:	e02f      	b.n	8001202 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	2208      	movs	r2, #8
 80011a8:	409a      	lsls	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d028      	beq.n	8001204 <HAL_DMA_IRQHandler+0x1e8>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020e 	bic.w	r2, r2, #14
 80011ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
    }
  }
  return;
 8001202:	bf00      	nop
 8001204:	bf00      	nop
}
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020008 	.word	0x40020008
 8001210:	4002001c 	.word	0x4002001c
 8001214:	40020030 	.word	0x40020030
 8001218:	40020044 	.word	0x40020044
 800121c:	40020058 	.word	0x40020058
 8001220:	4002006c 	.word	0x4002006c
 8001224:	40020000 	.word	0x40020000

08001228 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d108      	bne.n	8001268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001266:	e007      	b.n	8001278 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b08b      	sub	sp, #44	@ 0x2c
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	e169      	b.n	800156c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001298:	2201      	movs	r2, #1
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8158 	bne.w	8001566 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001524 <HAL_GPIO_Init+0x2a0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d05e      	beq.n	800137e <HAL_GPIO_Init+0xfa>
 80012c0:	4a98      	ldr	r2, [pc, #608]	@ (8001524 <HAL_GPIO_Init+0x2a0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d875      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012c6:	4a98      	ldr	r2, [pc, #608]	@ (8001528 <HAL_GPIO_Init+0x2a4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d058      	beq.n	800137e <HAL_GPIO_Init+0xfa>
 80012cc:	4a96      	ldr	r2, [pc, #600]	@ (8001528 <HAL_GPIO_Init+0x2a4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d86f      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012d2:	4a96      	ldr	r2, [pc, #600]	@ (800152c <HAL_GPIO_Init+0x2a8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d052      	beq.n	800137e <HAL_GPIO_Init+0xfa>
 80012d8:	4a94      	ldr	r2, [pc, #592]	@ (800152c <HAL_GPIO_Init+0x2a8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d869      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012de:	4a94      	ldr	r2, [pc, #592]	@ (8001530 <HAL_GPIO_Init+0x2ac>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d04c      	beq.n	800137e <HAL_GPIO_Init+0xfa>
 80012e4:	4a92      	ldr	r2, [pc, #584]	@ (8001530 <HAL_GPIO_Init+0x2ac>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d863      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012ea:	4a92      	ldr	r2, [pc, #584]	@ (8001534 <HAL_GPIO_Init+0x2b0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d046      	beq.n	800137e <HAL_GPIO_Init+0xfa>
 80012f0:	4a90      	ldr	r2, [pc, #576]	@ (8001534 <HAL_GPIO_Init+0x2b0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d85d      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d82a      	bhi.n	8001350 <HAL_GPIO_Init+0xcc>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d859      	bhi.n	80013b2 <HAL_GPIO_Init+0x12e>
 80012fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <HAL_GPIO_Init+0x80>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	0800137f 	.word	0x0800137f
 8001308:	08001359 	.word	0x08001359
 800130c:	0800136b 	.word	0x0800136b
 8001310:	080013ad 	.word	0x080013ad
 8001314:	080013b3 	.word	0x080013b3
 8001318:	080013b3 	.word	0x080013b3
 800131c:	080013b3 	.word	0x080013b3
 8001320:	080013b3 	.word	0x080013b3
 8001324:	080013b3 	.word	0x080013b3
 8001328:	080013b3 	.word	0x080013b3
 800132c:	080013b3 	.word	0x080013b3
 8001330:	080013b3 	.word	0x080013b3
 8001334:	080013b3 	.word	0x080013b3
 8001338:	080013b3 	.word	0x080013b3
 800133c:	080013b3 	.word	0x080013b3
 8001340:	080013b3 	.word	0x080013b3
 8001344:	080013b3 	.word	0x080013b3
 8001348:	08001361 	.word	0x08001361
 800134c:	08001375 	.word	0x08001375
 8001350:	4a79      	ldr	r2, [pc, #484]	@ (8001538 <HAL_GPIO_Init+0x2b4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001356:	e02c      	b.n	80013b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e029      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	3304      	adds	r3, #4
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e024      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	3308      	adds	r3, #8
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e01f      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	330c      	adds	r3, #12
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e01a      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001386:	2304      	movs	r3, #4
 8001388:	623b      	str	r3, [r7, #32]
          break;
 800138a:	e013      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	611a      	str	r2, [r3, #16]
          break;
 800139e:	e009      	b.n	80013b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	615a      	str	r2, [r3, #20]
          break;
 80013aa:	e003      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x130>
          break;
 80013b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2bff      	cmp	r3, #255	@ 0xff
 80013b8:	d801      	bhi.n	80013be <HAL_GPIO_Init+0x13a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_Init+0x13e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3304      	adds	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2bff      	cmp	r3, #255	@ 0xff
 80013c8:	d802      	bhi.n	80013d0 <HAL_GPIO_Init+0x14c>
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x152>
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	3b08      	subs	r3, #8
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	210f      	movs	r1, #15
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	6a39      	ldr	r1, [r7, #32]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80b1 	beq.w	8001566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001404:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a4c      	ldr	r2, [pc, #304]	@ (800153c <HAL_GPIO_Init+0x2b8>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <HAL_GPIO_Init+0x2b8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800141c:	4a48      	ldr	r2, [pc, #288]	@ (8001540 <HAL_GPIO_Init+0x2bc>)
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a40      	ldr	r2, [pc, #256]	@ (8001544 <HAL_GPIO_Init+0x2c0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d013      	beq.n	8001470 <HAL_GPIO_Init+0x1ec>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3f      	ldr	r2, [pc, #252]	@ (8001548 <HAL_GPIO_Init+0x2c4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_GPIO_Init+0x1e8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3e      	ldr	r2, [pc, #248]	@ (800154c <HAL_GPIO_Init+0x2c8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x1e4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <HAL_GPIO_Init+0x2cc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_Init+0x1e0>
 8001460:	2303      	movs	r3, #3
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x1ee>
 8001464:	2304      	movs	r3, #4
 8001466:	e004      	b.n	8001472 <HAL_GPIO_Init+0x1ee>
 8001468:	2302      	movs	r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x1ee>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_GPIO_Init+0x1ee>
 8001470:	2300      	movs	r3, #0
 8001472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001474:	f002 0203 	and.w	r2, r2, #3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4093      	lsls	r3, r2
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001482:	492f      	ldr	r1, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x2bc>)
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	492c      	ldr	r1, [pc, #176]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4928      	ldr	r1, [pc, #160]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4922      	ldr	r1, [pc, #136]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60cb      	str	r3, [r1, #12]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	491e      	ldr	r1, [pc, #120]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4918      	ldr	r1, [pc, #96]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	4914      	ldr	r1, [pc, #80]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d021      	beq.n	8001558 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	490e      	ldr	r1, [pc, #56]	@ (8001554 <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
 8001520:	e021      	b.n	8001566 <HAL_GPIO_Init+0x2e2>
 8001522:	bf00      	nop
 8001524:	10320000 	.word	0x10320000
 8001528:	10310000 	.word	0x10310000
 800152c:	10220000 	.word	0x10220000
 8001530:	10210000 	.word	0x10210000
 8001534:	10120000 	.word	0x10120000
 8001538:	10110000 	.word	0x10110000
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	40010800 	.word	0x40010800
 8001548:	40010c00 	.word	0x40010c00
 800154c:	40011000 	.word	0x40011000
 8001550:	40011400 	.word	0x40011400
 8001554:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_GPIO_Init+0x304>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	43db      	mvns	r3, r3
 8001560:	4909      	ldr	r1, [pc, #36]	@ (8001588 <HAL_GPIO_Init+0x304>)
 8001562:	4013      	ands	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	3301      	adds	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f ae8e 	bne.w	8001298 <HAL_GPIO_Init+0x14>
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	372c      	adds	r7, #44	@ 0x2c
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800159a:	e09a      	b.n	80016d2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 808d 	beq.w	80016cc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80015b2:	4a4e      	ldr	r2, [pc, #312]	@ (80016ec <HAL_GPIO_DeInit+0x160>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a46      	ldr	r2, [pc, #280]	@ (80016f0 <HAL_GPIO_DeInit+0x164>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_DeInit+0x78>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a45      	ldr	r2, [pc, #276]	@ (80016f4 <HAL_GPIO_DeInit+0x168>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_DeInit+0x74>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <HAL_GPIO_DeInit+0x16c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_DeInit+0x70>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a43      	ldr	r2, [pc, #268]	@ (80016fc <HAL_GPIO_DeInit+0x170>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_DeInit+0x6c>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_DeInit+0x7a>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_DeInit+0x7a>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_DeInit+0x7a>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_DeInit+0x7a>
 8001604:	2300      	movs	r3, #0
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	d132      	bne.n	800167c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001616:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	43db      	mvns	r3, r3
 800161e:	4938      	ldr	r1, [pc, #224]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 8001620:	4013      	ands	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4934      	ldr	r1, [pc, #208]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 800162e:	4013      	ands	r3, r2
 8001630:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	4931      	ldr	r1, [pc, #196]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 800163c:	4013      	ands	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	492d      	ldr	r1, [pc, #180]	@ (8001700 <HAL_GPIO_DeInit+0x174>)
 800164a:	4013      	ands	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800165e:	4a23      	ldr	r2, [pc, #140]	@ (80016ec <HAL_GPIO_DeInit+0x160>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	43da      	mvns	r2, r3
 800166e:	481f      	ldr	r0, [pc, #124]	@ (80016ec <HAL_GPIO_DeInit+0x160>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	400a      	ands	r2, r1
 8001676:	3302      	adds	r3, #2
 8001678:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	@ 0xff
 8001680:	d801      	bhi.n	8001686 <HAL_GPIO_DeInit+0xfa>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e001      	b.n	800168a <HAL_GPIO_DeInit+0xfe>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d802      	bhi.n	8001698 <HAL_GPIO_DeInit+0x10c>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_DeInit+0x112>
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3b08      	subs	r3, #8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	210f      	movs	r1, #15
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	2104      	movs	r1, #4
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f af5e 	bne.w	800159c <HAL_GPIO_DeInit+0x10>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	611a      	str	r2, [r3, #16]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e272      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8087 	beq.w	8001862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001754:	4b92      	ldr	r3, [pc, #584]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4b8f      	ldr	r3, [pc, #572]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d112      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
 800176c:	4b8c      	ldr	r3, [pc, #560]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d06c      	beq.n	8001860 <HAL_RCC_OscConfig+0x12c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d168      	bne.n	8001860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e24c      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x76>
 800179c:	4b80      	ldr	r3, [pc, #512]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7f      	ldr	r2, [pc, #508]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e02e      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b7b      	ldr	r3, [pc, #492]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7a      	ldr	r2, [pc, #488]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b78      	ldr	r3, [pc, #480]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0xbc>
 80017d6:	4b72      	ldr	r3, [pc, #456]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a71      	ldr	r2, [pc, #452]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6f      	ldr	r3, [pc, #444]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017f0:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a67      	ldr	r2, [pc, #412]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff f91e 	bl	8000a50 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff f91a 	bl	8000a50 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e200      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5d      	ldr	r3, [pc, #372]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xe4>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f90a 	bl	8000a50 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f906 	bl	8000a50 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1ec      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x10c>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186e:	4b4c      	ldr	r3, [pc, #304]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800187a:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
 8001886:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b43      	ldr	r3, [pc, #268]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c0      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4939      	ldr	r1, [pc, #228]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8bf 	bl	8000a50 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff f8bb 	bl	8000a50 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4927      	ldr	r1, [pc, #156]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_RCC_OscConfig+0x270>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f89e 	bl	8000a50 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f89a 	bl	8000a50 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e180      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03a      	beq.n	80019b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d019      	beq.n	800197e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_RCC_OscConfig+0x274>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff f87e 	bl	8000a50 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f87a 	bl	8000a50 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e160      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fafe 	bl	8001f78 <RCC_Delay>
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f864 	bl	8000a50 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f860 	bl	8000a50 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e146      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	42420000 	.word	0x42420000
 80019a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b92      	ldr	r3, [pc, #584]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e9      	bne.n	800198c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a6 	beq.w	8001b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b88      	ldr	r3, [pc, #544]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a87      	ldr	r2, [pc, #540]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b85      	ldr	r3, [pc, #532]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b82      	ldr	r3, [pc, #520]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b7f      	ldr	r3, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7e      	ldr	r2, [pc, #504]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f821 	bl	8000a50 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff f81d 	bl	8000a50 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	@ 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e103      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a38:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a69      	ldr	r2, [pc, #420]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b67      	ldr	r3, [pc, #412]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a66      	ldr	r2, [pc, #408]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x356>
 8001a70:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a60      	ldr	r2, [pc, #384]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e00b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	4b58      	ldr	r3, [pc, #352]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a57      	ldr	r2, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7fe ffd1 	bl	8000a50 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7fe ffcd 	bl	8000a50 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0b1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ee      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x37e>
 8001ad4:	e014      	b.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7fe ffbb 	bl	8000a50 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7fe ffb7 	bl	8000a50 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e09b      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8087 	beq.w	8001c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d061      	beq.n	8001bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d146      	bne.n	8001bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe ff8b 	bl	8000a50 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ff87 	bl	8000a50 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e06d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4921      	ldr	r1, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a19      	ldr	r1, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	491b      	ldr	r1, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe ff5b 	bl	8000a50 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe ff57 	bl	8000a50 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
 8001bbc:	e035      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff44 	bl	8000a50 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ff40 	bl	8000a50 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e026      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x498>
 8001bea:	e01e      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e019      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x500>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d0      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4965      	ldr	r1, [pc, #404]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0b8      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c94:	4b59      	ldr	r3, [pc, #356]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a58      	ldr	r2, [pc, #352]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cac:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	494d      	ldr	r1, [pc, #308]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d040      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e07f      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e073      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4936      	ldr	r1, [pc, #216]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7fe fe92 	bl	8000a50 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7fe fe8e 	bl	8000a50 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e053      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d210      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4922      	ldr	r1, [pc, #136]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e032      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4916      	ldr	r1, [pc, #88]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	490e      	ldr	r1, [pc, #56]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc6:	f000 f821 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	490a      	ldr	r1, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	5ccb      	ldrb	r3, [r1, r3]
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1cc>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc5c 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	0800ae84 	.word	0x0800ae84
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x30>
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3a:	e027      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	e027      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0c9b      	lsrs	r3, r3, #18
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0c5b      	lsrs	r3, r3, #17
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	613b      	str	r3, [r7, #16]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	693b      	ldr	r3, [r7, #16]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	0800ae9c 	.word	0x0800ae9c
 8001eac:	0800aeac 	.word	0x0800aeac
 8001eb0:	003d0900 	.word	0x003d0900

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff2 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	0800ae94 	.word	0x0800ae94

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	0800ae94 	.word	0x0800ae94

08001f18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	220f      	movs	r2, #15
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_RCC_GetClockConfig+0x58>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_RCC_GetClockConfig+0x58>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_RCC_GetClockConfig+0x58>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_RCC_GetClockConfig+0x58>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0207 	and.w	r2, r3, #7
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40022000 	.word	0x40022000

08001f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <RCC_Delay+0x34>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <RCC_Delay+0x38>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a5b      	lsrs	r3, r3, #9
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f94:	bf00      	nop
  }
  while (Delay --);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	60fa      	str	r2, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f9      	bne.n	8001f94 <RCC_Delay+0x1c>
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	10624dd3 	.word	0x10624dd3

08001fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e041      	b.n	800204a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f839 	bl	8002052 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 f9b4 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e03a      	b.n	80020f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_TIM_Base_Start_IT+0x98>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a6:	d009      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <HAL_TIM_Base_Start_IT+0x9c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <HAL_TIM_Base_Start_IT+0xa0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d010      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	e007      	b.n	80020f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800

08002108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0202 	mvn.w	r2, #2
 8002134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8ed 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8e0 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8ef 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0204 	mvn.w	r2, #4
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8c3 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8b6 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8c5 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0208 	mvn.w	r2, #8
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f899 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f88c 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f89b 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b10      	cmp	r3, #16
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2208      	movs	r2, #8
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f86f 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f862 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f871 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0201 	mvn.w	r2, #1
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe f8e6 	bl	8000458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	2b80      	cmp	r3, #128	@ 0x80
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b80      	cmp	r3, #128	@ 0x80
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8bf 	bl	8002436 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c2:	2b40      	cmp	r3, #64	@ 0x40
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d0:	2b40      	cmp	r3, #64	@ 0x40
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f835 	bl	800234e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f88a 	bl	8002424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a29      	ldr	r2, [pc, #164]	@ (8002418 <TIM_Base_SetConfig+0xb8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00b      	beq.n	8002390 <TIM_Base_SetConfig+0x30>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x30>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a26      	ldr	r2, [pc, #152]	@ (800241c <TIM_Base_SetConfig+0xbc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x30>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a25      	ldr	r2, [pc, #148]	@ (8002420 <TIM_Base_SetConfig+0xc0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <TIM_Base_SetConfig+0xb8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x62>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a19      	ldr	r2, [pc, #100]	@ (800241c <TIM_Base_SetConfig+0xbc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a18      	ldr	r2, [pc, #96]	@ (8002420 <TIM_Base_SetConfig+0xc0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <TIM_Base_SetConfig+0xb8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d103      	bne.n	8002408 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	615a      	str	r2, [r3, #20]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800

08002424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e042      	b.n	80024e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f842 	bl	80004f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fe43 	bl	8003118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e024      	b.n	8002544 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2224      	movs	r2, #36	@ 0x24
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002510:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe f89a 	bl	800064c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d112      	bne.n	800258c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Receive_IT+0x26>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00b      	b.n	800258e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	461a      	mov	r2, r3
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fbcc 	bl	8002d20 <UART_Start_Receive_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	e000      	b.n	800258e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	@ 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d156      	bne.n	8002660 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_UART_Transmit_DMA+0x26>
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e04f      	b.n	8002662 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2221      	movs	r2, #33	@ 0x21
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	4a21      	ldr	r2, [pc, #132]	@ (800266c <HAL_UART_Transmit_DMA+0xd4>)
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <HAL_UART_Transmit_DMA+0xd8>)
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002674 <HAL_UART_Transmit_DMA+0xdc>)
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3304      	adds	r3, #4
 8002616:	461a      	mov	r2, r3
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	f7fe fbeb 	bl	8000df4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002626:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	e853 3f00 	ldrex	r3, [r3]
 8002636:	617b      	str	r3, [r7, #20]
   return(result);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3314      	adds	r3, #20
 8002646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002648:	627a      	str	r2, [r7, #36]	@ 0x24
 800264a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	61fb      	str	r3, [r7, #28]
   return(result);
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3730      	adds	r7, #48	@ 0x30
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	08002bd7 	.word	0x08002bd7
 8002670:	08002c71 	.word	0x08002c71
 8002674:	08002c8d 	.word	0x08002c8d

08002678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0ba      	sub	sp, #232	@ 0xe8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_UART_IRQHandler+0x66>
 80026ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fc5f 	bl	8002f9a <UART_Receive_IT>
      return;
 80026dc:	e25b      	b.n	8002b96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80de 	beq.w	80028a4 <HAL_UART_IRQHandler+0x22c>
 80026e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80d1 	beq.w	80028a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_UART_IRQHandler+0xae>
 800270e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_UART_IRQHandler+0xd2>
 8002732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f043 0202 	orr.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_UART_IRQHandler+0xf6>
 8002756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f043 0204 	orr.w	r2, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d011      	beq.n	800279e <HAL_UART_IRQHandler+0x126>
 800277a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f043 0208 	orr.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 81f2 	beq.w	8002b8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_UART_IRQHandler+0x14e>
 80027b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbea 	bl	8002f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_UART_IRQHandler+0x17a>
 80027ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04f      	beq.n	8002892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 faf4 	bl	8002de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d041      	beq.n	800288a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800283e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800284a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1d9      	bne.n	8002806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d013      	beq.n	8002882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a58 <HAL_UART_IRQHandler+0x3e0>)
 8002860:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fb60 	bl	8000f2c <HAL_DMA_Abort_IT>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800287c:	4610      	mov	r0, r2
 800287e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e00e      	b.n	80028a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f993 	bl	8002bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	e00a      	b.n	80028a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f98f 	bl	8002bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e006      	b.n	80028a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f98b 	bl	8002bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800289e:	e175      	b.n	8002b8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	bf00      	nop
    return;
 80028a2:	e173      	b.n	8002b8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 814f 	bne.w	8002b4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8148 	beq.w	8002b4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8141 	beq.w	8002b4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80b6 	beq.w	8002a5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8145 	beq.w	8002b90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800290a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800290e:	429a      	cmp	r2, r3
 8002910:	f080 813e 	bcs.w	8002b90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800291a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b20      	cmp	r3, #32
 8002924:	f000 8088 	beq.w	8002a38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800293e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002942:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002946:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002954:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002960:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800296c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1d9      	bne.n	8002928 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002998:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800299c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e1      	bne.n	8002974 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3314      	adds	r3, #20
 80029b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e3      	bne.n	80029b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a08:	f023 0310 	bic.w	r3, r3, #16
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e3      	bne.n	80029f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fa3e 	bl	8000eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8b6 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a54:	e09c      	b.n	8002b90 <HAL_UART_IRQHandler+0x518>
 8002a56:	bf00      	nop
 8002a58:	08002ea5 	.word	0x08002ea5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 808e 	beq.w	8002b94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8089 	beq.w	8002b94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e3      	bne.n	8002a82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0310 	bic.w	r3, r3, #16
 8002b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b24:	61fa      	str	r2, [r7, #28]
 8002b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	617b      	str	r3, [r7, #20]
   return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e3      	bne.n	8002b00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f83b 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4a:	e023      	b.n	8002b94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_UART_IRQHandler+0x4f4>
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f9b1 	bl	8002ecc <UART_Transmit_IT>
    return;
 8002b6a:	e014      	b.n	8002b96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <HAL_UART_IRQHandler+0x51e>
 8002b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f9f0 	bl	8002f6a <UART_EndTransmit_IT>
    return;
 8002b8a:	e004      	b.n	8002b96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b8c:	bf00      	nop
 8002b8e:	e002      	b.n	8002b96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b94:	bf00      	nop
  }
}
 8002b96:	37e8      	adds	r7, #232	@ 0xe8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b090      	sub	sp, #64	@ 0x40
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d137      	bne.n	8002c62 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	623b      	str	r3, [r7, #32]
   return(result);
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3314      	adds	r3, #20
 8002c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c18:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e5      	bne.n	8002bf8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4c:	61fa      	str	r2, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c60:	e002      	b.n	8002c68 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002c62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002c64:	f003 fdc2 	bl	80067ec <HAL_UART_TxCpltCallback>
}
 8002c68:	bf00      	nop
 8002c6a:	3740      	adds	r7, #64	@ 0x40
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff8c 	bl	8002b9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b21      	cmp	r3, #33	@ 0x21
 8002cbe:	d108      	bne.n	8002cd2 <UART_DMAError+0x46>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f000 f860 	bl	8002d92 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b22      	cmp	r3, #34	@ 0x22
 8002cf2:	d108      	bne.n	8002d06 <UART_DMAError+0x7a>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f000 f86d 	bl	8002de0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d12:	68b8      	ldr	r0, [r7, #8]
 8002d14:	f7ff ff4b 	bl	8002bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2222      	movs	r2, #34	@ 0x22
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b089      	sub	sp, #36	@ 0x24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	61ba      	str	r2, [r7, #24]
 8002dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e5      	bne.n	8002d9a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002dd6:	bf00      	nop
 8002dd8:	3724      	adds	r7, #36	@ 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b095      	sub	sp, #84	@ 0x54
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e08:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3314      	adds	r3, #20
 8002e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d119      	bne.n	8002e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f023 0310 	bic.w	r3, r3, #16
 8002e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e78:	61ba      	str	r2, [r7, #24]
 8002e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	613b      	str	r3, [r7, #16]
   return(result);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e9a:	bf00      	nop
 8002e9c:	3754      	adds	r7, #84	@ 0x54
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fe75 	bl	8002bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b21      	cmp	r3, #33	@ 0x21
 8002ede:	d13e      	bne.n	8002f5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee8:	d114      	bne.n	8002f14 <UART_Transmit_IT+0x48>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d110      	bne.n	8002f14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]
 8002f12:	e008      	b.n	8002f26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6211      	str	r1, [r2, #32]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f003 fc2e 	bl	80067ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08c      	sub	sp, #48	@ 0x30
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b22      	cmp	r3, #34	@ 0x22
 8002fac:	f040 80ae 	bne.w	800310c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d117      	bne.n	8002fea <UART_Receive_IT+0x50>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fe8:	e026      	b.n	8003038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffc:	d007      	beq.n	800300e <UART_Receive_IT+0x74>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <UART_Receive_IT+0x82>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e008      	b.n	800302e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003028:	b2da      	uxtb	r2, r3
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4619      	mov	r1, r3
 8003046:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003048:	2b00      	cmp	r3, #0
 800304a:	d15d      	bne.n	8003108 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0220 	bic.w	r2, r2, #32
 800305a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800306a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	2b01      	cmp	r3, #1
 8003090:	d135      	bne.n	80030fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	613b      	str	r3, [r7, #16]
   return(result);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 0310 	bic.w	r3, r3, #16
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b8:	623a      	str	r2, [r7, #32]
 80030ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	69f9      	ldr	r1, [r7, #28]
 80030be:	6a3a      	ldr	r2, [r7, #32]
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e5      	bne.n	8003098 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d10a      	bne.n	80030f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fd62 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
 80030fc:	e002      	b.n	8003104 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f003 fb84 	bl	800680c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e002      	b.n	800310e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3730      	adds	r7, #48	@ 0x30
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003152:	f023 030c 	bic.w	r3, r3, #12
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	430b      	orrs	r3, r1
 800315e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2c      	ldr	r2, [pc, #176]	@ (800322c <UART_SetConfig+0x114>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7fe feb6 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	e002      	b.n	800318e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7fe fe9e 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800318c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4a22      	ldr	r2, [pc, #136]	@ (8003230 <UART_SetConfig+0x118>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	0119      	lsls	r1, r3, #4
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <UART_SetConfig+0x118>)
 80031c6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2064      	movs	r0, #100	@ 0x64
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	3332      	adds	r3, #50	@ 0x32
 80031d8:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <UART_SetConfig+0x118>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e4:	4419      	add	r1, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <UART_SetConfig+0x118>)
 80031fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2064      	movs	r0, #100	@ 0x64
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	@ 0x32
 8003210:	4a07      	ldr	r2, [pc, #28]	@ (8003230 <UART_SetConfig+0x118>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	440a      	add	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40013800 	.word	0x40013800
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323a:	f3ef 8305 	mrs	r3, IPSR
 800323e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003240:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003246:	f3ef 8310 	mrs	r3, PRIMASK
 800324a:	607b      	str	r3, [r7, #4]
  return(result);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <osKernelInitialize+0x32>
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <osKernelInitialize+0x60>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d109      	bne.n	800326e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800325a:	f3ef 8311 	mrs	r3, BASEPRI
 800325e:	603b      	str	r3, [r7, #0]
  return(result);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003266:	f06f 0305 	mvn.w	r3, #5
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e00c      	b.n	8003288 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <osKernelInitialize+0x60>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <osKernelInitialize+0x60>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e002      	b.n	8003288 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	200001b4 	.word	0x200001b4

08003298 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329e:	f3ef 8305 	mrs	r3, IPSR
 80032a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80032a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	607b      	str	r3, [r7, #4]
  return(result);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <osKernelStart+0x32>
 80032b6:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <osKernelStart+0x64>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d109      	bne.n	80032d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032be:	f3ef 8311 	mrs	r3, BASEPRI
 80032c2:	603b      	str	r3, [r7, #0]
  return(result);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032ca:	f06f 0305 	mvn.w	r3, #5
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e00e      	b.n	80032f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <osKernelStart+0x64>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <osKernelStart+0x64>)
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032e0:	f001 fd3a 	bl	8004d58 <vTaskStartScheduler>
      stat = osOK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200001b4 	.word	0x200001b4

08003300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b092      	sub	sp, #72	@ 0x48
 8003304:	af04      	add	r7, sp, #16
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003310:	f3ef 8305 	mrs	r3, IPSR
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 8095 	bne.w	8003448 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	623b      	str	r3, [r7, #32]
  return(result);
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 808e 	bne.w	8003448 <osThreadNew+0x148>
 800332c:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <osThreadNew+0x154>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d106      	bne.n	8003342 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003334:	f3ef 8311 	mrs	r3, BASEPRI
 8003338:	61fb      	str	r3, [r7, #28]
  return(result);
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 8083 	bne.w	8003448 <osThreadNew+0x148>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d07f      	beq.n	8003448 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8003348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800334e:	2318      	movs	r3, #24
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003352:	2300      	movs	r3, #0
 8003354:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003356:	f107 031b 	add.w	r3, r7, #27
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d045      	beq.n	80033f4 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <osThreadNew+0x76>
        name = attr->name;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <osThreadNew+0x9c>
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	2b38      	cmp	r3, #56	@ 0x38
 800338e:	d805      	bhi.n	800339c <osThreadNew+0x9c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <osThreadNew+0xa0>
        return (NULL);
 800339c:	2300      	movs	r3, #0
 800339e:	e054      	b.n	800344a <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <osThreadNew+0xd6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2ba7      	cmp	r3, #167	@ 0xa7
 80033be:	d90a      	bls.n	80033d6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <osThreadNew+0xd6>
        mem = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033d4:	e010      	b.n	80033f8 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <osThreadNew+0xf8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <osThreadNew+0xf8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <osThreadNew+0xf8>
          mem = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033f2:	e001      	b.n	80033f8 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d110      	bne.n	8003420 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003406:	9202      	str	r2, [sp, #8]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003412:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f001 fab5 	bl	8004984 <xTaskCreateStatic>
 800341a:	4603      	mov	r3, r0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e013      	b.n	8003448 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	d110      	bne.n	8003448 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	b29a      	uxth	r2, r3
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f001 fb02 	bl	8004a42 <xTaskCreate>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <osThreadNew+0x148>
          hTask = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003448:	697b      	ldr	r3, [r7, #20]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3738      	adds	r7, #56	@ 0x38
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200001b4 	.word	0x200001b4

08003458 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003460:	f3ef 8305 	mrs	r3, IPSR
 8003464:	613b      	str	r3, [r7, #16]
  return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	60fb      	str	r3, [r7, #12]
  return(result);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <osDelay+0x34>
 8003478:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <osDelay+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d109      	bne.n	8003494 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003480:	f3ef 8311 	mrs	r3, BASEPRI
 8003484:	60bb      	str	r3, [r7, #8]
  return(result);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <osDelay+0x3c>
    stat = osErrorISR;
 800348c:	f06f 0305 	mvn.w	r3, #5
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e007      	b.n	80034a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 fc24 	bl	8004cec <vTaskDelay>
    }
  }

  return (stat);
 80034a4:	697b      	ldr	r3, [r7, #20]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200001b4 	.word	0x200001b4

080034b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	@ 0x30
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c4:	f3ef 8305 	mrs	r3, IPSR
 80034c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8086 	bne.w	80035de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8310 	mrs	r3, PRIMASK
 80034d6:	617b      	str	r3, [r7, #20]
  return(result);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d17f      	bne.n	80035de <osSemaphoreNew+0x12a>
 80034de:	4b42      	ldr	r3, [pc, #264]	@ (80035e8 <osSemaphoreNew+0x134>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d105      	bne.n	80034f2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034e6:	f3ef 8311 	mrs	r3, BASEPRI
 80034ea:	613b      	str	r3, [r7, #16]
  return(result);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d175      	bne.n	80035de <osSemaphoreNew+0x12a>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d072      	beq.n	80035de <osSemaphoreNew+0x12a>
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d86e      	bhi.n	80035de <osSemaphoreNew+0x12a>
    mem = -1;
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <osSemaphoreNew+0x6e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b4f      	cmp	r3, #79	@ 0x4f
 800351a:	d902      	bls.n	8003522 <osSemaphoreNew+0x6e>
        mem = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e00c      	b.n	800353c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <osSemaphoreNew+0x88>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <osSemaphoreNew+0x88>
          mem = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	e001      	b.n	800353c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d04c      	beq.n	80035de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d128      	bne.n	800359c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10a      	bne.n	8003566 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2203      	movs	r2, #3
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	2001      	movs	r0, #1
 800355e:	f000 fa51 	bl	8003a04 <xQueueGenericCreateStatic>
 8003562:	6278      	str	r0, [r7, #36]	@ 0x24
 8003564:	e005      	b.n	8003572 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003566:	2203      	movs	r2, #3
 8003568:	2100      	movs	r1, #0
 800356a:	2001      	movs	r0, #1
 800356c:	f000 fac6 	bl	8003afc <xQueueGenericCreate>
 8003570:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <osSemaphoreNew+0x10a>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01f      	beq.n	80035be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800357e:	2300      	movs	r3, #0
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003586:	f000 fb89 	bl	8003c9c <xQueueGenericSend>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d016      	beq.n	80035be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003592:	f001 f825 	bl	80045e0 <vQueueDelete>
            hSemaphore = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24
 800359a:	e010      	b.n	80035be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fb08 	bl	8003bc0 <xQueueCreateCountingSemaphoreStatic>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80035b2:	e004      	b.n	80035be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fb3b 	bl	8003c32 <xQueueCreateCountingSemaphore>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e001      	b.n	80035d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035da:	f001 f94d 	bl	8004878 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	@ 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200001b4 	.word	0x200001b4

080035ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003604:	f06f 0303 	mvn.w	r3, #3
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e04b      	b.n	80036a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800360c:	f3ef 8305 	mrs	r3, IPSR
 8003610:	617b      	str	r3, [r7, #20]
  return(result);
 8003612:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8310 	mrs	r3, PRIMASK
 800361c:	613b      	str	r3, [r7, #16]
  return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <osSemaphoreAcquire+0x4c>
 8003624:	4b22      	ldr	r3, [pc, #136]	@ (80036b0 <osSemaphoreAcquire+0xc4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d128      	bne.n	800367e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800362c:	f3ef 8311 	mrs	r3, BASEPRI
 8003630:	60fb      	str	r3, [r7, #12]
  return(result);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800363e:	f06f 0303 	mvn.w	r3, #3
 8003642:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003644:	e02d      	b.n	80036a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	461a      	mov	r2, r3
 8003650:	2100      	movs	r1, #0
 8003652:	69b8      	ldr	r0, [r7, #24]
 8003654:	f000 ff42 	bl	80044dc <xQueueReceiveFromISR>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d003      	beq.n	8003666 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800365e:	f06f 0302 	mvn.w	r3, #2
 8003662:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003664:	e01d      	b.n	80036a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01a      	beq.n	80036a2 <osSemaphoreAcquire+0xb6>
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <osSemaphoreAcquire+0xc8>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800367c:	e011      	b.n	80036a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	69b8      	ldr	r0, [r7, #24]
 8003682:	f000 fe1b 	bl	80042bc <xQueueSemaphoreTake>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d00b      	beq.n	80036a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003692:	f06f 0301 	mvn.w	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e004      	b.n	80036a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800369a:	f06f 0302 	mvn.w	r3, #2
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	e000      	b.n	80036a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80036a2:	bf00      	nop
      }
    }
  }

  return (stat);
 80036a4:	69fb      	ldr	r3, [r7, #28]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200001b4 	.word	0x200001b4
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80036ce:	f06f 0303 	mvn.w	r3, #3
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e03e      	b.n	8003754 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036d6:	f3ef 8305 	mrs	r3, IPSR
 80036da:	617b      	str	r3, [r7, #20]
  return(result);
 80036dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e2:	f3ef 8310 	mrs	r3, PRIMASK
 80036e6:	613b      	str	r3, [r7, #16]
  return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <osSemaphoreRelease+0x4a>
 80036ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003760 <osSemaphoreRelease+0xa8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d120      	bne.n	8003738 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036f6:	f3ef 8311 	mrs	r3, BASEPRI
 80036fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01a      	beq.n	8003738 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4619      	mov	r1, r3
 800370c:	69b8      	ldr	r0, [r7, #24]
 800370e:	f000 fc62 	bl	8003fd6 <xQueueGiveFromISR>
 8003712:	4603      	mov	r3, r0
 8003714:	2b01      	cmp	r3, #1
 8003716:	d003      	beq.n	8003720 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003718:	f06f 0302 	mvn.w	r3, #2
 800371c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800371e:	e018      	b.n	8003752 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <osSemaphoreRelease+0x9a>
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <osSemaphoreRelease+0xac>)
 8003728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003736:	e00c      	b.n	8003752 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003738:	2300      	movs	r3, #0
 800373a:	2200      	movs	r2, #0
 800373c:	2100      	movs	r1, #0
 800373e:	69b8      	ldr	r0, [r7, #24]
 8003740:	f000 faac 	bl	8003c9c <xQueueGenericSend>
 8003744:	4603      	mov	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d004      	beq.n	8003754 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800374a:	f06f 0302 	mvn.w	r3, #2
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e000      	b.n	8003754 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003752:	bf00      	nop
    }
  }

  return (stat);
 8003754:	69fb      	ldr	r3, [r7, #28]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200001b4 	.word	0x200001b4
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a07      	ldr	r2, [pc, #28]	@ (8003794 <vApplicationGetIdleTaskMemory+0x2c>)
 8003778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4a06      	ldr	r2, [pc, #24]	@ (8003798 <vApplicationGetIdleTaskMemory+0x30>)
 800377e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	200001b8 	.word	0x200001b8
 8003798:	20000260 	.word	0x20000260

0800379c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80037ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a06      	ldr	r2, [pc, #24]	@ (80037cc <vApplicationGetTimerTaskMemory+0x30>)
 80037b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ba:	601a      	str	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000a60 	.word	0x20000a60
 80037cc:	20000b08 	.word	0x20000b08

080037d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f103 0208 	add.w	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f103 0208 	add.w	r2, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 0208 	add.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d103      	bne.n	800388c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e00c      	b.n	80038a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3308      	adds	r3, #8
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e002      	b.n	800389a <vListInsert+0x2e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d2f6      	bcs.n	8003894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6852      	ldr	r2, [r2, #4]
 80038fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d103      	bne.n	8003910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1e5a      	subs	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800395c:	f002 fc66 	bl	800622c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	441a      	add	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	3b01      	subs	r3, #1
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	22ff      	movs	r2, #255	@ 0xff
 80039a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	22ff      	movs	r2, #255	@ 0xff
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d114      	bne.n	80039dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01a      	beq.n	80039f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3310      	adds	r3, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 fc6a 	bl	8005298 <xTaskRemoveFromEventList>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <xQueueGenericReset+0xd0>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	e009      	b.n	80039f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3310      	adds	r3, #16
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fef5 	bl	80037d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3324      	adds	r3, #36	@ 0x24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fef0 	bl	80037d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039f0:	f002 fc4c 	bl	800628c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039f4:	2301      	movs	r3, #1
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <xQueueGenericCreateStatic+0x56>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <xQueueGenericCreateStatic+0x5a>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueGenericCreateStatic+0x5c>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	623b      	str	r3, [r7, #32]
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <xQueueGenericCreateStatic+0x84>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <xQueueGenericCreateStatic+0x88>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <xQueueGenericCreateStatic+0x8a>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	61fb      	str	r3, [r7, #28]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003aaa:	2350      	movs	r3, #80	@ 0x50
 8003aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b50      	cmp	r3, #80	@ 0x50
 8003ab2:	d00b      	beq.n	8003acc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	61bb      	str	r3, [r7, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ade:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f844 	bl	8003b7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3730      	adds	r7, #48	@ 0x30
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	613b      	str	r3, [r7, #16]
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e004      	b.n	8003b3e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3350      	adds	r3, #80	@ 0x50
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 fc74 	bl	8006430 <pvPortMalloc>
 8003b48:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	3350      	adds	r3, #80	@ 0x50
 8003b54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f805 	bl	8003b7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b70:	69bb      	ldr	r3, [r7, #24]
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e002      	b.n	8003b9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba8:	2101      	movs	r1, #1
 8003baa:	69b8      	ldr	r0, [r7, #24]
 8003bac:	f7ff fec0 	bl	8003930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	61bb      	str	r3, [r7, #24]
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	e7fd      	b.n	8003be6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90b      	bls.n	8003c0a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	617b      	str	r3, [r7, #20]
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fef5 	bl	8003a04 <xQueueGenericCreateStatic>
 8003c1a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c28:	69fb      	ldr	r3, [r7, #28]
	}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	613b      	str	r3, [r7, #16]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d90b      	bls.n	8003c7a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff3c 	bl	8003afc <xQueueGenericCreate>
 8003c84:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c92:	697b      	ldr	r3, [r7, #20]
	}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08e      	sub	sp, #56	@ 0x38
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003caa:	2300      	movs	r3, #0
 8003cac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <xQueueGenericSend+0x34>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <xQueueGenericSend+0x42>
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <xQueueGenericSend+0x46>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericSend+0x48>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <xQueueGenericSend+0x64>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x72>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <xQueueGenericSend+0x76>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueGenericSend+0x78>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericSend+0x94>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	623b      	str	r3, [r7, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d30:	f001 fc7c 	bl	800562c <xTaskGetSchedulerState>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <xQueueGenericSend+0xa4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xQueueGenericSend+0xa8>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <xQueueGenericSend+0xaa>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <xQueueGenericSend+0xc6>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61fb      	str	r3, [r7, #28]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d62:	f002 fa63 	bl	800622c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <xQueueGenericSend+0xdc>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d129      	bne.n	8003dcc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d7e:	f000 fc6a 	bl	8004656 <prvCopyDataToQueue>
 8003d82:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	3324      	adds	r3, #36	@ 0x24
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fa81 	bl	8005298 <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <xQueueGenericSend+0x200>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	e00a      	b.n	8003dc4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <xQueueGenericSend+0x200>)
 8003db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003dc4:	f002 fa62 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e063      	b.n	8003e94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dd2:	f002 fa5b 	bl	800628c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e05c      	b.n	8003e94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fabb 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dea:	2301      	movs	r3, #1
 8003dec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dee:	f002 fa4d 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003df2:	f001 f821 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003df6:	f002 fa19 	bl	800622c <vPortEnterCritical>
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d103      	bne.n	8003e10 <xQueueGenericSend+0x174>
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d103      	bne.n	8003e26 <xQueueGenericSend+0x18a>
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e26:	f002 fa31 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e2a:	1d3a      	adds	r2, r7, #4
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 faaa 	bl	800538c <xTaskCheckForTimeOut>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d124      	bne.n	8003e88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e40:	f000 fd01 	bl	8004846 <prvIsQueueFull>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d018      	beq.n	8003e7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f9ce 	bl	80051f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e5a:	f000 fc8c 	bl	8004776 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e5e:	f000 fff9 	bl	8004e54 <xTaskResumeAll>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f47f af7c 	bne.w	8003d62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <xQueueGenericSend+0x200>)
 8003e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	e772      	b.n	8003d62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e7e:	f000 fc7a 	bl	8004776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e82:	f000 ffe7 	bl	8004e54 <xTaskResumeAll>
 8003e86:	e76c      	b.n	8003d62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e8a:	f000 fc74 	bl	8004776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e8e:	f000 ffe1 	bl	8004e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e92:	2300      	movs	r3, #0
		}
	}
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3738      	adds	r7, #56	@ 0x38
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	@ 0x38
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSendFromISR+0x3e>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericSendFromISR+0x42>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericSendFromISR+0x44>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSendFromISR+0x6e>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <xQueueGenericSendFromISR+0x72>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <xQueueGenericSendFromISR+0x74>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	61fb      	str	r3, [r7, #28]
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f30:	f002 fa3e 	bl	80063b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f34:	f3ef 8211 	mrs	r2, BASEPRI
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61ba      	str	r2, [r7, #24]
 8003f4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <xQueueGenericSendFromISR+0xc2>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d12c      	bne.n	8003fbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f72:	f000 fb70 	bl	8004656 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f76:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d112      	bne.n	8003fa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	3324      	adds	r3, #36	@ 0x24
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f983 	bl	8005298 <xTaskRemoveFromEventList>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e007      	b.n	8003fb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	b25a      	sxtb	r2, r3
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003fba:	e001      	b.n	8003fc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3738      	adds	r7, #56	@ 0x38
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b08e      	sub	sp, #56	@ 0x38
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	623b      	str	r3, [r7, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	61fb      	str	r3, [r7, #28]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueGiveFromISR+0x5c>
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueGiveFromISR+0x60>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueGiveFromISR+0x62>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61bb      	str	r3, [r7, #24]
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004054:	f002 f9ac 	bl	80063b0 <vPortValidateInterruptPriority>
	__asm volatile
 8004058:	f3ef 8211 	mrs	r2, BASEPRI
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	617a      	str	r2, [r7, #20]
 800406e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004070:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004080:	429a      	cmp	r2, r3
 8004082:	d22b      	bcs.n	80040dc <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004096:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d112      	bne.n	80040c6 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	3324      	adds	r3, #36	@ 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 f8f3 	bl	8005298 <xTaskRemoveFromEventList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e007      	b.n	80040d6 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	b25a      	sxtb	r2, r3
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80040d6:	2301      	movs	r3, #1
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040da:	e001      	b.n	80040e0 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f383 8811 	msr	BASEPRI, r3
}
 80040ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3738      	adds	r7, #56	@ 0x38
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	@ 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <xQueueReceive+0x32>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	623b      	str	r3, [r7, #32]
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <xQueueReceive+0x40>
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueReceive+0x44>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <xQueueReceive+0x46>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <xQueueReceive+0x62>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	61fb      	str	r3, [r7, #28]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800415a:	f001 fa67 	bl	800562c <xTaskGetSchedulerState>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xQueueReceive+0x72>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueReceive+0x76>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueReceive+0x78>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueReceive+0x94>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61bb      	str	r3, [r7, #24]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800418c:	f002 f84e 	bl	800622c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01f      	beq.n	80041dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041a0:	f000 fac3 	bl	800472a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00f      	beq.n	80041d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	3310      	adds	r3, #16
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 f86d 	bl	8005298 <xTaskRemoveFromEventList>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041c4:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <xQueueReceive+0x1c0>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041d4:	f002 f85a 	bl	800628c <vPortExitCritical>
				return pdPASS;
 80041d8:	2301      	movs	r3, #1
 80041da:	e069      	b.n	80042b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041e2:	f002 f853 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e062      	b.n	80042b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041f0:	f107 0310 	add.w	r3, r7, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 f8b3 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041fe:	f002 f845 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004202:	f000 fe19 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004206:	f002 f811 	bl	800622c <vPortEnterCritical>
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004210:	b25b      	sxtb	r3, r3
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d103      	bne.n	8004220 <xQueueReceive+0x128>
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004226:	b25b      	sxtb	r3, r3
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d103      	bne.n	8004236 <xQueueReceive+0x13e>
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004236:	f002 f829 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800423a:	1d3a      	adds	r2, r7, #4
 800423c:	f107 0310 	add.w	r3, r7, #16
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f8a2 	bl	800538c <xTaskCheckForTimeOut>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d123      	bne.n	8004296 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800424e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004250:	f000 fae3 	bl	800481a <prvIsQueueEmpty>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d017      	beq.n	800428a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	3324      	adds	r3, #36	@ 0x24
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f000 ffc6 	bl	80051f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800426a:	f000 fa84 	bl	8004776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800426e:	f000 fdf1 	bl	8004e54 <xTaskResumeAll>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d189      	bne.n	800418c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <xQueueReceive+0x1c0>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e780      	b.n	800418c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800428a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800428c:	f000 fa73 	bl	8004776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004290:	f000 fde0 	bl	8004e54 <xTaskResumeAll>
 8004294:	e77a      	b.n	800418c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004298:	f000 fa6d 	bl	8004776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429c:	f000 fdda 	bl	8004e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042a2:	f000 faba 	bl	800481a <prvIsQueueEmpty>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f af6f 	beq.w	800418c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3730      	adds	r7, #48	@ 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	@ 0x38
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	623b      	str	r3, [r7, #32]
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	61fb      	str	r3, [r7, #28]
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004310:	f001 f98c 	bl	800562c <xTaskGetSchedulerState>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <xQueueSemaphoreTake+0x64>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <xQueueSemaphoreTake+0x68>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <xQueueSemaphoreTake+0x6a>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61bb      	str	r3, [r7, #24]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004342:	f001 ff73 	bl	800622c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d024      	beq.n	800439c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800435a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004362:	f001 fae7 	bl	8005934 <pvTaskIncrementMutexHeldCount>
 8004366:	4602      	mov	r2, r0
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	3310      	adds	r3, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f000 ff8d 	bl	8005298 <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <xQueueSemaphoreTake+0x21c>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004394:	f001 ff7a 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004398:	2301      	movs	r3, #1
 800439a:	e098      	b.n	80044ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d112      	bne.n	80043c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	617b      	str	r3, [r7, #20]
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	e7fd      	b.n	80043bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043c0:	f001 ff64 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e082      	b.n	80044ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 ffc4 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043dc:	f001 ff56 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043e0:	f000 fd2a 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043e4:	f001 ff22 	bl	800622c <vPortEnterCritical>
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d103      	bne.n	80043fe <xQueueSemaphoreTake+0x142>
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004404:	b25b      	sxtb	r3, r3
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d103      	bne.n	8004414 <xQueueSemaphoreTake+0x158>
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004414:	f001 ff3a 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004418:	463a      	mov	r2, r7
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 ffb3 	bl	800538c <xTaskCheckForTimeOut>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d132      	bne.n	8004492 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800442c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800442e:	f000 f9f4 	bl	800481a <prvIsQueueEmpty>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d026      	beq.n	8004486 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004440:	f001 fef4 	bl	800622c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f90d 	bl	8005668 <xTaskPriorityInherit>
 800444e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004450:	f001 ff1c 	bl	800628c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004456:	3324      	adds	r3, #36	@ 0x24
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fec9 	bl	80051f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004464:	f000 f987 	bl	8004776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004468:	f000 fcf4 	bl	8004e54 <xTaskResumeAll>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	f47f af67 	bne.w	8004342 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004474:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <xQueueSemaphoreTake+0x21c>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	e75d      	b.n	8004342 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004488:	f000 f975 	bl	8004776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800448c:	f000 fce2 	bl	8004e54 <xTaskResumeAll>
 8004490:	e757      	b.n	8004342 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004494:	f000 f96f 	bl	8004776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004498:	f000 fcdc 	bl	8004e54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800449c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800449e:	f000 f9bc 	bl	800481a <prvIsQueueEmpty>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f43f af4c 	beq.w	8004342 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044b0:	f001 febc 	bl	800622c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044b6:	f000 f8b7 	bl	8004628 <prvGetDisinheritPriorityAfterTimeout>
 80044ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 f9ae 	bl	8005824 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044c8:	f001 fee0 	bl	800628c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3738      	adds	r7, #56	@ 0x38
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	@ 0x38
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	623b      	str	r3, [r7, #32]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <xQueueReceiveFromISR+0x3c>
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <xQueueReceiveFromISR+0x40>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <xQueueReceiveFromISR+0x42>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	61fb      	str	r3, [r7, #28]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800453a:	f001 ff39 	bl	80063b0 <vPortValidateInterruptPriority>
	__asm volatile
 800453e:	f3ef 8211 	mrs	r2, BASEPRI
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61ba      	str	r2, [r7, #24]
 8004554:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004556:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02f      	beq.n	80045c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800456c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004574:	f000 f8d9 	bl	800472a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004580:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d112      	bne.n	80045b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	3310      	adds	r3, #16
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fe7e 	bl	8005298 <xTaskRemoveFromEventList>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e007      	b.n	80045c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	b25a      	sxtb	r2, r3
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80045c0:	2301      	movs	r3, #1
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c4:	e001      	b.n	80045ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f383 8811 	msr	BASEPRI, r3
}
 80045d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3738      	adds	r7, #56	@ 0x38
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <vQueueDelete+0x2a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60bb      	str	r3, [r7, #8]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f95c 	bl	80048c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 ffd0 	bl	80065c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e001      	b.n	800464a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800464a:	68fb      	ldr	r3, [r7, #12]
	}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d14d      	bne.n	8004718 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f85f 	bl	8005744 <xTaskPriorityDisinherit>
 8004686:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	e043      	b.n	8004718 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d119      	bne.n	80046ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6898      	ldr	r0, [r3, #8]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	461a      	mov	r2, r3
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	f005 fcf0 	bl	800a086 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	441a      	add	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d32b      	bcc.n	8004718 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	e026      	b.n	8004718 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68d8      	ldr	r0, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	461a      	mov	r2, r3
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	f005 fcd6 	bl	800a086 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	425b      	negs	r3, r3
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d207      	bcs.n	8004706 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	425b      	negs	r3, r3
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d105      	bne.n	8004718 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3b01      	subs	r3, #1
 8004716:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004720:	697b      	ldr	r3, [r7, #20]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d018      	beq.n	800476e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d303      	bcc.n	800475e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	461a      	mov	r2, r3
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f005 fc8c 	bl	800a086 <memcpy>
	}
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800477e:	f001 fd55 	bl	800622c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004788:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800478a:	e011      	b.n	80047b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3324      	adds	r3, #36	@ 0x24
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fd7d 	bl	8005298 <xTaskRemoveFromEventList>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047a4:	f000 fe56 	bl	8005454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dce9      	bgt.n	800478c <prvUnlockQueue+0x16>
 80047b8:	e000      	b.n	80047bc <prvUnlockQueue+0x46>
					break;
 80047ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	22ff      	movs	r2, #255	@ 0xff
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 fd62 	bl	800628c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047c8:	f001 fd30 	bl	800622c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047d4:	e011      	b.n	80047fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3310      	adds	r3, #16
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fd58 	bl	8005298 <xTaskRemoveFromEventList>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047ee:	f000 fe31 	bl	8005454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	dce9      	bgt.n	80047d6 <prvUnlockQueue+0x60>
 8004802:	e000      	b.n	8004806 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004804:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	22ff      	movs	r2, #255	@ 0xff
 800480a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800480e:	f001 fd3d 	bl	800628c <vPortExitCritical>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004822:	f001 fd03 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e001      	b.n	8004838 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004838:	f001 fd28 	bl	800628c <vPortExitCritical>

	return xReturn;
 800483c:	68fb      	ldr	r3, [r7, #12]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800484e:	f001 fced 	bl	800622c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	429a      	cmp	r2, r3
 800485c:	d102      	bne.n	8004864 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800485e:	2301      	movs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e001      	b.n	8004868 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004868:	f001 fd10 	bl	800628c <vPortExitCritical>

	return xReturn;
 800486c:	68fb      	ldr	r3, [r7, #12]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e014      	b.n	80048b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004888:	4a0e      	ldr	r2, [pc, #56]	@ (80048c4 <vQueueAddToRegistry+0x4c>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004894:	490b      	ldr	r1, [pc, #44]	@ (80048c4 <vQueueAddToRegistry+0x4c>)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800489e:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <vQueueAddToRegistry+0x4c>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048aa:	e006      	b.n	80048ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	d9e7      	bls.n	8004888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20001b08 	.word	0x20001b08

080048c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e016      	b.n	8004904 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80048d6:	4a10      	ldr	r2, [pc, #64]	@ (8004918 <vQueueUnregisterQueue+0x50>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d10b      	bne.n	80048fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80048e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <vQueueUnregisterQueue+0x50>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2100      	movs	r1, #0
 80048ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80048f0:	4a09      	ldr	r2, [pc, #36]	@ (8004918 <vQueueUnregisterQueue+0x50>)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4413      	add	r3, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
				break;
 80048fc:	e006      	b.n	800490c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b07      	cmp	r3, #7
 8004908:	d9e5      	bls.n	80048d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20001b08 	.word	0x20001b08

0800491c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800492c:	f001 fc7e 	bl	800622c <vPortEnterCritical>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004936:	b25b      	sxtb	r3, r3
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d103      	bne.n	8004946 <vQueueWaitForMessageRestricted+0x2a>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800494c:	b25b      	sxtb	r3, r3
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d103      	bne.n	800495c <vQueueWaitForMessageRestricted+0x40>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800495c:	f001 fc96 	bl	800628c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3324      	adds	r3, #36	@ 0x24
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fc65 	bl	8005240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff fefd 	bl	8004776 <prvUnlockQueue>
	}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08e      	sub	sp, #56	@ 0x38
 8004988:	af04      	add	r7, sp, #16
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	61fb      	str	r3, [r7, #28]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ce:	23a8      	movs	r3, #168	@ 0xa8
 80049d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80049d6:	d00b      	beq.n	80049f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	61bb      	str	r3, [r7, #24]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01e      	beq.n	8004a34 <xTaskCreateStatic+0xb0>
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f850 	bl	8004acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a2e:	f000 f8ed 	bl	8004c0c <prvAddNewTaskToReadyList>
 8004a32:	e001      	b.n	8004a38 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a38:	697b      	ldr	r3, [r7, #20]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	@ 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b08c      	sub	sp, #48	@ 0x30
 8004a46:	af04      	add	r7, sp, #16
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fcea 	bl	8006430 <pvPortMalloc>
 8004a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004a64:	20a8      	movs	r0, #168	@ 0xa8
 8004a66:	f001 fce3 	bl	8006430 <pvPortMalloc>
 8004a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a78:	e005      	b.n	8004a86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f001 fda0 	bl	80065c0 <vPortFree>
 8004a80:	e001      	b.n	8004a86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d017      	beq.n	8004abc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f80e 	bl	8004acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab0:	69f8      	ldr	r0, [r7, #28]
 8004ab2:	f000 f8ab 	bl	8004c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e002      	b.n	8004ac2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	21a5      	movs	r1, #165	@ 0xa5
 8004ae6:	f004 fff5 	bl	8009ad4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004af4:	3b01      	subs	r3, #1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	617b      	str	r3, [r7, #20]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e012      	b.n	8004b52 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	7819      	ldrb	r1, [r3, #0]
 8004b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3334      	adds	r3, #52	@ 0x34
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d9e9      	bls.n	8004b2c <prvInitialiseNewTask+0x60>
 8004b58:	e000      	b.n	8004b5c <prvInitialiseNewTask+0x90>
		{
			break;
 8004b5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	2b37      	cmp	r3, #55	@ 0x37
 8004b68:	d901      	bls.n	8004b6e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b6a:	2337      	movs	r3, #55	@ 0x37
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fe42 	bl	800380e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	3318      	adds	r3, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fe3d 	bl	800380e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	3354      	adds	r3, #84	@ 0x54
 8004bbe:	224c      	movs	r2, #76	@ 0x4c
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 ff86 	bl	8009ad4 <memset>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	4a0d      	ldr	r2, [pc, #52]	@ (8004c00 <prvInitialiseNewTask+0x134>)
 8004bcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <prvInitialiseNewTask+0x138>)
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c08 <prvInitialiseNewTask+0x13c>)
 8004bd8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	69b8      	ldr	r0, [r7, #24]
 8004be0:	f001 fa30 	bl	8006044 <pxPortInitialiseStack>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20002e18 	.word	0x20002e18
 8004c04:	20002e80 	.word	0x20002e80
 8004c08:	20002ee8 	.word	0x20002ee8

08004c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c14:	f001 fb0a 	bl	800622c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c18:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c22:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c30:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d110      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c38:	f000 fc30 	bl	800549c <prvInitialiseTaskLists>
 8004c3c:	e00d      	b.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c3e:	4b26      	ldr	r3, [pc, #152]	@ (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d802      	bhi.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c64:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <prvAddNewTaskToReadyList+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd4>)
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd8>)
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7fe fdc5 	bl	8003826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c9c:	f001 faf6 	bl	800628c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d207      	bcs.n	8004cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <prvAddNewTaskToReadyList+0xdc>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	2000201c 	.word	0x2000201c
 8004cd4:	20001b48 	.word	0x20001b48
 8004cd8:	20002028 	.word	0x20002028
 8004cdc:	20002038 	.word	0x20002038
 8004ce0:	20002024 	.word	0x20002024
 8004ce4:	20001b4c 	.word	0x20001b4c
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <vTaskDelay+0x64>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <vTaskDelay+0x32>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60bb      	str	r3, [r7, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d1e:	f000 f88b 	bl	8004e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d22:	2100      	movs	r1, #0
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fe19 	bl	800595c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d2a:	f000 f893 	bl	8004e54 <xTaskResumeAll>
 8004d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d107      	bne.n	8004d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <vTaskDelay+0x68>)
 8004d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20002044 	.word	0x20002044
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	@ 0x28
 8004d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d66:	463a      	mov	r2, r7
 8004d68:	1d39      	adds	r1, r7, #4
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fcfa 	bl	8003768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	9202      	str	r2, [sp, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	460a      	mov	r2, r1
 8004d86:	4924      	ldr	r1, [pc, #144]	@ (8004e18 <vTaskStartScheduler+0xc0>)
 8004d88:	4824      	ldr	r0, [pc, #144]	@ (8004e1c <vTaskStartScheduler+0xc4>)
 8004d8a:	f7ff fdfb 	bl	8004984 <xTaskCreateStatic>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a23      	ldr	r2, [pc, #140]	@ (8004e20 <vTaskStartScheduler+0xc8>)
 8004d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d94:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <vTaskStartScheduler+0xc8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e001      	b.n	8004da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d102      	bne.n	8004db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dac:	f000 fe2a 	bl	8005a04 <xTimerCreateTimerTask>
 8004db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d11b      	bne.n	8004df0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	613b      	str	r3, [r7, #16]
}
 8004dca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dcc:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <vTaskStartScheduler+0xcc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3354      	adds	r3, #84	@ 0x54
 8004dd2:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <vTaskStartScheduler+0xd0>)
 8004dd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <vTaskStartScheduler+0xd4>)
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dde:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <vTaskStartScheduler+0xd8>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004de4:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <vTaskStartScheduler+0xdc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dea:	f001 f9ad 	bl	8006148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dee:	e00f      	b.n	8004e10 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d10b      	bne.n	8004e10 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	60fb      	str	r3, [r7, #12]
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <vTaskStartScheduler+0xb4>
}
 8004e10:	bf00      	nop
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	0800a5d8 	.word	0x0800a5d8
 8004e1c:	0800546d 	.word	0x0800546d
 8004e20:	20002040 	.word	0x20002040
 8004e24:	20001b48 	.word	0x20001b48
 8004e28:	2000001c 	.word	0x2000001c
 8004e2c:	2000203c 	.word	0x2000203c
 8004e30:	20002028 	.word	0x20002028
 8004e34:	20002020 	.word	0x20002020

08004e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e3c:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <vTaskSuspendAll+0x18>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a03      	ldr	r2, [pc, #12]	@ (8004e50 <vTaskSuspendAll+0x18>)
 8004e44:	6013      	str	r3, [r2, #0]
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20002044 	.word	0x20002044

08004e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e62:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <xTaskResumeAll+0x118>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	603b      	str	r3, [r7, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e82:	f001 f9d3 	bl	800622c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e86:	4b39      	ldr	r3, [pc, #228]	@ (8004f6c <xTaskResumeAll+0x118>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	4a37      	ldr	r2, [pc, #220]	@ (8004f6c <xTaskResumeAll+0x118>)
 8004e8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e90:	4b36      	ldr	r3, [pc, #216]	@ (8004f6c <xTaskResumeAll+0x118>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d162      	bne.n	8004f5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e98:	4b35      	ldr	r3, [pc, #212]	@ (8004f70 <xTaskResumeAll+0x11c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05e      	beq.n	8004f5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea0:	e02f      	b.n	8004f02 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ea2:	4b34      	ldr	r3, [pc, #208]	@ (8004f74 <xTaskResumeAll+0x120>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fd14 	bl	80038dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fd0f 	bl	80038dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f78 <xTaskResumeAll+0x124>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d903      	bls.n	8004ed2 <xTaskResumeAll+0x7e>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <xTaskResumeAll+0x124>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <xTaskResumeAll+0x128>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe fc9c 	bl	8003826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <xTaskResumeAll+0x12c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004efc:	4b21      	ldr	r3, [pc, #132]	@ (8004f84 <xTaskResumeAll+0x130>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f02:	4b1c      	ldr	r3, [pc, #112]	@ (8004f74 <xTaskResumeAll+0x120>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1cb      	bne.n	8004ea2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f10:	f000 fb68 	bl	80055e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f14:	4b1c      	ldr	r3, [pc, #112]	@ (8004f88 <xTaskResumeAll+0x134>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f20:	f000 f844 	bl	8004fac <xTaskIncrementTick>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f2a:	4b16      	ldr	r3, [pc, #88]	@ (8004f84 <xTaskResumeAll+0x130>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004f3c:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <xTaskResumeAll+0x134>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <xTaskResumeAll+0x130>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <xTaskResumeAll+0x138>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f5e:	f001 f995 	bl	800628c <vPortExitCritical>

	return xAlreadyYielded;
 8004f62:	68bb      	ldr	r3, [r7, #8]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20002044 	.word	0x20002044
 8004f70:	2000201c 	.word	0x2000201c
 8004f74:	20001fdc 	.word	0x20001fdc
 8004f78:	20002024 	.word	0x20002024
 8004f7c:	20001b4c 	.word	0x20001b4c
 8004f80:	20001b48 	.word	0x20001b48
 8004f84:	20002030 	.word	0x20002030
 8004f88:	2000202c 	.word	0x2000202c
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f96:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <xTaskGetTickCount+0x18>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f9c:	687b      	ldr	r3, [r7, #4]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	20002020 	.word	0x20002020

08004fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb6:	4b52      	ldr	r3, [pc, #328]	@ (8005100 <xTaskIncrementTick+0x154>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 808f 	bne.w	80050de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fc0:	4b50      	ldr	r3, [pc, #320]	@ (8005104 <xTaskIncrementTick+0x158>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005104 <xTaskIncrementTick+0x158>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d121      	bne.n	8005018 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8005108 <xTaskIncrementTick+0x15c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	603b      	str	r3, [r7, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <xTaskIncrementTick+0x46>
 8004ff6:	4b44      	ldr	r3, [pc, #272]	@ (8005108 <xTaskIncrementTick+0x15c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	4b43      	ldr	r3, [pc, #268]	@ (800510c <xTaskIncrementTick+0x160>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a41      	ldr	r2, [pc, #260]	@ (8005108 <xTaskIncrementTick+0x15c>)
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4a41      	ldr	r2, [pc, #260]	@ (800510c <xTaskIncrementTick+0x160>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <xTaskIncrementTick+0x164>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a3f      	ldr	r2, [pc, #252]	@ (8005110 <xTaskIncrementTick+0x164>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	f000 fae6 	bl	80055e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005018:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <xTaskIncrementTick+0x168>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d34e      	bcc.n	80050c0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005022:	4b39      	ldr	r3, [pc, #228]	@ (8005108 <xTaskIncrementTick+0x15c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <xTaskIncrementTick+0x84>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <xTaskIncrementTick+0x86>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005036:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <xTaskIncrementTick+0x168>)
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	601a      	str	r2, [r3, #0]
					break;
 800503e:	e03f      	b.n	80050c0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <xTaskIncrementTick+0x15c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d203      	bcs.n	8005060 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005058:	4a2e      	ldr	r2, [pc, #184]	@ (8005114 <xTaskIncrementTick+0x168>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6013      	str	r3, [r2, #0]
						break;
 800505e:	e02f      	b.n	80050c0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fc39 	bl	80038dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3318      	adds	r3, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fc30 	bl	80038dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <xTaskIncrementTick+0x16c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d903      	bls.n	8005090 <xTaskIncrementTick+0xe4>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <xTaskIncrementTick+0x16c>)
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4a1f      	ldr	r2, [pc, #124]	@ (800511c <xTaskIncrementTick+0x170>)
 800509e:	441a      	add	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fe fbbd 	bl	8003826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <xTaskIncrementTick+0x174>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3b3      	bcc.n	8005022 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050be:	e7b0      	b.n	8005022 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050c0:	4b17      	ldr	r3, [pc, #92]	@ (8005120 <xTaskIncrementTick+0x174>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c6:	4915      	ldr	r1, [pc, #84]	@ (800511c <xTaskIncrementTick+0x170>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d907      	bls.n	80050e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e004      	b.n	80050e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <xTaskIncrementTick+0x178>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <xTaskIncrementTick+0x178>)
 80050e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <xTaskIncrementTick+0x17c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20002044 	.word	0x20002044
 8005104:	20002020 	.word	0x20002020
 8005108:	20001fd4 	.word	0x20001fd4
 800510c:	20001fd8 	.word	0x20001fd8
 8005110:	20002034 	.word	0x20002034
 8005114:	2000203c 	.word	0x2000203c
 8005118:	20002024 	.word	0x20002024
 800511c:	20001b4c 	.word	0x20001b4c
 8005120:	20001b48 	.word	0x20001b48
 8005124:	2000202c 	.word	0x2000202c
 8005128:	20002030 	.word	0x20002030

0800512c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005132:	4b2a      	ldr	r3, [pc, #168]	@ (80051dc <vTaskSwitchContext+0xb0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800513a:	4b29      	ldr	r3, [pc, #164]	@ (80051e0 <vTaskSwitchContext+0xb4>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005140:	e047      	b.n	80051d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005142:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <vTaskSwitchContext+0xb4>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005148:	4b26      	ldr	r3, [pc, #152]	@ (80051e4 <vTaskSwitchContext+0xb8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e011      	b.n	8005174 <vTaskSwitchContext+0x48>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <vTaskSwitchContext+0x42>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	607b      	str	r3, [r7, #4]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <vTaskSwitchContext+0x3e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3b01      	subs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	491c      	ldr	r1, [pc, #112]	@ (80051e8 <vTaskSwitchContext+0xbc>)
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0e3      	beq.n	8005150 <vTaskSwitchContext+0x24>
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <vTaskSwitchContext+0xbc>)
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3308      	adds	r3, #8
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d104      	bne.n	80051b8 <vTaskSwitchContext+0x8c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4a0b      	ldr	r2, [pc, #44]	@ (80051ec <vTaskSwitchContext+0xc0>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4a08      	ldr	r2, [pc, #32]	@ (80051e4 <vTaskSwitchContext+0xb8>)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051c8:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <vTaskSwitchContext+0xc0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3354      	adds	r3, #84	@ 0x54
 80051ce:	4a08      	ldr	r2, [pc, #32]	@ (80051f0 <vTaskSwitchContext+0xc4>)
 80051d0:	6013      	str	r3, [r2, #0]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	20002044 	.word	0x20002044
 80051e0:	20002030 	.word	0x20002030
 80051e4:	20002024 	.word	0x20002024
 80051e8:	20001b4c 	.word	0x20001b4c
 80051ec:	20001b48 	.word	0x20001b48
 80051f0:	2000001c 	.word	0x2000001c

080051f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vTaskPlaceOnEventList+0x48>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3318      	adds	r3, #24
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fe fb21 	bl	800386c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800522a:	2101      	movs	r1, #1
 800522c:	6838      	ldr	r0, [r7, #0]
 800522e:	f000 fb95 	bl	800595c <prvAddCurrentTaskToDelayedList>
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20001b48 	.word	0x20001b48

08005240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	617b      	str	r3, [r7, #20]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800526a:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <vTaskPlaceOnEventListRestricted+0x54>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3318      	adds	r3, #24
 8005270:	4619      	mov	r1, r3
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fe fad7 	bl	8003826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f000 fb68 	bl	800595c <prvAddCurrentTaskToDelayedList>
	}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20001b48 	.word	0x20001b48

08005298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3318      	adds	r3, #24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fb06 	bl	80038dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <xTaskRemoveFromEventList+0xb0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11d      	bne.n	8005314 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3304      	adds	r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fafd 	bl	80038dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <xTaskRemoveFromEventList+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d903      	bls.n	80052f6 <xTaskRemoveFromEventList+0x5e>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a16      	ldr	r2, [pc, #88]	@ (800534c <xTaskRemoveFromEventList+0xb4>)
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a13      	ldr	r2, [pc, #76]	@ (8005350 <xTaskRemoveFromEventList+0xb8>)
 8005304:	441a      	add	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe fa8a 	bl	8003826 <vListInsertEnd>
 8005312:	e005      	b.n	8005320 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	3318      	adds	r3, #24
 8005318:	4619      	mov	r1, r3
 800531a:	480e      	ldr	r0, [pc, #56]	@ (8005354 <xTaskRemoveFromEventList+0xbc>)
 800531c:	f7fe fa83 	bl	8003826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <xTaskRemoveFromEventList+0xc0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	429a      	cmp	r2, r3
 800532c:	d905      	bls.n	800533a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <xTaskRemoveFromEventList+0xc4>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e001      	b.n	800533e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800533e:	697b      	ldr	r3, [r7, #20]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20002044 	.word	0x20002044
 800534c:	20002024 	.word	0x20002024
 8005350:	20001b4c 	.word	0x20001b4c
 8005354:	20001fdc 	.word	0x20001fdc
 8005358:	20001b48 	.word	0x20001b48
 800535c:	20002030 	.word	0x20002030

08005360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <vTaskInternalSetTimeOutState+0x24>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <vTaskInternalSetTimeOutState+0x28>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20002034 	.word	0x20002034
 8005388:	20002020 	.word	0x20002020

0800538c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	613b      	str	r3, [r7, #16]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	e7fd      	b.n	80053ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053d2:	f000 ff2b 	bl	800622c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053d6:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <xTaskCheckForTimeOut+0xc0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d102      	bne.n	80053f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e023      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <xTaskCheckForTimeOut+0xc4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d007      	beq.n	8005412 <xTaskCheckForTimeOut+0x86>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e015      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	429a      	cmp	r2, r3
 800541a:	d20b      	bcs.n	8005434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff99 	bl	8005360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e004      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800543e:	f000 ff25 	bl	800628c <vPortExitCritical>

	return xReturn;
 8005442:	69fb      	ldr	r3, [r7, #28]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20002020 	.word	0x20002020
 8005450:	20002034 	.word	0x20002034

08005454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <vTaskMissedYield+0x14>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20002030 	.word	0x20002030

0800546c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005474:	f000 f852 	bl	800551c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <prvIdleTask+0x28>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d9f9      	bls.n	8005474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005480:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <prvIdleTask+0x2c>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005490:	e7f0      	b.n	8005474 <prvIdleTask+0x8>
 8005492:	bf00      	nop
 8005494:	20001b4c 	.word	0x20001b4c
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e00c      	b.n	80054c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <prvInitialiseTaskLists+0x60>)
 80054b4:	4413      	add	r3, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe f98a 	bl	80037d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3301      	adds	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b37      	cmp	r3, #55	@ 0x37
 80054c6:	d9ef      	bls.n	80054a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054c8:	480d      	ldr	r0, [pc, #52]	@ (8005500 <prvInitialiseTaskLists+0x64>)
 80054ca:	f7fe f981 	bl	80037d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ce:	480d      	ldr	r0, [pc, #52]	@ (8005504 <prvInitialiseTaskLists+0x68>)
 80054d0:	f7fe f97e 	bl	80037d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054d4:	480c      	ldr	r0, [pc, #48]	@ (8005508 <prvInitialiseTaskLists+0x6c>)
 80054d6:	f7fe f97b 	bl	80037d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054da:	480c      	ldr	r0, [pc, #48]	@ (800550c <prvInitialiseTaskLists+0x70>)
 80054dc:	f7fe f978 	bl	80037d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054e0:	480b      	ldr	r0, [pc, #44]	@ (8005510 <prvInitialiseTaskLists+0x74>)
 80054e2:	f7fe f975 	bl	80037d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <prvInitialiseTaskLists+0x78>)
 80054e8:	4a05      	ldr	r2, [pc, #20]	@ (8005500 <prvInitialiseTaskLists+0x64>)
 80054ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <prvInitialiseTaskLists+0x7c>)
 80054ee:	4a05      	ldr	r2, [pc, #20]	@ (8005504 <prvInitialiseTaskLists+0x68>)
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20001b4c 	.word	0x20001b4c
 8005500:	20001fac 	.word	0x20001fac
 8005504:	20001fc0 	.word	0x20001fc0
 8005508:	20001fdc 	.word	0x20001fdc
 800550c:	20001ff0 	.word	0x20001ff0
 8005510:	20002008 	.word	0x20002008
 8005514:	20001fd4 	.word	0x20001fd4
 8005518:	20001fd8 	.word	0x20001fd8

0800551c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005522:	e019      	b.n	8005558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005524:	f000 fe82 	bl	800622c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005528:	4b10      	ldr	r3, [pc, #64]	@ (800556c <prvCheckTasksWaitingTermination+0x50>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe f9d1 	bl	80038dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <prvCheckTasksWaitingTermination+0x54>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a0b      	ldr	r2, [pc, #44]	@ (8005570 <prvCheckTasksWaitingTermination+0x54>)
 8005542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3b01      	subs	r3, #1
 800554a:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800554c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800554e:	f000 fe9d 	bl	800628c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f810 	bl	8005578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005558:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e1      	bne.n	8005524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20001ff0 	.word	0x20001ff0
 8005570:	2000201c 	.word	0x2000201c
 8005574:	20002004 	.word	0x20002004

08005578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3354      	adds	r3, #84	@ 0x54
 8005584:	4618      	mov	r0, r3
 8005586:	f004 fcaf 	bl	8009ee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f811 	bl	80065c0 <vPortFree>
				vPortFree( pxTCB );
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f80e 	bl	80065c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055a4:	e019      	b.n	80055da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d103      	bne.n	80055b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 f805 	bl	80065c0 <vPortFree>
	}
 80055b6:	e010      	b.n	80055da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d00b      	beq.n	80055da <prvDeleteTCB+0x62>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <prvDeleteTCB+0x5e>
	}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <prvResetNextTaskUnblockTime+0x40>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <prvResetNextTaskUnblockTime+0x14>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <prvResetNextTaskUnblockTime+0x16>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <prvResetNextTaskUnblockTime+0x44>)
 8005600:	f04f 32ff 	mov.w	r2, #4294967295
 8005604:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005606:	e008      	b.n	800561a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005608:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <prvResetNextTaskUnblockTime+0x40>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <prvResetNextTaskUnblockTime+0x44>)
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	20001fd4 	.word	0x20001fd4
 8005628:	2000203c 	.word	0x2000203c

0800562c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005632:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <xTaskGetSchedulerState+0x34>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800563a:	2301      	movs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	e008      	b.n	8005652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005640:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <xTaskGetSchedulerState+0x38>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005648:	2302      	movs	r3, #2
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e001      	b.n	8005652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005652:	687b      	ldr	r3, [r7, #4]
	}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20002028 	.word	0x20002028
 8005664:	20002044 	.word	0x20002044

08005668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d056      	beq.n	800572c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005682:	4b2d      	ldr	r3, [pc, #180]	@ (8005738 <xTaskPriorityInherit+0xd0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d246      	bcs.n	800571a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db06      	blt.n	80056a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	4b28      	ldr	r3, [pc, #160]	@ (8005738 <xTaskPriorityInherit+0xd0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a22      	ldr	r2, [pc, #136]	@ (800573c <xTaskPriorityInherit+0xd4>)
 80056b4:	4413      	add	r3, r2
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d101      	bne.n	80056be <xTaskPriorityInherit+0x56>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <xTaskPriorityInherit+0x58>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d022      	beq.n	800570a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe f907 	bl	80038dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005738 <xTaskPriorityInherit+0xd0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056dc:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <xTaskPriorityInherit+0xd8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d903      	bls.n	80056ec <xTaskPriorityInherit+0x84>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	4a15      	ldr	r2, [pc, #84]	@ (8005740 <xTaskPriorityInherit+0xd8>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4a10      	ldr	r2, [pc, #64]	@ (800573c <xTaskPriorityInherit+0xd4>)
 80056fa:	441a      	add	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fe f88f 	bl	8003826 <vListInsertEnd>
 8005708:	e004      	b.n	8005714 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800570a:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <xTaskPriorityInherit+0xd0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e008      	b.n	800572c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <xTaskPriorityInherit+0xd0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d201      	bcs.n	800572c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800572c:	68fb      	ldr	r3, [r7, #12]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20001b48 	.word	0x20001b48
 800573c:	20001b4c 	.word	0x20001b4c
 8005740:	20002024 	.word	0x20002024

08005744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d058      	beq.n	800580c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800575a:	4b2f      	ldr	r3, [pc, #188]	@ (8005818 <xTaskPriorityDisinherit+0xd4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d00b      	beq.n	800577c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60fb      	str	r3, [r7, #12]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60bb      	str	r3, [r7, #8]
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d02c      	beq.n	800580c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d128      	bne.n	800580c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe f88c 	bl	80038dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057dc:	4b0f      	ldr	r3, [pc, #60]	@ (800581c <xTaskPriorityDisinherit+0xd8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d903      	bls.n	80057ec <xTaskPriorityDisinherit+0xa8>
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	4a0c      	ldr	r2, [pc, #48]	@ (800581c <xTaskPriorityDisinherit+0xd8>)
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <xTaskPriorityDisinherit+0xdc>)
 80057fa:	441a      	add	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7fe f80f 	bl	8003826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800580c:	697b      	ldr	r3, [r7, #20]
	}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20001b48 	.word	0x20001b48
 800581c:	20002024 	.word	0x20002024
 8005820:	20001b4c 	.word	0x20001b4c

08005824 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005832:	2301      	movs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d071      	beq.n	8005920 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d902      	bls.n	800586c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e002      	b.n	8005872 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005870:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	429a      	cmp	r2, r3
 800587a:	d051      	beq.n	8005920 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d14c      	bne.n	8005920 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005886:	4b28      	ldr	r3, [pc, #160]	@ (8005928 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	429a      	cmp	r2, r3
 800588e:	d10b      	bne.n	80058a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60bb      	str	r3, [r7, #8]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db04      	blt.n	80058c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6959      	ldr	r1, [r3, #20]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a15      	ldr	r2, [pc, #84]	@ (800592c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80058d6:	4413      	add	r3, r2
 80058d8:	4299      	cmp	r1, r3
 80058da:	d101      	bne.n	80058e0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01c      	beq.n	8005920 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fff6 	bl	80038dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d903      	bls.n	8005904 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4a0b      	ldr	r2, [pc, #44]	@ (8005930 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4a06      	ldr	r2, [pc, #24]	@ (800592c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005912:	441a      	add	r2, r3
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f7fd ff83 	bl	8003826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005920:	bf00      	nop
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20001b48 	.word	0x20001b48
 800592c:	20001b4c 	.word	0x20001b4c
 8005930:	20002024 	.word	0x20002024

08005934 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005938:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <pvTaskIncrementMutexHeldCount+0x24>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <pvTaskIncrementMutexHeldCount+0x24>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005946:	3201      	adds	r2, #1
 8005948:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800594a:	4b03      	ldr	r3, [pc, #12]	@ (8005958 <pvTaskIncrementMutexHeldCount+0x24>)
 800594c:	681b      	ldr	r3, [r3, #0]
	}
 800594e:	4618      	mov	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20001b48 	.word	0x20001b48

0800595c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005966:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596c:	4b20      	ldr	r3, [pc, #128]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd ffb2 	bl	80038dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d10a      	bne.n	8005996 <prvAddCurrentTaskToDelayedList+0x3a>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005986:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4819      	ldr	r0, [pc, #100]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005990:	f7fd ff49 	bl	8003826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005994:	e026      	b.n	80059e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d209      	bcs.n	80059c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ae:	4b12      	ldr	r3, [pc, #72]	@ (80059f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b0f      	ldr	r3, [pc, #60]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fd ff56 	bl	800386c <vListInsert>
}
 80059c0:	e010      	b.n	80059e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c2:	4b0e      	ldr	r3, [pc, #56]	@ (80059fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b0a      	ldr	r3, [pc, #40]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f7fd ff4c 	bl	800386c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d202      	bcs.n	80059e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059de:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20002020 	.word	0x20002020
 80059f0:	20001b48 	.word	0x20001b48
 80059f4:	20002008 	.word	0x20002008
 80059f8:	20001fd8 	.word	0x20001fd8
 80059fc:	20001fd4 	.word	0x20001fd4
 8005a00:	2000203c 	.word	0x2000203c

08005a04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	@ 0x28
 8005a08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a0e:	f000 fad9 	bl	8005fc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a12:	4b1d      	ldr	r3, [pc, #116]	@ (8005a88 <xTimerCreateTimerTask+0x84>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d021      	beq.n	8005a5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a22:	1d3a      	adds	r2, r7, #4
 8005a24:	f107 0108 	add.w	r1, r7, #8
 8005a28:	f107 030c 	add.w	r3, r7, #12
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd feb5 	bl	800379c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	9202      	str	r2, [sp, #8]
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2300      	movs	r3, #0
 8005a42:	460a      	mov	r2, r1
 8005a44:	4911      	ldr	r1, [pc, #68]	@ (8005a8c <xTimerCreateTimerTask+0x88>)
 8005a46:	4812      	ldr	r0, [pc, #72]	@ (8005a90 <xTimerCreateTimerTask+0x8c>)
 8005a48:	f7fe ff9c 	bl	8004984 <xTaskCreateStatic>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4a11      	ldr	r2, [pc, #68]	@ (8005a94 <xTimerCreateTimerTask+0x90>)
 8005a50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a52:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <xTimerCreateTimerTask+0x90>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	613b      	str	r3, [r7, #16]
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a7c:	697b      	ldr	r3, [r7, #20]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20002078 	.word	0x20002078
 8005a8c:	0800a5e0 	.word	0x0800a5e0
 8005a90:	08005bb9 	.word	0x08005bb9
 8005a94:	2000207c 	.word	0x2000207c

08005a98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	623b      	str	r3, [r7, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ac8:	4b19      	ldr	r3, [pc, #100]	@ (8005b30 <xTimerGenericCommand+0x98>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02a      	beq.n	8005b26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	dc18      	bgt.n	8005b14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ae2:	f7ff fda3 	bl	800562c <xTaskGetSchedulerState>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d109      	bne.n	8005b00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005aec:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <xTimerGenericCommand+0x98>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	f107 0110 	add.w	r1, r7, #16
 8005af4:	2300      	movs	r3, #0
 8005af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af8:	f7fe f8d0 	bl	8003c9c <xQueueGenericSend>
 8005afc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005afe:	e012      	b.n	8005b26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b00:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <xTimerGenericCommand+0x98>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	f107 0110 	add.w	r1, r7, #16
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f7fe f8c6 	bl	8003c9c <xQueueGenericSend>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b12:	e008      	b.n	8005b26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b14:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <xTimerGenericCommand+0x98>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	f107 0110 	add.w	r1, r7, #16
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	f7fe f9be 	bl	8003ea0 <xQueueGenericSendFromISR>
 8005b24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3728      	adds	r7, #40	@ 0x28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20002078 	.word	0x20002078

08005b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <prvProcessExpiredTimer+0x80>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd fec5 	bl	80038dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d123      	bne.n	8005ba2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	18d1      	adds	r1, r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	6978      	ldr	r0, [r7, #20]
 8005b68:	f000 f8cc 	bl	8005d04 <prvInsertTimerInActiveList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	f7ff ff8b 	bl	8005a98 <xTimerGenericCommand>
 8005b82:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	4798      	blx	r3
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20002070 	.word	0x20002070

08005bb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f859 	bl	8005c7c <prvGetNextExpireTime>
 8005bca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f805 	bl	8005be0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bd6:	f000 f8d7 	bl	8005d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bda:	bf00      	nop
 8005bdc:	e7f0      	b.n	8005bc0 <prvTimerTask+0x8>
	...

08005be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bea:	f7ff f925 	bl	8004e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f866 	bl	8005cc4 <prvSampleTimeNow>
 8005bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d130      	bne.n	8005c62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <prvProcessTimerOrBlockTask+0x3c>
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d806      	bhi.n	8005c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c0e:	f7ff f921 	bl	8004e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c12:	68f9      	ldr	r1, [r7, #12]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff8d 	bl	8005b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c1a:	e024      	b.n	8005c66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c22:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <prvProcessTimerOrBlockTask+0x90>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c34:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <prvProcessTimerOrBlockTask+0x94>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7fe fe6b 	bl	800491c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c46:	f7ff f905 	bl	8004e54 <xTaskResumeAll>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <prvProcessTimerOrBlockTask+0x98>)
 8005c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
}
 8005c60:	e001      	b.n	8005c66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c62:	f7ff f8f7 	bl	8004e54 <xTaskResumeAll>
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20002074 	.word	0x20002074
 8005c74:	20002078 	.word	0x20002078
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c84:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc0 <prvGetNextExpireTime+0x44>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ca2:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <prvGetNextExpireTime+0x44>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e001      	b.n	8005cb2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20002070 	.word	0x20002070

08005cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ccc:	f7ff f960 	bl	8004f90 <xTaskGetTickCount>
 8005cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <prvSampleTimeNow+0x3c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d205      	bcs.n	8005ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cdc:	f000 f910 	bl	8005f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cee:	4a04      	ldr	r2, [pc, #16]	@ (8005d00 <prvSampleTimeNow+0x3c>)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20002080 	.word	0x20002080

08005d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d812      	bhi.n	8005d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e01b      	b.n	8005d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <prvInsertTimerInActiveList+0x7c>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7fd fd8f 	bl	800386c <vListInsert>
 8005d4e:	e012      	b.n	8005d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d206      	bcs.n	8005d66 <prvInsertTimerInActiveList+0x62>
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e007      	b.n	8005d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d66:	4b07      	ldr	r3, [pc, #28]	@ (8005d84 <prvInsertTimerInActiveList+0x80>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f7fd fd7b 	bl	800386c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d76:	697b      	ldr	r3, [r7, #20]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20002074 	.word	0x20002074
 8005d84:	20002070 	.word	0x20002070

08005d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	@ 0x38
 8005d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d8e:	e0a5      	b.n	8005edc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da19      	bge.n	8005dca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	3304      	adds	r3, #4
 8005d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	61fb      	str	r3, [r7, #28]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc0:	6850      	ldr	r0, [r2, #4]
 8005dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc4:	6892      	ldr	r2, [r2, #8]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f2c0 8085 	blt.w	8005edc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fd fd7a 	bl	80038dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005de8:	463b      	mov	r3, r7
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff ff6a 	bl	8005cc4 <prvSampleTimeNow>
 8005df0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b09      	cmp	r3, #9
 8005df6:	d86c      	bhi.n	8005ed2 <prvProcessReceivedCommands+0x14a>
 8005df8:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <prvProcessReceivedCommands+0x78>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e29 	.word	0x08005e29
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005ed3 	.word	0x08005ed3
 8005e10:	08005e87 	.word	0x08005e87
 8005e14:	08005ec1 	.word	0x08005ec1
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e29 	.word	0x08005e29
 8005e20:	08005ed3 	.word	0x08005ed3
 8005e24:	08005e87 	.word	0x08005e87
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	18d1      	adds	r1, r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e36:	f7ff ff65 	bl	8005d04 <prvInsertTimerInActiveList>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d04a      	beq.n	8005ed6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d142      	bne.n	8005ed6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	441a      	add	r2, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2100      	movs	r1, #0
 8005e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e62:	f7ff fe19 	bl	8005a98 <xTimerGenericCommand>
 8005e66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d133      	bne.n	8005ed6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	61bb      	str	r3, [r7, #24]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	617b      	str	r3, [r7, #20]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	18d1      	adds	r1, r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eba:	f7ff ff23 	bl	8005d04 <prvInsertTimerInActiveList>
					break;
 8005ebe:	e00d      	b.n	8005edc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ecc:	f000 fb78 	bl	80065c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ed0:	e003      	b.n	8005eda <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005ed2:	bf00      	nop
 8005ed4:	e002      	b.n	8005edc <prvProcessReceivedCommands+0x154>
					break;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <prvProcessReceivedCommands+0x154>
					break;
 8005eda:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <prvProcessReceivedCommands+0x174>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	1d39      	adds	r1, r7, #4
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f907 	bl	80040f8 <xQueueReceive>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af4f 	bne.w	8005d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3730      	adds	r7, #48	@ 0x30
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20002078 	.word	0x20002078

08005f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f06:	e046      	b.n	8005f96 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f08:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f12:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd fcdb 	bl	80038dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d12f      	bne.n	8005f96 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d90e      	bls.n	8005f66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f54:	4b19      	ldr	r3, [pc, #100]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fd fc84 	bl	800386c <vListInsert>
 8005f64:	e017      	b.n	8005f96 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fd91 	bl	8005a98 <xTimerGenericCommand>
 8005f76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <prvSwitchTimerLists+0x96>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	603b      	str	r3, [r7, #0]
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1b3      	bne.n	8005f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <prvSwitchTimerLists+0xc0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a04      	ldr	r2, [pc, #16]	@ (8005fbc <prvSwitchTimerLists+0xbc>)
 8005fac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fae:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <prvSwitchTimerLists+0xc0>)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20002070 	.word	0x20002070
 8005fc0:	20002074 	.word	0x20002074

08005fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fca:	f000 f92f 	bl	800622c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <prvCheckForValidListAndQueue+0x60>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d120      	bne.n	8006018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fd6:	4814      	ldr	r0, [pc, #80]	@ (8006028 <prvCheckForValidListAndQueue+0x64>)
 8005fd8:	f7fd fbfa 	bl	80037d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fdc:	4813      	ldr	r0, [pc, #76]	@ (800602c <prvCheckForValidListAndQueue+0x68>)
 8005fde:	f7fd fbf7 	bl	80037d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fe2:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <prvCheckForValidListAndQueue+0x6c>)
 8005fe4:	4a10      	ldr	r2, [pc, #64]	@ (8006028 <prvCheckForValidListAndQueue+0x64>)
 8005fe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fe8:	4b12      	ldr	r3, [pc, #72]	@ (8006034 <prvCheckForValidListAndQueue+0x70>)
 8005fea:	4a10      	ldr	r2, [pc, #64]	@ (800602c <prvCheckForValidListAndQueue+0x68>)
 8005fec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <prvCheckForValidListAndQueue+0x74>)
 8005ff4:	4a11      	ldr	r2, [pc, #68]	@ (800603c <prvCheckForValidListAndQueue+0x78>)
 8005ff6:	2110      	movs	r1, #16
 8005ff8:	200a      	movs	r0, #10
 8005ffa:	f7fd fd03 	bl	8003a04 <xQueueGenericCreateStatic>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4a08      	ldr	r2, [pc, #32]	@ (8006024 <prvCheckForValidListAndQueue+0x60>)
 8006002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006004:	4b07      	ldr	r3, [pc, #28]	@ (8006024 <prvCheckForValidListAndQueue+0x60>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <prvCheckForValidListAndQueue+0x60>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	490b      	ldr	r1, [pc, #44]	@ (8006040 <prvCheckForValidListAndQueue+0x7c>)
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fc30 	bl	8004878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006018:	f000 f938 	bl	800628c <vPortExitCritical>
}
 800601c:	bf00      	nop
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20002078 	.word	0x20002078
 8006028:	20002048 	.word	0x20002048
 800602c:	2000205c 	.word	0x2000205c
 8006030:	20002070 	.word	0x20002070
 8006034:	20002074 	.word	0x20002074
 8006038:	20002124 	.word	0x20002124
 800603c:	20002084 	.word	0x20002084
 8006040:	0800a5e8 	.word	0x0800a5e8

08006044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3b04      	subs	r3, #4
 8006054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800605c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b04      	subs	r3, #4
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f023 0201 	bic.w	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3b04      	subs	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006074:	4a08      	ldr	r2, [pc, #32]	@ (8006098 <pxPortInitialiseStack+0x54>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b14      	subs	r3, #20
 800607e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b20      	subs	r3, #32
 800608a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	0800609d 	.word	0x0800609d

0800609c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060a6:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <prvTaskExitError+0x54>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d00b      	beq.n	80060c8 <prvTaskExitError+0x2c>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <prvTaskExitError+0x28>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60bb      	str	r3, [r7, #8]
}
 80060da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060dc:	bf00      	nop
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0fc      	beq.n	80060de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	2000000c 	.word	0x2000000c
	...

08006100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006100:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <pxCurrentTCBConst2>)
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800610a:	f380 8809 	msr	PSP, r0
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8811 	msr	BASEPRI, r0
 800611a:	f04e 0e0d 	orr.w	lr, lr, #13
 800611e:	4770      	bx	lr

08006120 <pxCurrentTCBConst2>:
 8006120:	20001b48 	.word	0x20001b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006128:	4806      	ldr	r0, [pc, #24]	@ (8006144 <prvPortStartFirstTask+0x1c>)
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f380 8808 	msr	MSP, r0
 8006132:	b662      	cpsie	i
 8006134:	b661      	cpsie	f
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	df00      	svc	0
 8006140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006142:	bf00      	nop
 8006144:	e000ed08 	.word	0xe000ed08

08006148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800614e:	4b32      	ldr	r3, [pc, #200]	@ (8006218 <xPortStartScheduler+0xd0>)
 8006150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	@ 0xff
 800615e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b2a      	ldr	r3, [pc, #168]	@ (800621c <xPortStartScheduler+0xd4>)
 8006174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006176:	4b2a      	ldr	r3, [pc, #168]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006178:	2207      	movs	r2, #7
 800617a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617c:	e009      	b.n	8006192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800617e:	4b28      	ldr	r3, [pc, #160]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <xPortStartScheduler+0xd8>)
 8006186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b80      	cmp	r3, #128	@ 0x80
 800619c:	d0ef      	beq.n	800617e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800619e:	4b20      	ldr	r3, [pc, #128]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1c3 0307 	rsb	r3, r3, #7
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00b      	beq.n	80061c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	e7fd      	b.n	80061be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061c2:	4b17      	ldr	r3, [pc, #92]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061cc:	4b14      	ldr	r3, [pc, #80]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061d4:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <xPortStartScheduler+0xd8>)
 80061d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061e0:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <xPortStartScheduler+0xdc>)
 80061f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061f8:	f000 f8b8 	bl	800636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <xPortStartScheduler+0xe0>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006202:	f7ff ff91 	bl	8006128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006206:	f7fe ff91 	bl	800512c <vTaskSwitchContext>
	prvTaskExitError();
 800620a:	f7ff ff47 	bl	800609c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000e400 	.word	0xe000e400
 800621c:	20002174 	.word	0x20002174
 8006220:	20002178 	.word	0x20002178
 8006224:	e000ed20 	.word	0xe000ed20
 8006228:	2000000c 	.word	0x2000000c

0800622c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <vPortEnterCritical+0x58>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <vPortEnterCritical+0x58>)
 800624e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006250:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <vPortEnterCritical+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d110      	bne.n	800627a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006258:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <vPortEnterCritical+0x5c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <vPortEnterCritical+0x4e>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	603b      	str	r3, [r7, #0]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <vPortEnterCritical+0x4a>
	}
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <vPortExitCritical+0x26>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	607b      	str	r3, [r7, #4]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <vPortExitCritical+0x50>)
 80062ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <vPortExitCritical+0x44>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062f0:	6010      	str	r0, [r2, #0]
 80062f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062fa:	f380 8811 	msr	BASEPRI, r0
 80062fe:	f7fe ff15 	bl	800512c <vTaskSwitchContext>
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006316:	f380 8809 	msr	PSP, r0
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	4770      	bx	lr

08006320 <pxCurrentTCBConst>:
 8006320:	20001b48 	.word	0x20001b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006342:	f7fe fe33 	bl	8004fac <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <SysTick_Handler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006370:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <vPortSetupTimerInterrupt+0x30>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006376:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <vPortSetupTimerInterrupt+0x38>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a09      	ldr	r2, [pc, #36]	@ (80063a8 <vPortSetupTimerInterrupt+0x3c>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <vPortSetupTimerInterrupt+0x40>)
 800638a:	3b01      	subs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638e:	4b03      	ldr	r3, [pc, #12]	@ (800639c <vPortSetupTimerInterrupt+0x30>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	e000e010 	.word	0xe000e010
 80063a0:	e000e018 	.word	0xe000e018
 80063a4:	20000000 	.word	0x20000000
 80063a8:	10624dd3 	.word	0x10624dd3
 80063ac:	e000e014 	.word	0xe000e014

080063b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063b6:	f3ef 8305 	mrs	r3, IPSR
 80063ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b0f      	cmp	r3, #15
 80063c0:	d915      	bls.n	80063ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063c2:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <vPortValidateInterruptPriority+0x70>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063cc:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <vPortValidateInterruptPriority+0x74>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	7afa      	ldrb	r2, [r7, #11]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d20b      	bcs.n	80063ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	607b      	str	r3, [r7, #4]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <vPortValidateInterruptPriority+0x78>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <vPortValidateInterruptPriority+0x7c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90b      	bls.n	8006416 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	603b      	str	r3, [r7, #0]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <vPortValidateInterruptPriority+0x62>
	}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr
 8006420:	e000e3f0 	.word	0xe000e3f0
 8006424:	20002174 	.word	0x20002174
 8006428:	e000ed0c 	.word	0xe000ed0c
 800642c:	20002178 	.word	0x20002178

08006430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800643c:	f7fe fcfc 	bl	8004e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006440:	4b5a      	ldr	r3, [pc, #360]	@ (80065ac <pvPortMalloc+0x17c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006448:	f000 f916 	bl	8006678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800644c:	4b58      	ldr	r3, [pc, #352]	@ (80065b0 <pvPortMalloc+0x180>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8090 	bne.w	800657a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006460:	2208      	movs	r2, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f023 0307 	bic.w	r3, r3, #7
 8006478:	3308      	adds	r3, #8
 800647a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <pvPortMalloc+0x6e>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d06a      	beq.n	800657a <pvPortMalloc+0x14a>
 80064a4:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <pvPortMalloc+0x184>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d865      	bhi.n	800657a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ae:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <pvPortMalloc+0x188>)
 80064b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b2:	4b41      	ldr	r3, [pc, #260]	@ (80065b8 <pvPortMalloc+0x188>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b8:	e004      	b.n	80064c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <pvPortMalloc+0xa6>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f1      	bne.n	80064ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064d6:	4b35      	ldr	r3, [pc, #212]	@ (80065ac <pvPortMalloc+0x17c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064dc:	429a      	cmp	r2, r3
 80064de:	d04c      	beq.n	800657a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	4413      	add	r3, r2
 80064e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	2308      	movs	r3, #8
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	429a      	cmp	r2, r3
 8006500:	d920      	bls.n	8006544 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <pvPortMalloc+0xfc>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	613b      	str	r3, [r7, #16]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	f000 f8fc 	bl	800673c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006544:	4b1b      	ldr	r3, [pc, #108]	@ (80065b4 <pvPortMalloc+0x184>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	4a19      	ldr	r2, [pc, #100]	@ (80065b4 <pvPortMalloc+0x184>)
 8006550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006552:	4b18      	ldr	r3, [pc, #96]	@ (80065b4 <pvPortMalloc+0x184>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b19      	ldr	r3, [pc, #100]	@ (80065bc <pvPortMalloc+0x18c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d203      	bcs.n	8006566 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800655e:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <pvPortMalloc+0x184>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <pvPortMalloc+0x18c>)
 8006564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <pvPortMalloc+0x180>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	431a      	orrs	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800657a:	f7fe fc6b 	bl	8004e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <pvPortMalloc+0x170>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	60fb      	str	r3, [r7, #12]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <pvPortMalloc+0x16c>
	return pvReturn;
 80065a0:	69fb      	ldr	r3, [r7, #28]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3728      	adds	r7, #40	@ 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20002d84 	.word	0x20002d84
 80065b0:	20002d90 	.word	0x20002d90
 80065b4:	20002d88 	.word	0x20002d88
 80065b8:	20002d7c 	.word	0x20002d7c
 80065bc:	20002d8c 	.word	0x20002d8c

080065c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04a      	beq.n	8006668 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065d2:	2308      	movs	r3, #8
 80065d4:	425b      	negs	r3, r3
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	4b22      	ldr	r3, [pc, #136]	@ (8006670 <vPortFree+0xb0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <vPortFree+0x46>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <vPortFree+0x66>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <vPortFree+0xb0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <vPortFree+0xb0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800664c:	f7fe fbf4 	bl	8004e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	4b07      	ldr	r3, [pc, #28]	@ (8006674 <vPortFree+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4413      	add	r3, r2
 800665a:	4a06      	ldr	r2, [pc, #24]	@ (8006674 <vPortFree+0xb4>)
 800665c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f000 f86c 	bl	800673c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006664:	f7fe fbf6 	bl	8004e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006668:	bf00      	nop
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20002d90 	.word	0x20002d90
 8006674:	20002d88 	.word	0x20002d88

08006678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800667e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006684:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <prvHeapInit+0xac>)
 8006686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3307      	adds	r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006724 <prvHeapInit+0xac>)
 80066a8:	4413      	add	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <prvHeapInit+0xb0>)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006728 <prvHeapInit+0xb0>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066c4:	2208      	movs	r2, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0307 	bic.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a15      	ldr	r2, [pc, #84]	@ (800672c <prvHeapInit+0xb4>)
 80066d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066da:	4b14      	ldr	r3, [pc, #80]	@ (800672c <prvHeapInit+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066e2:	4b12      	ldr	r3, [pc, #72]	@ (800672c <prvHeapInit+0xb4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f8:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <prvHeapInit+0xb4>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <prvHeapInit+0xb8>)
 8006706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <prvHeapInit+0xbc>)
 800670e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006710:	4b09      	ldr	r3, [pc, #36]	@ (8006738 <prvHeapInit+0xc0>)
 8006712:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000217c 	.word	0x2000217c
 8006728:	20002d7c 	.word	0x20002d7c
 800672c:	20002d84 	.word	0x20002d84
 8006730:	20002d8c 	.word	0x20002d8c
 8006734:	20002d88 	.word	0x20002d88
 8006738:	20002d90 	.word	0x20002d90

0800673c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006744:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <prvInsertBlockIntoFreeList+0xa8>)
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e002      	b.n	8006750 <prvInsertBlockIntoFreeList+0x14>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d8f7      	bhi.n	800674a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	4413      	add	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d108      	bne.n	800677e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d118      	bne.n	80067c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <prvInsertBlockIntoFreeList+0xac>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d00d      	beq.n	80067ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e008      	b.n	80067cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <prvInsertBlockIntoFreeList+0xac>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e003      	b.n	80067cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d002      	beq.n	80067da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr
 80067e4:	20002d7c 	.word	0x20002d7c
 80067e8:	20002d84 	.word	0x20002d84

080067ec <HAL_UART_TxCpltCallback>:
uint8_t Com3_data[20];
extern UART_HandleTypeDef huart3;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80067f4:	2201      	movs	r2, #1
 80067f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067fa:	4803      	ldr	r0, [pc, #12]	@ (8006808 <HAL_UART_TxCpltCallback+0x1c>)
 80067fc:	f7fa ff82 	bl	8001704 <HAL_GPIO_WritePin>
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40011000 	.word	0x40011000

0800680c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

	/* Modbus RTU RX callback BEGIN */
    if (UartHandle->Instance == USART1){
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0b      	ldr	r2, [pc, #44]	@ (800684c <HAL_UART_RxCpltCallback+0x40>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10f      	bne.n	8006842 <HAL_UART_RxCpltCallback+0x36>

		RingAdd(&RingBuffer, dataRX);
 8006822:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <HAL_UART_RxCpltCallback+0x44>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	480a      	ldr	r0, [pc, #40]	@ (8006854 <HAL_UART_RxCpltCallback+0x48>)
 800682a:	f000 fbe5 	bl	8006ff8 <RingAdd>
		HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 800682e:	2201      	movs	r2, #1
 8006830:	4907      	ldr	r1, [pc, #28]	@ (8006850 <HAL_UART_RxCpltCallback+0x44>)
 8006832:	4809      	ldr	r0, [pc, #36]	@ (8006858 <HAL_UART_RxCpltCallback+0x4c>)
 8006834:	f7fb fe8a 	bl	800254c <HAL_UART_Receive_IT>
		osSemaphoreRelease(UsartRecieveSemHandle);
 8006838:	4b08      	ldr	r3, [pc, #32]	@ (800685c <HAL_UART_RxCpltCallback+0x50>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7fc ff3b 	bl	80036b8 <osSemaphoreRelease>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40013800 	.word	0x40013800
 8006850:	20000160 	.word	0x20000160
 8006854:	20002d94 	.word	0x20002d94
 8006858:	20000088 	.word	0x20000088
 800685c:	2000015c 	.word	0x2000015c

08006860 <modbus_set_bits_from_bytes>:
   idx + nb_bits are set) */
void modbus_set_bits_from_bytes(uint8_t *dest,
                                int idx,
                                unsigned int nb_bits,
                                const uint8_t *tab_byte)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
    unsigned int i;
    int shift = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]

    for (i = idx; i < idx + nb_bits; i++) {
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e021      	b.n	80068bc <modbus_set_bits_from_bytes+0x5c>
        dest[i] = tab_byte[(i - idx) / 8] & (1 << shift) ? 1 : 0;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	4413      	add	r3, r2
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	fa42 f303 	asr.w	r3, r2, r3
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	440b      	add	r3, r1
 8006896:	f002 0201 	and.w	r2, r2, #1
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
        /* gcc doesn't like: shift = (++shift) % 8; */
        shift++;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3301      	adds	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
        shift %= 8;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	425a      	negs	r2, r3
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	f002 0207 	and.w	r2, r2, #7
 80068b0:	bf58      	it	pl
 80068b2:	4253      	negpl	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    for (i = idx; i < idx + nb_bits; i++) {
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d3d7      	bcc.n	8006878 <modbus_set_bits_from_bytes+0x18>
    }
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <_modbus_set_slave>:
    0x41, 0x81, 0x80, 0x40};

/* Define the slave ID of the remote device to talk in master mode or set the
 * internal slave ID in slave mode */
static int _modbus_set_slave(modbus_t *ctx, int slave)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
    int max_slave = (ctx->quirks & MODBUS_QUIRK_MAX_SLAVE) ? 255 : 247;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <_modbus_set_slave+0x1a>
 80068ea:	23ff      	movs	r3, #255	@ 0xff
 80068ec:	e000      	b.n	80068f0 <_modbus_set_slave+0x1c>
 80068ee:	23f7      	movs	r3, #247	@ 0xf7
 80068f0:	60fb      	str	r3, [r7, #12]

    /* Broadcast address is 0 (MODBUS_BROADCAST_ADDRESS) */
    if (slave >= 0 && slave <= max_slave) {
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	db08      	blt.n	800690a <_modbus_set_slave+0x36>
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	dc04      	bgt.n	800690a <_modbus_set_slave+0x36>
        ctx->slave = slave;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	601a      	str	r2, [r3, #0]
    } else {
        errno = EINVAL;
        return -1;
    }

    return 0;
 8006906:	2300      	movs	r3, #0
 8006908:	e006      	b.n	8006918 <_modbus_set_slave+0x44>
        errno = EINVAL;
 800690a:	f003 fb79 	bl	800a000 <__errno>
 800690e:	4603      	mov	r3, r0
 8006910:	2216      	movs	r2, #22
 8006912:	601a      	str	r2, [r3, #0]
        return -1;
 8006914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <_modbus_rtu_build_request_basis>:

/* Builds a RTU request header */
static int _modbus_rtu_build_request_basis(
    modbus_t *ctx, int function, int addr, int nb, uint8_t *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
    assert(ctx->slave != -1);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d105      	bne.n	8006944 <_modbus_rtu_build_request_basis+0x24>
 8006938:	4b15      	ldr	r3, [pc, #84]	@ (8006990 <_modbus_rtu_build_request_basis+0x70>)
 800693a:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <_modbus_rtu_build_request_basis+0x74>)
 800693c:	2157      	movs	r1, #87	@ 0x57
 800693e:	4816      	ldr	r0, [pc, #88]	@ (8006998 <_modbus_rtu_build_request_basis+0x78>)
 8006940:	f002 faf0 	bl	8008f24 <__assert_func>
    req[0] = ctx->slave;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	b2da      	uxtb	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	701a      	strb	r2, [r3, #0]
    req[1] = function;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3301      	adds	r3, #1
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
    req[2] = addr >> 8;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	121a      	asrs	r2, r3, #8
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3302      	adds	r3, #2
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
    req[3] = addr & 0x00ff;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	3303      	adds	r3, #3
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
    req[4] = nb >> 8;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	121a      	asrs	r2, r3, #8
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	3304      	adds	r3, #4
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
    req[5] = nb & 0x00ff;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	3305      	adds	r3, #5
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]

    return _MODBUS_RTU_PRESET_REQ_LENGTH;
 8006984:	2306      	movs	r3, #6
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	0800a5f0 	.word	0x0800a5f0
 8006994:	0800b100 	.word	0x0800b100
 8006998:	0800a604 	.word	0x0800a604

0800699c <_modbus_rtu_build_response_basis>:

/* Builds a RTU response header */
static int _modbus_rtu_build_response_basis(sft_t *sft, uint8_t *rsp)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
    /* In this case, the slave is certainly valid because a check is already
     * done in _modbus_rtu_listen */
    rsp[0] = sft->slave;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	701a      	strb	r2, [r3, #0]
    rsp[1] = sft->function;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

    return _MODBUS_RTU_PRESET_RSP_LENGTH;
 80069bc:	2302      	movs	r3, #2
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <crc16>:

static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80069d4:	23ff      	movs	r3, #255	@ 0xff
 80069d6:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80069d8:	23ff      	movs	r3, #255	@ 0xff
 80069da:	73bb      	strb	r3, [r7, #14]
    unsigned int i;        /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80069dc:	e013      	b.n	8006a06 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	4053      	eors	r3, r2
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80069ee:	4a0f      	ldr	r2, [pc, #60]	@ (8006a2c <crc16+0x64>)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4413      	add	r3, r2
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	4053      	eors	r3, r2
 80069fa:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80069fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006a30 <crc16+0x68>)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	807a      	strh	r2, [r7, #2]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	b21a      	sxth	r2, r3
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	b29b      	uxth	r3, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	0800aeb0 	.word	0x0800aeb0
 8006a30:	0800afb0 	.word	0x0800afb0

08006a34 <_modbus_rtu_prepare_response_tid>:

static int _modbus_rtu_prepare_response_tid(const uint8_t *req, int *req_length)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
    (*req_length) -= _MODBUS_RTU_CHECKSUM_LENGTH;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1e9a      	subs	r2, r3, #2
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
    /* No TID */
    return 0;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <_modbus_rtu_send_msg_pre>:

static int _modbus_rtu_send_msg_pre(uint8_t *req, int req_length)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
    uint16_t crc = crc16(req, req_length);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ffaf 	bl	80069c8 <crc16>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	81fb      	strh	r3, [r7, #14]

    /* According to the MODBUS specs (p. 14), the low order byte of the CRC comes
     * first in the RTU message */
    req[req_length++] = crc & 0x00FF;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	603a      	str	r2, [r7, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	89fa      	ldrh	r2, [r7, #14]
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
    req[req_length++] = crc >> 8;
 8006a80:	89fb      	ldrh	r3, [r7, #14]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b299      	uxth	r1, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	603a      	str	r2, [r7, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	b2ca      	uxtb	r2, r1
 8006a94:	701a      	strb	r2, [r3, #0]

    return req_length;
 8006a96:	683b      	ldr	r3, [r7, #0]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_modbus_rtu_send>:
    ioctl(fd, TIOCMSET, &flags);
}
#endif

static ssize_t _modbus_rtu_send(modbus_t *ctx, const uint8_t *req, int req_length)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
       // return write(ctx->s, req, req_length);
#if HAVE_DECL_TIOCM_RTS
    }
#endif
#endif
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ab2:	4807      	ldr	r0, [pc, #28]	@ (8006ad0 <_modbus_rtu_send+0x30>)
 8006ab4:	f7fa fe26 	bl	8001704 <HAL_GPIO_WritePin>
    HAL_UART_Transmit_DMA(&huart1, req, req_length);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4804      	ldr	r0, [pc, #16]	@ (8006ad4 <_modbus_rtu_send+0x34>)
 8006ac2:	f7fb fd69 	bl	8002598 <HAL_UART_Transmit_DMA>
    return req_length;
 8006ac6:	687b      	ldr	r3, [r7, #4]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40011000 	.word	0x40011000
 8006ad4:	20000088 	.word	0x20000088

08006ad8 <_modbus_rtu_receive>:

static int _modbus_rtu_receive(modbus_t *ctx, uint8_t *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
    int rc;
    modbus_rtu_t *ctx_rtu = ctx->backend_data;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae6:	60bb      	str	r3, [r7, #8]

    if (ctx_rtu->confirmation_to_ignore) {
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <_modbus_rtu_receive+0x3c>
        _modbus_receive_msg(ctx, req, MSG_CONFIRMATION);
 8006af0:	2201      	movs	r2, #1
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fd51 	bl	800759c <_modbus_receive_msg>
        /* Ignore errors and reset the flag */
        ctx_rtu->confirmation_to_ignore = FALSE;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	60da      	str	r2, [r3, #12]
        rc = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
        if (ctx->debug) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00f      	beq.n	8006b2c <_modbus_rtu_receive+0x54>
            printf("Confirmation to ignore\n");
 8006b0c:	480a      	ldr	r0, [pc, #40]	@ (8006b38 <_modbus_rtu_receive+0x60>)
 8006b0e:	f002 ff01 	bl	8009914 <puts>
 8006b12:	e00b      	b.n	8006b2c <_modbus_rtu_receive+0x54>
        }
    } else {
        rc = _modbus_receive_msg(ctx, req, MSG_INDICATION);
 8006b14:	2200      	movs	r2, #0
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fd3f 	bl	800759c <_modbus_receive_msg>
 8006b1e:	60f8      	str	r0, [r7, #12]
        if (rc == 0) {
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <_modbus_rtu_receive+0x54>
            /* The next expected message is a confirmation to ignore */
            ctx_rtu->confirmation_to_ignore = TRUE;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	60da      	str	r2, [r3, #12]
        }
    }
    return rc;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	0800a63c 	.word	0x0800a63c

08006b3c <_modbus_rtu_recv>:

static ssize_t _modbus_rtu_recv(modbus_t *ctx, uint8_t *rsp, int rsp_length)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
	uint32_t TimeOut;
	TimeOut = ctx->response_timeout.tv_sec * 1000 + ctx->response_timeout.tv_usec / 1000;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b52:	fb03 f202 	mul.w	r2, r3, r2
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	4918      	ldr	r1, [pc, #96]	@ (8006bbc <_modbus_rtu_recv+0x80>)
 8006b5c:	fb81 0103 	smull	r0, r1, r1, r3
 8006b60:	1189      	asrs	r1, r1, #6
 8006b62:	17db      	asrs	r3, r3, #31
 8006b64:	1acb      	subs	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
#if defined(_WIN32)
    return win32_ser_read(&((modbus_rtu_t *) ctx->backend_data)->w_ser, rsp, rsp_length);
#else
    while (RingCountBytes(&RingBuffer)<rsp_length)// ждем пока будет необходимое количесвто байт
 8006b6a:	e013      	b.n	8006b94 <_modbus_rtu_recv+0x58>
    {
    	if(osSemaphoreAcquire(UsartRecieveSemHandle,TimeOut)!=osOK)// если ничего не пришло, выходим по таймауту
 8006b6c:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <_modbus_rtu_recv+0x84>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fc fd3a 	bl	80035ec <osSemaphoreAcquire>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <_modbus_rtu_recv+0x58>
    	{
    		return RingGetNBytes(&RingBuffer,rsp,RingCountBytes(&RingBuffer));// и отдаем сколько есть
 8006b7e:	4811      	ldr	r0, [pc, #68]	@ (8006bc4 <_modbus_rtu_recv+0x88>)
 8006b80:	f000 fad4 	bl	800712c <RingCountBytes>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	480e      	ldr	r0, [pc, #56]	@ (8006bc4 <_modbus_rtu_recv+0x88>)
 8006b8c:	f000 fa7a 	bl	8007084 <RingGetNBytes>
 8006b90:	4603      	mov	r3, r0
 8006b92:	e00f      	b.n	8006bb4 <_modbus_rtu_recv+0x78>
    while (RingCountBytes(&RingBuffer)<rsp_length)// ждем пока будет необходимое количесвто байт
 8006b94:	480b      	ldr	r0, [pc, #44]	@ (8006bc4 <_modbus_rtu_recv+0x88>)
 8006b96:	f000 fac9 	bl	800712c <RingCountBytes>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	dce3      	bgt.n	8006b6c <_modbus_rtu_recv+0x30>
    	}

    }

    return RingGetNBytes(&RingBuffer,rsp,rsp_length);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	4805      	ldr	r0, [pc, #20]	@ (8006bc4 <_modbus_rtu_recv+0x88>)
 8006bae:	f000 fa69 	bl	8007084 <RingGetNBytes>
 8006bb2:	4603      	mov	r3, r0
    //return read(ctx->s, rsp, rsp_length);
#endif
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	10624dd3 	.word	0x10624dd3
 8006bc0:	2000015c 	.word	0x2000015c
 8006bc4:	20002d94 	.word	0x20002d94

08006bc8 <_modbus_rtu_pre_check_confirmation>:

static int _modbus_rtu_pre_check_confirmation(modbus_t *ctx,
                                              const uint8_t *req,
                                              const uint8_t *rsp,
                                              int rsp_length)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
    /* Check responding slave is the slave we requested (except for broacast
     * request) */
    if (req[0] != rsp[0] && req[0] != MODBUS_BROADCAST_ADDRESS) {
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d01a      	beq.n	8006c18 <_modbus_rtu_pre_check_confirmation+0x50>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <_modbus_rtu_pre_check_confirmation+0x50>
        if (ctx->debug) {
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <_modbus_rtu_pre_check_confirmation+0x40>
            fprintf(stderr,
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <_modbus_rtu_pre_check_confirmation+0x5c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68d8      	ldr	r0, [r3, #12]
                    "The responding slave %d isn't the requested slave %d\n",
                    rsp[0],
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
            fprintf(stderr,
 8006bfc:	461a      	mov	r2, r3
                    req[0]);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
            fprintf(stderr,
 8006c02:	4909      	ldr	r1, [pc, #36]	@ (8006c28 <_modbus_rtu_pre_check_confirmation+0x60>)
 8006c04:	f002 fd2c 	bl	8009660 <fiprintf>
        }
        errno = EMBBADSLAVE;
 8006c08:	f003 f9fa 	bl	800a000 <__errno>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4a07      	ldr	r2, [pc, #28]	@ (8006c2c <_modbus_rtu_pre_check_confirmation+0x64>)
 8006c10:	601a      	str	r2, [r3, #0]
        return -1;
 8006c12:	f04f 33ff 	mov.w	r3, #4294967295
 8006c16:	e000      	b.n	8006c1a <_modbus_rtu_pre_check_confirmation+0x52>
    } else {
        return 0;
 8006c18:	2300      	movs	r3, #0
    }
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	2000001c 	.word	0x2000001c
 8006c28:	0800a654 	.word	0x0800a654
 8006c2c:	06b2425f 	.word	0x06b2425f

08006c30 <_modbus_rtu_check_integrity>:

/* The check_crc16 function shall return 0 if the message is ignored and the
   message length if the CRC is valid. Otherwise it shall return -1 and set
   errno to EMBBADCRC. */
static int _modbus_rtu_check_integrity(modbus_t *ctx, uint8_t *msg, const int msg_length)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
    uint16_t crc_calculated;
    uint16_t crc_received;
    int slave = msg[0];
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	617b      	str	r3, [r7, #20]

    /* Filter on the Modbus unit identifier (slave) in RTU mode to avoid useless
     * CRC computing. */
    if (slave != ctx->slave && slave != MODBUS_BROADCAST_ADDRESS) {
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d004      	beq.n	8006c56 <_modbus_rtu_check_integrity+0x26>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <_modbus_rtu_check_integrity+0x26>
        if (ctx->debug) {
            //printf("Request for slave %d ignored (not %d)\n", slave, ctx->slave);
        }
        /* Following call to check_confirmation handles this error */
        return 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e03b      	b.n	8006cce <_modbus_rtu_check_integrity+0x9e>
    }

    crc_calculated = crc16(msg, msg_length - 2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b02      	subs	r3, #2
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68b8      	ldr	r0, [r7, #8]
 8006c62:	f7ff feb1 	bl	80069c8 <crc16>
 8006c66:	4603      	mov	r3, r0
 8006c68:	827b      	strh	r3, [r7, #18]
    crc_received = (msg[msg_length - 1] << 8) | msg[msg_length - 2];
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b21a      	sxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3b02      	subs	r3, #2
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	440b      	add	r3, r1
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b21b      	sxth	r3, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	823b      	strh	r3, [r7, #16]

    /* Check CRC of msg */
    if (crc_calculated == crc_received) {
 8006c8a:	8a7a      	ldrh	r2, [r7, #18]
 8006c8c:	8a3b      	ldrh	r3, [r7, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d101      	bne.n	8006c96 <_modbus_rtu_check_integrity+0x66>
        return msg_length;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	e01b      	b.n	8006cce <_modbus_rtu_check_integrity+0x9e>
    } else {
        if (ctx->debug) {
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <_modbus_rtu_check_integrity+0x7e>
            fprintf(stderr,
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd8 <_modbus_rtu_check_integrity+0xa8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68d8      	ldr	r0, [r3, #12]
 8006ca4:	8a3a      	ldrh	r2, [r7, #16]
 8006ca6:	8a7b      	ldrh	r3, [r7, #18]
 8006ca8:	490c      	ldr	r1, [pc, #48]	@ (8006cdc <_modbus_rtu_check_integrity+0xac>)
 8006caa:	f002 fcd9 	bl	8009660 <fiprintf>
                    "ERROR CRC received 0x%0X != CRC calculated 0x%0X\n",
                    crc_received,
                    crc_calculated);
        }

        if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_PROTOCOL) {
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <_modbus_rtu_check_integrity+0x90>
            _modbus_rtu_flush(ctx);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f838 	bl	8006d30 <_modbus_rtu_flush>
        }
        errno = EMBBADCRC;
 8006cc0:	f003 f99e 	bl	800a000 <__errno>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4a06      	ldr	r2, [pc, #24]	@ (8006ce0 <_modbus_rtu_check_integrity+0xb0>)
 8006cc8:	601a      	str	r2, [r3, #0]
        return -1;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000001c 	.word	0x2000001c
 8006cdc:	0800a68c 	.word	0x0800a68c
 8006ce0:	06b2425a 	.word	0x06b2425a

08006ce4 <_modbus_rtu_connect>:
#else


/* POSIX */
static int _modbus_rtu_connect(modbus_t *ctx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
#else
//    struct termios tios;
//    speed_t speed;
//    int flags;
#endif
    return 0;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <_modbus_rtu_is_connected>:
#endif

// FIXME Temporary solution before rewriting Windows RTU backend
static unsigned int _modbus_rtu_is_connected(modbus_t *ctx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    modbus_rtu_t *ctx_rtu = ctx->backend_data;

    /* Check if file handle is valid */
    return ctx_rtu->w_ser.fd != INVALID_HANDLE_VALUE;
#else
    return ctx->s = 1;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	2301      	movs	r3, #1
#endif
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <_modbus_rtu_close>:
        return -1;
    }
}

static void _modbus_rtu_close(modbus_t *ctx)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
    /* Restore line settings and close file descriptor in RTU mode */
    modbus_rtu_t *ctx_rtu = ctx->backend_data;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1e:	60fb      	str	r3, [r7, #12]
        fprintf(stderr,
                "ERROR Error while closing handle (LastError %d)\n",
                (int) GetLastError());
    }
#else
    modbus_delete_rtu(ctx);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f955 	bl	8006fd0 <modbus_delete_rtu>
#endif
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <_modbus_rtu_flush>:

static int _modbus_rtu_flush(modbus_t *ctx)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
#if defined(_WIN32)
    modbus_rtu_t *ctx_rtu = ctx->backend_data;
    ctx_rtu->w_ser.n_bytes = 0;
    return (PurgeComm(ctx_rtu->w_ser.fd, PURGE_RXCLEAR) == FALSE);
#else
    RingClear(&RingBuffer);
 8006d38:	4803      	ldr	r0, [pc, #12]	@ (8006d48 <_modbus_rtu_flush+0x18>)
 8006d3a:	f000 fa03 	bl	8007144 <RingClear>
    return 0;
 8006d3e:	2300      	movs	r3, #0
   // return tcflush(ctx->s, TCIOFLUSH);
#endif
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20002d94 	.word	0x20002d94

08006d4c <_modbus_rtu_select>:

static int
_modbus_rtu_select(modbus_t *ctx, fd_set *rset, struct timeval *tv, int length_to_read)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]

    if (s_rc < 0) {
        return -1;
    }
#else
    return 0;
 8006d5a:	2300      	movs	r3, #0
#endif

    //return s_rc;
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <_modbus_rtu_free>:

static void _modbus_rtu_free(modbus_t *ctx)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
    if (ctx->backend_data) {
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <_modbus_rtu_free+0x26>
        vPortFree(((modbus_rtu_t *) ctx->backend_data)->device);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fc1f 	bl	80065c0 <vPortFree>
        vPortFree(ctx->backend_data);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fc1a 	bl	80065c0 <vPortFree>
    }

    vPortFree(ctx);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fc17 	bl	80065c0 <vPortFree>
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <modbus_new_rtu>:

// clang-format on

modbus_t *
modbus_new_rtu(const char *device, int baud, char parity, int data_bit, int stop_bit)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
    modbus_t *ctx;
    modbus_rtu_t *ctx_rtu;

    /* Check device argument */
    if (device == NULL || *device == 0) {
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <modbus_new_rtu+0x1e>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10e      	bne.n	8006dd8 <modbus_new_rtu+0x3c>
        fprintf(stderr, "The device string is empty\n");
 8006dba:	4b7f      	ldr	r3, [pc, #508]	@ (8006fb8 <modbus_new_rtu+0x21c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	221b      	movs	r2, #27
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	487d      	ldr	r0, [pc, #500]	@ (8006fbc <modbus_new_rtu+0x220>)
 8006dc6:	f002 fcf3 	bl	80097b0 <fwrite>
        errno = EINVAL;
 8006dca:	f003 f919 	bl	800a000 <__errno>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2216      	movs	r2, #22
 8006dd2:	601a      	str	r2, [r3, #0]
        return NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e0eb      	b.n	8006fb0 <modbus_new_rtu+0x214>
    }

    /* Check baud argument */
    if (baud == 0) {
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10e      	bne.n	8006dfc <modbus_new_rtu+0x60>
        fprintf(stderr, "The baud rate value must not be zero\n");
 8006dde:	4b76      	ldr	r3, [pc, #472]	@ (8006fb8 <modbus_new_rtu+0x21c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2225      	movs	r2, #37	@ 0x25
 8006de6:	2101      	movs	r1, #1
 8006de8:	4875      	ldr	r0, [pc, #468]	@ (8006fc0 <modbus_new_rtu+0x224>)
 8006dea:	f002 fce1 	bl	80097b0 <fwrite>
        errno = EINVAL;
 8006dee:	f003 f907 	bl	800a000 <__errno>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2216      	movs	r2, #22
 8006df6:	601a      	str	r2, [r3, #0]
        return NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e0d9      	b.n	8006fb0 <modbus_new_rtu+0x214>
    }

    ctx = (modbus_t *) pvPortMalloc(sizeof(modbus_t));
 8006dfc:	2050      	movs	r0, #80	@ 0x50
 8006dfe:	f7ff fb17 	bl	8006430 <pvPortMalloc>
 8006e02:	6178      	str	r0, [r7, #20]
    if (ctx == NULL) {
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <modbus_new_rtu+0x72>
        return NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e0d0      	b.n	8006fb0 <modbus_new_rtu+0x214>
    }

    _modbus_init_common(ctx);
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	f001 fec4 	bl	8008b9c <_modbus_init_common>
    ctx->backend = &_modbus_rtu_backend;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4a6b      	ldr	r2, [pc, #428]	@ (8006fc4 <modbus_new_rtu+0x228>)
 8006e18:	649a      	str	r2, [r3, #72]	@ 0x48
    ctx->backend_data = (modbus_rtu_t *) pvPortMalloc(sizeof(modbus_rtu_t));
 8006e1a:	2010      	movs	r0, #16
 8006e1c:	f7ff fb08 	bl	8006430 <pvPortMalloc>
 8006e20:	4602      	mov	r2, r0
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (ctx->backend_data == NULL) {
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <modbus_new_rtu+0xa6>
        modbus_free(ctx);
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f001 ff86 	bl	8008d40 <modbus_free>
        errno = ENOMEM;
 8006e34:	f003 f8e4 	bl	800a000 <__errno>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	220c      	movs	r2, #12
 8006e3c:	601a      	str	r2, [r3, #0]
        return NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e0b6      	b.n	8006fb0 <modbus_new_rtu+0x214>
    }
    ctx_rtu = (modbus_rtu_t *) ctx->backend_data;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e46:	613b      	str	r3, [r7, #16]

    /* Device name and \0 */
    ctx_rtu->device = (char *) pvPortMalloc((strlen(device) + 1) * sizeof(char));
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7f9 f981 	bl	8000150 <strlen>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	3301      	adds	r3, #1
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff faec 	bl	8006430 <pvPortMalloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	601a      	str	r2, [r3, #0]
    if (ctx_rtu->device == NULL) {
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <modbus_new_rtu+0xde>
        modbus_free(ctx);
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f001 ff6a 	bl	8008d40 <modbus_free>
        errno = ENOMEM;
 8006e6c:	f003 f8c8 	bl	800a000 <__errno>
 8006e70:	4603      	mov	r3, r0
 8006e72:	220c      	movs	r2, #12
 8006e74:	601a      	str	r2, [r3, #0]
        return NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e09a      	b.n	8006fb0 <modbus_new_rtu+0x214>
    }

#if defined(_WIN32)
    strcpy_s(ctx_rtu->device, strlen(device) + 1, device);
#else
    strcpy(ctx_rtu->device, device);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f003 f8ea 	bl	800a05a <strcpy>
#endif

    ctx_rtu->baud = baud;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	605a      	str	r2, [r3, #4]
    ctx_rtu->data_bit = data_bit;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	721a      	strb	r2, [r3, #8]
    ctx_rtu->stop_bit = stop_bit;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	725a      	strb	r2, [r3, #9]
    /* The delay before and after transmission when toggling the RTS pin */
    ctx_rtu->rts_delay = ctx_rtu->onebyte_time;
#endif

    // Преобразование по паритетам
	uint32_t tempParity = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
	char paritymode = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	switch (parity)
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d013      	beq.n	8006ed4 <modbus_new_rtu+0x138>
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	dc18      	bgt.n	8006ee2 <modbus_new_rtu+0x146>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <modbus_new_rtu+0x11e>
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d006      	beq.n	8006ec6 <modbus_new_rtu+0x12a>
 8006eb8:	e013      	b.n	8006ee2 <modbus_new_rtu+0x146>
	{
		case 0:
		{
			paritymode = 'N';
 8006eba:	234e      	movs	r3, #78	@ 0x4e
 8006ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			tempParity = UART_PARITY_NONE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
		} break;
 8006ec4:	e014      	b.n	8006ef0 <modbus_new_rtu+0x154>
		case 1:
		{
			paritymode = 'O';
 8006ec6:	234f      	movs	r3, #79	@ 0x4f
 8006ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			tempParity = UART_PARITY_ODD;
 8006ecc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
		} break;
 8006ed2:	e00d      	b.n	8006ef0 <modbus_new_rtu+0x154>
		case 2:
		{
			paritymode = 'E';
 8006ed4:	2345      	movs	r3, #69	@ 0x45
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			tempParity = UART_PARITY_EVEN;
 8006eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
		} break;
 8006ee0:	e006      	b.n	8006ef0 <modbus_new_rtu+0x154>
		default:
		{
	errno = EINVAL;
 8006ee2:	f003 f88d 	bl	800a000 <__errno>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2216      	movs	r2, #22
 8006eea:	601a      	str	r2, [r3, #0]
	return NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e05f      	b.n	8006fb0 <modbus_new_rtu+0x214>
		}
	}
	// Преобразование по стоп-битам
			uint32_t tmpSopBits = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
			switch (stop_bit)
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d003      	beq.n	8006f02 <modbus_new_rtu+0x166>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d003      	beq.n	8006f08 <modbus_new_rtu+0x16c>
 8006f00:	e006      	b.n	8006f10 <modbus_new_rtu+0x174>
			{
				case 1: tmpSopBits = UART_STOPBITS_1; break;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e003      	b.n	8006f10 <modbus_new_rtu+0x174>
				case 2: tmpSopBits = UART_STOPBITS_2; break;
 8006f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	bf00      	nop
			}

			// Преобразование по битам данных 8 или 9
			uint32_t tmpDataBits = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]

			// Проверка четности если используется то врубаем 9 бит
			if (tempParity != UART_PARITY_NONE)
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <modbus_new_rtu+0x182>
				data_bit = 9;
 8006f1a:	2309      	movs	r3, #9
 8006f1c:	603b      	str	r3, [r7, #0]

			// Подстрйка под хал
			switch (data_bit)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d003      	beq.n	8006f2c <modbus_new_rtu+0x190>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d003      	beq.n	8006f32 <modbus_new_rtu+0x196>
 8006f2a:	e006      	b.n	8006f3a <modbus_new_rtu+0x19e>
			{
				case 8: tmpDataBits = UART_WORDLENGTH_8B; break;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e003      	b.n	8006f3a <modbus_new_rtu+0x19e>
				case 9: tmpDataBits = UART_WORDLENGTH_9B; break;
 8006f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	bf00      	nop
			}
	    ctx_rtu->baud = baud;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	605a      	str	r2, [r3, #4]
			ctx_rtu->parity = parity;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	79fa      	ldrb	r2, [r7, #7]
 8006f44:	729a      	strb	r2, [r3, #10]

			// Если данные адекватные перенастраиваем
	    if (paritymode == 'N' || paritymode == 'E' || paritymode == 'O')
 8006f46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f4c:	d007      	beq.n	8006f5e <modbus_new_rtu+0x1c2>
 8006f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f52:	2b45      	cmp	r3, #69	@ 0x45
 8006f54:	d003      	beq.n	8006f5e <modbus_new_rtu+0x1c2>
 8006f56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8006f5c:	d124      	bne.n	8006fa8 <modbus_new_rtu+0x20c>
			{
	    	// Получаем порт с которым надо произвести изменения
			//UART_HandleTypeDef *CurrPort = GetPhyPort(PortNo);
			// Выставляем новые настройки
	    	 huart1.Init.BaudRate = baud;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4a19      	ldr	r2, [pc, #100]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f62:	6053      	str	r3, [r2, #4]
	    	 huart1.Init.WordLength = tmpDataBits;
 8006f64:	4a18      	ldr	r2, [pc, #96]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6093      	str	r3, [r2, #8]
	    	 huart1.Init.StopBits = tmpSopBits;
 8006f6a:	4a17      	ldr	r2, [pc, #92]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	60d3      	str	r3, [r2, #12]
	    	 huart1.Init.Parity = tempParity;
 8006f70:	4a15      	ldr	r2, [pc, #84]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	6113      	str	r3, [r2, #16]
	    	 huart1.Init.Mode = UART_MODE_TX_RX;
 8006f76:	4b14      	ldr	r3, [pc, #80]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f78:	220c      	movs	r2, #12
 8006f7a:	615a      	str	r2, [r3, #20]
	    	 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f7c:	4b12      	ldr	r3, [pc, #72]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
	    	 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f82:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	61da      	str	r2, [r3, #28]
//			// Сброс
			HAL_UART_DeInit(&huart1);
 8006f88:	480f      	ldr	r0, [pc, #60]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f8a:	f7fb faad 	bl	80024e8 <HAL_UART_DeInit>
			if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f8e:	480e      	ldr	r0, [pc, #56]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006f90:	f7fb fa5a 	bl	8002448 <HAL_UART_Init>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <modbus_new_rtu+0x202>
			{
				Error_Handler();
 8006f9a:	f7f9 fa6f 	bl	800047c <Error_Handler>
			}
			HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	490a      	ldr	r1, [pc, #40]	@ (8006fcc <modbus_new_rtu+0x230>)
 8006fa2:	4809      	ldr	r0, [pc, #36]	@ (8006fc8 <modbus_new_rtu+0x22c>)
 8006fa4:	f7fb fad2 	bl	800254c <HAL_UART_Receive_IT>
			}
    ctx_rtu->confirmation_to_ignore = FALSE;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2200      	movs	r2, #0
 8006fac:	60da      	str	r2, [r3, #12]

    return ctx;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	@ 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	2000001c 	.word	0x2000001c
 8006fbc:	0800a6f0 	.word	0x0800a6f0
 8006fc0:	0800a70c 	.word	0x0800a70c
 8006fc4:	0800b0b0 	.word	0x0800b0b0
 8006fc8:	20000088 	.word	0x20000088
 8006fcc:	20000160 	.word	0x20000160

08006fd0 <modbus_delete_rtu>:

void modbus_delete_rtu(modbus_t* rtu)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	if (rtu == NULL) return;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <modbus_delete_rtu+0x1c>

	RingClear(&RingBuffer);
 8006fde:	4805      	ldr	r0, [pc, #20]	@ (8006ff4 <modbus_delete_rtu+0x24>)
 8006fe0:	f000 f8b0 	bl	8007144 <RingClear>

	_modbus_rtu_free(rtu);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff febe 	bl	8006d66 <_modbus_rtu_free>
 8006fea:	e000      	b.n	8006fee <modbus_delete_rtu+0x1e>
	if (rtu == NULL) return;
 8006fec:	bf00      	nop
}
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20002d94 	.word	0x20002d94

08006ff8 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800700a:	4619      	mov	r1, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007018:	3301      	adds	r3, #1
 800701a:	425a      	negs	r2, r3
 800701c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007020:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007024:	bf58      	it	pl
 8007026:	4253      	negpl	r3, r2
 8007028:	b2da      	uxtb	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8007036:	2b80      	cmp	r3, #128	@ 0x80
 8007038:	d113      	bne.n	8007062 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007048:	3301      	adds	r3, #1
 800704a:	425a      	negs	r2, r3
 800704c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007050:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007054:	bf58      	it	pl
 8007056:	4253      	negpl	r3, r2
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8007060:	e00b      	b.n	800707a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8007070:	3301      	adds	r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <RingGetNBytes>:
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
}

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <RingGetNBytes+0x1e>
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <RingGetNBytes+0x22>
 80070a2:	2300      	movs	r3, #0
 80070a4:	e03e      	b.n	8007124 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b80      	cmp	r3, #128	@ 0x80
 80070aa:	d901      	bls.n	80070b0 <RingGetNBytes+0x2c>
 80070ac:	2300      	movs	r3, #0
 80070ae:	e039      	b.n	8007124 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
 80070b4:	e01b      	b.n	80070ee <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80070bc:	4619      	mov	r1, r3
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	4413      	add	r3, r2
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	5c52      	ldrb	r2, [r2, r1]
 80070c8:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80070d0:	3301      	adds	r3, #1
 80070d2:	425a      	negs	r2, r3
 80070d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070dc:	bf58      	it	pl
 80070de:	4253      	negpl	r3, r2
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	3301      	adds	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
 80070ee:	7dfa      	ldrb	r2, [r7, #23]
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d205      	bcs.n	8007102 <RingGetNBytes+0x7e>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80070fc:	7dfa      	ldrb	r2, [r7, #23]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d3d9      	bcc.n	80070b6 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f811 	bl	8007144 <RingClear>

	return uCounter;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
return xRingBuffer->u8available;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
	...

08007178 <modbus_strerror>:
    _STEP_META,
    _STEP_DATA
} _step_t;

const char *modbus_strerror(int errnum)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
    switch (errnum) {
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4b27      	ldr	r3, [pc, #156]	@ (8007220 <modbus_strerror+0xa8>)
 8007184:	4413      	add	r3, r2
 8007186:	2b10      	cmp	r3, #16
 8007188:	d842      	bhi.n	8007210 <modbus_strerror+0x98>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <modbus_strerror+0x18>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071d5 	.word	0x080071d5
 8007194:	080071d9 	.word	0x080071d9
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071e1 	.word	0x080071e1
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071e9 	.word	0x080071e9
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071f1 	.word	0x080071f1
 80071b0:	08007211 	.word	0x08007211
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	08007201 	.word	0x08007201
 80071c4:	08007205 	.word	0x08007205
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007209 	.word	0x08007209
 80071d0:	0800720d 	.word	0x0800720d
    case EMBXILFUN:
        return "Illegal function";
 80071d4:	4b13      	ldr	r3, [pc, #76]	@ (8007224 <modbus_strerror+0xac>)
 80071d6:	e01f      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXILADD:
        return "Illegal data address";
 80071d8:	4b13      	ldr	r3, [pc, #76]	@ (8007228 <modbus_strerror+0xb0>)
 80071da:	e01d      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXILVAL:
        return "Illegal data value";
 80071dc:	4b13      	ldr	r3, [pc, #76]	@ (800722c <modbus_strerror+0xb4>)
 80071de:	e01b      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXSFAIL:
        return "Slave device or server failure";
 80071e0:	4b13      	ldr	r3, [pc, #76]	@ (8007230 <modbus_strerror+0xb8>)
 80071e2:	e019      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXACK:
        return "Acknowledge";
 80071e4:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <modbus_strerror+0xbc>)
 80071e6:	e017      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXSBUSY:
        return "Slave device or server is busy";
 80071e8:	4b13      	ldr	r3, [pc, #76]	@ (8007238 <modbus_strerror+0xc0>)
 80071ea:	e015      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXNACK:
        return "Negative acknowledge";
 80071ec:	4b13      	ldr	r3, [pc, #76]	@ (800723c <modbus_strerror+0xc4>)
 80071ee:	e013      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXMEMPAR:
        return "Memory parity error";
 80071f0:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <modbus_strerror+0xc8>)
 80071f2:	e011      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXGPATH:
        return "Gateway path unavailable";
 80071f4:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <modbus_strerror+0xcc>)
 80071f6:	e00f      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBXGTAR:
        return "Target device failed to respond";
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <modbus_strerror+0xd0>)
 80071fa:	e00d      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBBADCRC:
        return "Invalid CRC";
 80071fc:	4b13      	ldr	r3, [pc, #76]	@ (800724c <modbus_strerror+0xd4>)
 80071fe:	e00b      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBBADDATA:
        return "Invalid data";
 8007200:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <modbus_strerror+0xd8>)
 8007202:	e009      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBBADEXC:
        return "Invalid exception code";
 8007204:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <modbus_strerror+0xdc>)
 8007206:	e007      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBMDATA:
        return "Too many data";
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <modbus_strerror+0xe0>)
 800720a:	e005      	b.n	8007218 <modbus_strerror+0xa0>
    case EMBBADSLAVE:
        return "Response not from requested slave";
 800720c:	4b13      	ldr	r3, [pc, #76]	@ (800725c <modbus_strerror+0xe4>)
 800720e:	e003      	b.n	8007218 <modbus_strerror+0xa0>
    default:
        return strerror(errnum);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f002 fe4d 	bl	8009eb0 <strerror>
 8007216:	4603      	mov	r3, r0
    }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	f94dbdb1 	.word	0xf94dbdb1
 8007224:	0800a734 	.word	0x0800a734
 8007228:	0800a748 	.word	0x0800a748
 800722c:	0800a760 	.word	0x0800a760
 8007230:	0800a774 	.word	0x0800a774
 8007234:	0800a794 	.word	0x0800a794
 8007238:	0800a7a0 	.word	0x0800a7a0
 800723c:	0800a7c0 	.word	0x0800a7c0
 8007240:	0800a7d8 	.word	0x0800a7d8
 8007244:	0800a7ec 	.word	0x0800a7ec
 8007248:	0800a808 	.word	0x0800a808
 800724c:	0800a828 	.word	0x0800a828
 8007250:	0800a834 	.word	0x0800a834
 8007254:	0800a844 	.word	0x0800a844
 8007258:	0800a85c 	.word	0x0800a85c
 800725c:	0800a86c 	.word	0x0800a86c

08007260 <_error_print>:

void _error_print(modbus_t *ctx, const char *context)
{
 8007260:	b590      	push	{r4, r7, lr}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
    if (ctx->debug) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d022      	beq.n	80072b8 <_error_print+0x58>
        fprintf(stderr, "ERROR %s", modbus_strerror(errno));
 8007272:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <_error_print+0x60>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68dc      	ldr	r4, [r3, #12]
 8007278:	f002 fec2 	bl	800a000 <__errno>
 800727c:	4603      	mov	r3, r0
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff79 	bl	8007178 <modbus_strerror>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	490e      	ldr	r1, [pc, #56]	@ (80072c4 <_error_print+0x64>)
 800728c:	4620      	mov	r0, r4
 800728e:	f002 f9e7 	bl	8009660 <fiprintf>
        if (context != NULL) {
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <_error_print+0x4a>
            fprintf(stderr, ": %s\n", context);
 8007298:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <_error_print+0x60>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	4909      	ldr	r1, [pc, #36]	@ (80072c8 <_error_print+0x68>)
 80072a2:	4618      	mov	r0, r3
 80072a4:	f002 f9dc 	bl	8009660 <fiprintf>
        } else {
            fprintf(stderr, "\n");
        }
    }
}
 80072a8:	e006      	b.n	80072b8 <_error_print+0x58>
            fprintf(stderr, "\n");
 80072aa:	4b05      	ldr	r3, [pc, #20]	@ (80072c0 <_error_print+0x60>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4619      	mov	r1, r3
 80072b2:	200a      	movs	r0, #10
 80072b4:	f002 fa0a 	bl	80096cc <fputc>
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd90      	pop	{r4, r7, pc}
 80072c0:	2000001c 	.word	0x2000001c
 80072c4:	0800a890 	.word	0x0800a890
 80072c8:	0800a89c 	.word	0x0800a89c

080072cc <_sleep_response_timeout>:

static void _sleep_response_timeout(modbus_t *ctx)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
#ifdef _WIN32
    /* usleep doesn't exist on Windows */
    Sleep((ctx->response_timeout.tv_sec * 1000) + (ctx->response_timeout.tv_usec / 1000));
#else
    /* usleep source code */
    osDelay((ctx->response_timeout.tv_sec * 1000) +
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80072da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072de:	fb03 f202 	mul.w	r2, r3, r2
            (ctx->response_timeout.tv_usec / 1000));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	4907      	ldr	r1, [pc, #28]	@ (8007304 <_sleep_response_timeout+0x38>)
 80072e8:	fb81 0103 	smull	r0, r1, r1, r3
 80072ec:	1189      	asrs	r1, r1, #6
 80072ee:	17db      	asrs	r3, r3, #31
 80072f0:	1acb      	subs	r3, r1, r3
    osDelay((ctx->response_timeout.tv_sec * 1000) +
 80072f2:	4413      	add	r3, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fc f8af 	bl	8003458 <osDelay>

#endif
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	10624dd3 	.word	0x10624dd3

08007308 <modbus_flush>:

int modbus_flush(modbus_t *ctx)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
    int rc;

    if (ctx == NULL) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <modbus_flush+0x1e>
        errno = EINVAL;
 8007316:	f002 fe73 	bl	800a000 <__errno>
 800731a:	4603      	mov	r3, r0
 800731c:	2216      	movs	r2, #22
 800731e:	601a      	str	r2, [r3, #0]
        return -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	e012      	b.n	800734c <modbus_flush+0x44>
    }

    rc = ctx->backend->flush(ctx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800732a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
    if (rc != -1 && ctx->debug) {
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d007      	beq.n	800734a <modbus_flush+0x42>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <modbus_flush+0x42>
        /* Not all backends are able to return the number of bytes flushed */
        printf("Bytes flushed (%d)\n", rc);
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	4803      	ldr	r0, [pc, #12]	@ (8007354 <modbus_flush+0x4c>)
 8007346:	f002 fa41 	bl	80097cc <iprintf>
    }
    return rc;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	0800a8a4 	.word	0x0800a8a4

08007358 <send_msg>:
    return offset + length + ctx->backend->checksum_length;
}

/* Sends a request/response */
static int send_msg(modbus_t *ctx, uint8_t *msg, int msg_length)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
    int rc;
    int i;

    msg_length = ctx->backend->send_msg_pre(msg, msg_length);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	68b8      	ldr	r0, [r7, #8]
 800736e:	4798      	blx	r3
 8007370:	6078      	str	r0, [r7, #4]

    if (ctx->debug) {
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d014      	beq.n	80073a4 <send_msg+0x4c>
        for (i = 0; i < msg_length; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	e00a      	b.n	8007396 <send_msg+0x3e>
            printf("[%.2X]", msg[i]);
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	4836      	ldr	r0, [pc, #216]	@ (8007464 <send_msg+0x10c>)
 800738c:	f002 fa1e 	bl	80097cc <iprintf>
        for (i = 0; i < msg_length; i++)
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	3301      	adds	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	dbf0      	blt.n	8007380 <send_msg+0x28>
        printf("\n");
 800739e:	200a      	movs	r0, #10
 80073a0:	f002 fa5a 	bl	8009858 <putchar>
    }

    /* In recovery mode, the write command will be issued until to be
       successful! Disabled by default. */
    do {
        rc = ctx->backend->send(ctx, msg, msg_length);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	4798      	blx	r3
 80073b2:	61b8      	str	r0, [r7, #24]
        if (rc == -1) {
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d135      	bne.n	8007428 <send_msg+0xd0>
            _error_print(ctx, NULL);
 80073bc:	2100      	movs	r1, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff ff4e 	bl	8007260 <_error_print>
            if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02b      	beq.n	8007428 <send_msg+0xd0>
                } else {
                    _sleep_response_timeout(ctx);
                    modbus_flush(ctx);
                }
#else
                int saved_errno = errno;
 80073d0:	f002 fe16 	bl	800a000 <__errno>
 80073d4:	4603      	mov	r3, r0
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	617b      	str	r3, [r7, #20]

                if ((errno == EBADF || errno == ECONNRESET || errno == EPIPE)) {
 80073da:	f002 fe11 	bl	800a000 <__errno>
 80073de:	4603      	mov	r3, r0
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d00b      	beq.n	80073fe <send_msg+0xa6>
 80073e6:	f002 fe0b 	bl	800a000 <__errno>
 80073ea:	4603      	mov	r3, r0
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b68      	cmp	r3, #104	@ 0x68
 80073f0:	d005      	beq.n	80073fe <send_msg+0xa6>
 80073f2:	f002 fe05 	bl	800a000 <__errno>
 80073f6:	4603      	mov	r3, r0
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d109      	bne.n	8007412 <send_msg+0xba>
                    modbus_close(ctx);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 fc8d 	bl	8008d1e <modbus_close>
                    _sleep_response_timeout(ctx);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff61 	bl	80072cc <_sleep_response_timeout>
                    modbus_connect(ctx);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fc6e 	bl	8008cec <modbus_connect>
 8007410:	e005      	b.n	800741e <send_msg+0xc6>
                } else {
                    _sleep_response_timeout(ctx);
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff ff5a 	bl	80072cc <_sleep_response_timeout>
                    modbus_flush(ctx);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff ff75 	bl	8007308 <modbus_flush>
                }
                errno = saved_errno;
 800741e:	f002 fdef 	bl	800a000 <__errno>
 8007422:	4602      	mov	r2, r0
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6013      	str	r3, [r2, #0]
#endif
            }
        }
    } while ((ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) && rc == -1);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <send_msg+0xe4>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d0b3      	beq.n	80073a4 <send_msg+0x4c>

    if (rc > 0 && rc != msg_length) {
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd0b      	ble.n	800745a <send_msg+0x102>
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d007      	beq.n	800745a <send_msg+0x102>
        errno = EMBBADDATA;
 800744a:	f002 fdd9 	bl	800a000 <__errno>
 800744e:	4603      	mov	r3, r0
 8007450:	4a05      	ldr	r2, [pc, #20]	@ (8007468 <send_msg+0x110>)
 8007452:	601a      	str	r2, [r3, #0]
        return -1;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	e000      	b.n	800745c <send_msg+0x104>
    }

    return rc;
 800745a:	69bb      	ldr	r3, [r7, #24]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	0800a8b8 	.word	0x0800a8b8
 8007468:	06b2425b 	.word	0x06b2425b

0800746c <compute_meta_length_after_function>:
 *  ---------- Confirmation  Response ----------
 */

/* Computes the length to read after the function received */
static uint8_t compute_meta_length_after_function(int function, msg_type_t msg_type)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
    int length;

    if (msg_type == MSG_INDICATION) {
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11d      	bne.n	80074ba <compute_meta_length_after_function+0x4e>
        if (function <= MODBUS_FC_WRITE_SINGLE_REGISTER) {
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b06      	cmp	r3, #6
 8007482:	dc02      	bgt.n	800748a <compute_meta_length_after_function+0x1e>
            length = 4;
 8007484:	2304      	movs	r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e030      	b.n	80074ec <compute_meta_length_after_function+0x80>
        } else if (function == MODBUS_FC_WRITE_MULTIPLE_COILS ||
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b0f      	cmp	r3, #15
 800748e:	d002      	beq.n	8007496 <compute_meta_length_after_function+0x2a>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b10      	cmp	r3, #16
 8007494:	d102      	bne.n	800749c <compute_meta_length_after_function+0x30>
                   function == MODBUS_FC_WRITE_MULTIPLE_REGISTERS) {
            length = 5;
 8007496:	2305      	movs	r3, #5
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e027      	b.n	80074ec <compute_meta_length_after_function+0x80>
        } else if (function == MODBUS_FC_MASK_WRITE_REGISTER) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b16      	cmp	r3, #22
 80074a0:	d102      	bne.n	80074a8 <compute_meta_length_after_function+0x3c>
            length = 6;
 80074a2:	2306      	movs	r3, #6
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e021      	b.n	80074ec <compute_meta_length_after_function+0x80>
        } else if (function == MODBUS_FC_WRITE_AND_READ_REGISTERS) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b17      	cmp	r3, #23
 80074ac:	d102      	bne.n	80074b4 <compute_meta_length_after_function+0x48>
            length = 9;
 80074ae:	2309      	movs	r3, #9
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e01b      	b.n	80074ec <compute_meta_length_after_function+0x80>
        } else {
            /* MODBUS_FC_READ_EXCEPTION_STATUS, MODBUS_FC_REPORT_SLAVE_ID */
            length = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e018      	b.n	80074ec <compute_meta_length_after_function+0x80>
        }
    } else {
        /* MSG_CONFIRMATION */
        switch (function) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b16      	cmp	r3, #22
 80074be:	d010      	beq.n	80074e2 <compute_meta_length_after_function+0x76>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	dc10      	bgt.n	80074e8 <compute_meta_length_after_function+0x7c>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	dc03      	bgt.n	80074d4 <compute_meta_length_after_function+0x68>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	da04      	bge.n	80074dc <compute_meta_length_after_function+0x70>
 80074d2:	e009      	b.n	80074e8 <compute_meta_length_after_function+0x7c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3b0f      	subs	r3, #15
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d805      	bhi.n	80074e8 <compute_meta_length_after_function+0x7c>
        case MODBUS_FC_WRITE_SINGLE_COIL:
        case MODBUS_FC_WRITE_SINGLE_REGISTER:
        case MODBUS_FC_WRITE_MULTIPLE_COILS:
        case MODBUS_FC_WRITE_MULTIPLE_REGISTERS:
            length = 4;
 80074dc:	2304      	movs	r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
            break;
 80074e0:	e004      	b.n	80074ec <compute_meta_length_after_function+0x80>
        case MODBUS_FC_MASK_WRITE_REGISTER:
            length = 6;
 80074e2:	2306      	movs	r3, #6
 80074e4:	60fb      	str	r3, [r7, #12]
            break;
 80074e6:	e001      	b.n	80074ec <compute_meta_length_after_function+0x80>
        default:
            length = 1;
 80074e8:	2301      	movs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
        }
    }

    return length;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	b2db      	uxtb	r3, r3
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <compute_data_length_after_meta>:

/* Computes the length to read after the meta information (address, count, etc) */
static int
compute_data_length_after_meta(modbus_t *ctx, uint8_t *msg, msg_type_t msg_type)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	4613      	mov	r3, r2
 8007506:	71fb      	strb	r3, [r7, #7]
    int function = msg[ctx->backend->header_length];
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	613b      	str	r3, [r7, #16]
    int length;

    if (msg_type == MSG_INDICATION) {
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11f      	bne.n	800755c <compute_data_length_after_meta+0x62>
        switch (function) {
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b10      	cmp	r3, #16
 8007520:	dc03      	bgt.n	800752a <compute_data_length_after_meta+0x30>
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b0f      	cmp	r3, #15
 8007526:	da04      	bge.n	8007532 <compute_data_length_after_meta+0x38>
 8007528:	e015      	b.n	8007556 <compute_data_length_after_meta+0x5c>
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b17      	cmp	r3, #23
 800752e:	d009      	beq.n	8007544 <compute_data_length_after_meta+0x4a>
 8007530:	e011      	b.n	8007556 <compute_data_length_after_meta+0x5c>
        case MODBUS_FC_WRITE_MULTIPLE_COILS:
        case MODBUS_FC_WRITE_MULTIPLE_REGISTERS:
            length = msg[ctx->backend->header_length + 5];
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	3305      	adds	r3, #5
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	617b      	str	r3, [r7, #20]
            break;
 8007542:	e01f      	b.n	8007584 <compute_data_length_after_meta+0x8a>
        case MODBUS_FC_WRITE_AND_READ_REGISTERS:
            length = msg[ctx->backend->header_length + 9];
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	3309      	adds	r3, #9
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	617b      	str	r3, [r7, #20]
            break;
 8007554:	e016      	b.n	8007584 <compute_data_length_after_meta+0x8a>
        default:
            length = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e013      	b.n	8007584 <compute_data_length_after_meta+0x8a>
        }
    } else {
        /* MSG_CONFIRMATION */
        if (function <= MODBUS_FC_READ_INPUT_REGISTERS ||
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b04      	cmp	r3, #4
 8007560:	dd05      	ble.n	800756e <compute_data_length_after_meta+0x74>
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b11      	cmp	r3, #17
 8007566:	d002      	beq.n	800756e <compute_data_length_after_meta+0x74>
            function == MODBUS_FC_REPORT_SLAVE_ID ||
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b17      	cmp	r3, #23
 800756c:	d108      	bne.n	8007580 <compute_data_length_after_meta+0x86>
            function == MODBUS_FC_WRITE_AND_READ_REGISTERS) {
            length = msg[ctx->backend->header_length + 1];
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	3301      	adds	r3, #1
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e001      	b.n	8007584 <compute_data_length_after_meta+0x8a>
        } else {
            length = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
        }
    }

    length += ctx->backend->checksum_length;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

    return length;
 8007590:	697b      	ldr	r3, [r7, #20]
}
 8007592:	4618      	mov	r0, r3
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr

0800759c <_modbus_receive_msg>:
   - ETIMEDOUT
   - read() or recv() error codes
*/

int _modbus_receive_msg(modbus_t *ctx, uint8_t *msg, msg_type_t msg_type)
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b095      	sub	sp, #84	@ 0x54
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
    int rc;
    fd_set rset;
    struct timeval tv;
    struct timeval *p_tv;
    unsigned int length_to_read;
    int msg_length = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
    _step_t step;
#ifdef _WIN32
    int wsa_err;
#endif

    if (ctx->debug) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <_modbus_receive_msg+0x2e>
        if (msg_type == MSG_INDICATION) {
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <_modbus_receive_msg+0x28>
            printf("Waiting for an indication...\n");
 80075bc:	4896      	ldr	r0, [pc, #600]	@ (8007818 <_modbus_receive_msg+0x27c>)
 80075be:	f002 f9a9 	bl	8009914 <puts>
 80075c2:	e002      	b.n	80075ca <_modbus_receive_msg+0x2e>
        } else {
            printf("Waiting for a confirmation...\n");
 80075c4:	4895      	ldr	r0, [pc, #596]	@ (800781c <_modbus_receive_msg+0x280>)
 80075c6:	f002 f9a5 	bl	8009914 <puts>
        }
    }

    if (!ctx->backend->is_connected(ctx)) {
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	4798      	blx	r3
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10e      	bne.n	80075f8 <_modbus_receive_msg+0x5c>
        if (ctx->debug) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <_modbus_receive_msg+0x56>
            fprintf(stderr, "ERROR The connection is not established.\n");
 80075e2:	4b8f      	ldr	r3, [pc, #572]	@ (8007820 <_modbus_receive_msg+0x284>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2229      	movs	r2, #41	@ 0x29
 80075ea:	2101      	movs	r1, #1
 80075ec:	488d      	ldr	r0, [pc, #564]	@ (8007824 <_modbus_receive_msg+0x288>)
 80075ee:	f002 f8df 	bl	80097b0 <fwrite>
        }
        return -1;
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295
 80075f6:	e17e      	b.n	80078f6 <_modbus_receive_msg+0x35a>
    }

    /* Add a file descriptor to the set */
    FD_ZERO(&rset);
 80075f8:	f107 0320 	add.w	r3, r7, #32
 80075fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80075fe:	2302      	movs	r3, #2
 8007600:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007602:	e007      	b.n	8007614 <_modbus_receive_msg+0x78>
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	3b01      	subs	r3, #1
 8007608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800760e:	2100      	movs	r1, #0
 8007610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f4      	bne.n	8007604 <_modbus_receive_msg+0x68>
    FD_SET(ctx->s, &rset);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	da00      	bge.n	8007624 <_modbus_receive_msg+0x88>
 8007622:	331f      	adds	r3, #31
 8007624:	115b      	asrs	r3, r3, #5
 8007626:	461a      	mov	r2, r3
 8007628:	0093      	lsls	r3, r2, #2
 800762a:	3350      	adds	r3, #80	@ 0x50
 800762c:	443b      	add	r3, r7
 800762e:	f853 1c30 	ldr.w	r1, [r3, #-48]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2001      	movs	r0, #1
 800763c:	fa00 f303 	lsl.w	r3, r0, r3
 8007640:	4319      	orrs	r1, r3
 8007642:	0093      	lsls	r3, r2, #2
 8007644:	3350      	adds	r3, #80	@ 0x50
 8007646:	443b      	add	r3, r7
 8007648:	f843 1c30 	str.w	r1, [r3, #-48]

    /* We need to analyse the message step by step.  At the first step, we want
     * to reach the function code because all packets contain this
     * information. */
    step = _STEP_FUNCTION;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    length_to_read = ctx->backend->header_length + 1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	3301      	adds	r3, #1
 800765a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (msg_type == MSG_INDICATION) {
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d117      	bne.n	8007692 <_modbus_receive_msg+0xf6>
        /* Wait for a message, we don't know when the message will be
         * received */
        if (ctx->indication_timeout.tv_sec == 0 && ctx->indication_timeout.tv_usec == 0) {
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007668:	4313      	orrs	r3, r2
 800766a:	d106      	bne.n	800767a <_modbus_receive_msg+0xde>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <_modbus_receive_msg+0xde>
            /* By default, the indication timeout isn't set */
            p_tv = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007678:	e016      	b.n	80076a8 <_modbus_receive_msg+0x10c>
        } else {
            /* Wait for an indication (name of a received request by a server, see schema)
             */
            tv.tv_sec = ctx->indication_timeout.tv_sec;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007680:	e9c7 2304 	strd	r2, r3, [r7, #16]
            tv.tv_usec = ctx->indication_timeout.tv_usec;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	61bb      	str	r3, [r7, #24]
            p_tv = &tv;
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007690:	e11e      	b.n	80078d0 <_modbus_receive_msg+0x334>
        }
    } else {
        tv.tv_sec = ctx->response_timeout.tv_sec;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007698:	e9c7 2304 	strd	r2, r3, [r7, #16]
        tv.tv_usec = ctx->response_timeout.tv_usec;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	61bb      	str	r3, [r7, #24]
        p_tv = &tv;
 80076a2:	f107 0310 	add.w	r3, r7, #16
 80076a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (length_to_read != 0) {
 80076a8:	e112      	b.n	80078d0 <_modbus_receive_msg+0x334>
        rc = ctx->backend->select(ctx, &rset, p_tv, length_to_read);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ae:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80076b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b2:	f107 0120 	add.w	r1, r7, #32
 80076b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	47a0      	blx	r4
 80076bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (rc == -1) {
 80076be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d12f      	bne.n	8007726 <_modbus_receive_msg+0x18a>
            _error_print(ctx, "select");
 80076c6:	4958      	ldr	r1, [pc, #352]	@ (8007828 <_modbus_receive_msg+0x28c>)
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff fdc9 	bl	8007260 <_error_print>
            if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) {
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d022      	beq.n	8007720 <_modbus_receive_msg+0x184>
                if (wsa_err == WSAENETDOWN || wsa_err == WSAENOTSOCK) {
                    modbus_close(ctx);
                    modbus_connect(ctx);
                }
#else
                int saved_errno = errno;
 80076da:	f002 fc91 	bl	800a000 <__errno>
 80076de:	4603      	mov	r3, r0
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (errno == ETIMEDOUT) {
 80076e4:	f002 fc8c 	bl	800a000 <__errno>
 80076e8:	4603      	mov	r3, r0
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b74      	cmp	r3, #116	@ 0x74
 80076ee:	d106      	bne.n	80076fe <_modbus_receive_msg+0x162>
                    _sleep_response_timeout(ctx);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff fdeb 	bl	80072cc <_sleep_response_timeout>
                    modbus_flush(ctx);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fe06 	bl	8007308 <modbus_flush>
 80076fc:	e00b      	b.n	8007716 <_modbus_receive_msg+0x17a>
                } else if (errno == EBADF) {
 80076fe:	f002 fc7f 	bl	800a000 <__errno>
 8007702:	4603      	mov	r3, r0
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b09      	cmp	r3, #9
 8007708:	d105      	bne.n	8007716 <_modbus_receive_msg+0x17a>
                    modbus_close(ctx);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f001 fb07 	bl	8008d1e <modbus_close>
                    modbus_connect(ctx);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f001 faeb 	bl	8008cec <modbus_connect>
                }
                errno = saved_errno;
 8007716:	f002 fc73 	bl	800a000 <__errno>
 800771a:	4602      	mov	r2, r0
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	6013      	str	r3, [r2, #0]
#endif
            }
            return -1;
 8007720:	f04f 33ff 	mov.w	r3, #4294967295
 8007724:	e0e7      	b.n	80078f6 <_modbus_receive_msg+0x35a>
        }

        rc = ctx->backend->recv(ctx, msg + msg_length, length_to_read);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	4411      	add	r1, r2
 8007732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	4798      	blx	r3
 8007738:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (rc == 0) {
 800773a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d107      	bne.n	8007750 <_modbus_receive_msg+0x1b4>
            errno = ECONNRESET;
 8007740:	f002 fc5e 	bl	800a000 <__errno>
 8007744:	4603      	mov	r3, r0
 8007746:	2268      	movs	r2, #104	@ 0x68
 8007748:	601a      	str	r2, [r3, #0]
            rc = -1;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295
 800774e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        if (rc == -1) {
 8007750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d133      	bne.n	80077c0 <_modbus_receive_msg+0x224>
            _error_print(ctx, "read");
 8007758:	4934      	ldr	r1, [pc, #208]	@ (800782c <_modbus_receive_msg+0x290>)
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fd80 	bl	8007260 <_error_print>
                 wsa_err == WSAECONNRESET)) {
                modbus_close(ctx);
                modbus_connect(ctx);
            }
#else
            if ((ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) &&
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d026      	beq.n	80077ba <_modbus_receive_msg+0x21e>
                (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_TCP) &&
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007770:	681b      	ldr	r3, [r3, #0]
            if ((ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) &&
 8007772:	2b01      	cmp	r3, #1
 8007774:	d121      	bne.n	80077ba <_modbus_receive_msg+0x21e>
                (errno == ECONNRESET || errno == ECONNREFUSED || errno == EBADF)) {
 8007776:	f002 fc43 	bl	800a000 <__errno>
 800777a:	4603      	mov	r3, r0
 800777c:	681b      	ldr	r3, [r3, #0]
                (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_TCP) &&
 800777e:	2b68      	cmp	r3, #104	@ 0x68
 8007780:	d00b      	beq.n	800779a <_modbus_receive_msg+0x1fe>
                (errno == ECONNRESET || errno == ECONNREFUSED || errno == EBADF)) {
 8007782:	f002 fc3d 	bl	800a000 <__errno>
 8007786:	4603      	mov	r3, r0
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b6f      	cmp	r3, #111	@ 0x6f
 800778c:	d005      	beq.n	800779a <_modbus_receive_msg+0x1fe>
 800778e:	f002 fc37 	bl	800a000 <__errno>
 8007792:	4603      	mov	r3, r0
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b09      	cmp	r3, #9
 8007798:	d10f      	bne.n	80077ba <_modbus_receive_msg+0x21e>
                int saved_errno = errno;
 800779a:	f002 fc31 	bl	800a000 <__errno>
 800779e:	4603      	mov	r3, r0
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                modbus_close(ctx);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 faba 	bl	8008d1e <modbus_close>
                modbus_connect(ctx);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f001 fa9e 	bl	8008cec <modbus_connect>
                /* Could be removed by previous calls */
                errno = saved_errno;
 80077b0:	f002 fc26 	bl	800a000 <__errno>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	6013      	str	r3, [r2, #0]
            }
#endif
            return -1;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	e09a      	b.n	80078f6 <_modbus_receive_msg+0x35a>
        }

        /* Display the hex code of each character received */
        if (ctx->debug) {
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d014      	beq.n	80077f2 <_modbus_receive_msg+0x256>
            int i;
            for (i = 0; i < rc; i++)
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	e00d      	b.n	80077ea <_modbus_receive_msg+0x24e>
                printf("<%.2X>", msg[msg_length + i]);
 80077ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d2:	4413      	add	r3, r2
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	4619      	mov	r1, r3
 80077de:	4814      	ldr	r0, [pc, #80]	@ (8007830 <_modbus_receive_msg+0x294>)
 80077e0:	f001 fff4 	bl	80097cc <iprintf>
            for (i = 0; i < rc; i++)
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	3301      	adds	r3, #1
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	dbed      	blt.n	80077ce <_modbus_receive_msg+0x232>
        }

        /* Sums bytes received */
        msg_length += rc;
 80077f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f6:	4413      	add	r3, r2
 80077f8:	643b      	str	r3, [r7, #64]	@ 0x40
        /* Computes remaining bytes */
        length_to_read -= rc;
 80077fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	647b      	str	r3, [r7, #68]	@ 0x44

        if (length_to_read == 0) {
 8007802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007804:	2b00      	cmp	r3, #0
 8007806:	d14a      	bne.n	800789e <_modbus_receive_msg+0x302>
            switch (step) {
 8007808:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800780c:	2b00      	cmp	r3, #0
 800780e:	d011      	beq.n	8007834 <_modbus_receive_msg+0x298>
 8007810:	2b01      	cmp	r3, #1
 8007812:	d024      	beq.n	800785e <_modbus_receive_msg+0x2c2>
                    return -1;
                }
                step = _STEP_DATA;
                break;
            default:
                break;
 8007814:	e043      	b.n	800789e <_modbus_receive_msg+0x302>
 8007816:	bf00      	nop
 8007818:	0800a8c0 	.word	0x0800a8c0
 800781c:	0800a8e0 	.word	0x0800a8e0
 8007820:	2000001c 	.word	0x2000001c
 8007824:	0800a900 	.word	0x0800a900
 8007828:	0800a92c 	.word	0x0800a92c
 800782c:	0800a934 	.word	0x0800a934
 8007830:	0800a93c 	.word	0x0800a93c
                    msg[ctx->backend->header_length], msg_type);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	781b      	ldrb	r3, [r3, #0]
                length_to_read = compute_meta_length_after_function(
 8007840:	461a      	mov	r2, r3
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7ff fe10 	bl	800746c <compute_meta_length_after_function>
 800784c:	4603      	mov	r3, r0
 800784e:	647b      	str	r3, [r7, #68]	@ 0x44
                if (length_to_read != 0) {
 8007850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <_modbus_receive_msg+0x2c2>
                    step = _STEP_META;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    break;
 800785c:	e01f      	b.n	800789e <_modbus_receive_msg+0x302>
                length_to_read = compute_data_length_after_meta(ctx, msg, msg_type);
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	461a      	mov	r2, r3
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff fe48 	bl	80074fa <compute_data_length_after_meta>
 800786a:	4603      	mov	r3, r0
 800786c:	647b      	str	r3, [r7, #68]	@ 0x44
                if ((msg_length + length_to_read) > ctx->backend->max_adu_length) {
 800786e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007872:	441a      	add	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	429a      	cmp	r2, r3
 800787c:	d90b      	bls.n	8007896 <_modbus_receive_msg+0x2fa>
                    errno = EMBBADDATA;
 800787e:	f002 fbbf 	bl	800a000 <__errno>
 8007882:	4603      	mov	r3, r0
 8007884:	4a1e      	ldr	r2, [pc, #120]	@ (8007900 <_modbus_receive_msg+0x364>)
 8007886:	601a      	str	r2, [r3, #0]
                    _error_print(ctx, "too many data");
 8007888:	491e      	ldr	r1, [pc, #120]	@ (8007904 <_modbus_receive_msg+0x368>)
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fce8 	bl	8007260 <_error_print>
                    return -1;
 8007890:	f04f 33ff 	mov.w	r3, #4294967295
 8007894:	e02f      	b.n	80078f6 <_modbus_receive_msg+0x35a>
                step = _STEP_DATA;
 8007896:	2302      	movs	r3, #2
 8007898:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                break;
 800789c:	bf00      	nop
            }
        }

        if (length_to_read > 0 &&
 800789e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d015      	beq.n	80078d0 <_modbus_receive_msg+0x334>
            (ctx->byte_timeout.tv_sec > 0 || ctx->byte_timeout.tv_usec > 0)) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
        if (length_to_read > 0 &&
 80078aa:	2a01      	cmp	r2, #1
 80078ac:	f173 0300 	sbcs.w	r3, r3, #0
 80078b0:	da03      	bge.n	80078ba <_modbus_receive_msg+0x31e>
            (ctx->byte_timeout.tv_sec > 0 || ctx->byte_timeout.tv_usec > 0)) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dd0a      	ble.n	80078d0 <_modbus_receive_msg+0x334>
            /* If there is no character in the buffer, the allowed timeout
               interval between two consecutive bytes is defined by
               byte_timeout */
            tv.tv_sec = ctx->byte_timeout.tv_sec;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80078c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
            tv.tv_usec = ctx->byte_timeout.tv_usec;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	61bb      	str	r3, [r7, #24]
            p_tv = &tv;
 80078ca:	f107 0310 	add.w	r3, r7, #16
 80078ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (length_to_read != 0) {
 80078d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f47f aee9 	bne.w	80076aa <_modbus_receive_msg+0x10e>
        }
        /* else timeout isn't set again, the full response must be read before
           expiration of response timeout (for CONFIRMATION only) */
    }

    if (ctx->debug)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <_modbus_receive_msg+0x34a>
        printf("\n");
 80078e0:	200a      	movs	r0, #10
 80078e2:	f001 ffb9 	bl	8009858 <putchar>

    return ctx->backend->check_integrity(ctx, msg, msg_length);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	4798      	blx	r3
 80078f4:	4603      	mov	r3, r0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3754      	adds	r7, #84	@ 0x54
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}
 80078fe:	bf00      	nop
 8007900:	06b2425b 	.word	0x06b2425b
 8007904:	0800a944 	.word	0x0800a944

08007908 <modbus_receive>:

/* Receive the request from a modbus master */
int modbus_receive(modbus_t *ctx, uint8_t *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d107      	bne.n	8007928 <modbus_receive+0x20>
        errno = EINVAL;
 8007918:	f002 fb72 	bl	800a000 <__errno>
 800791c:	4603      	mov	r3, r0
 800791e:	2216      	movs	r2, #22
 8007920:	601a      	str	r2, [r3, #0]
        return -1;
 8007922:	f04f 33ff 	mov.w	r3, #4294967295
 8007926:	e006      	b.n	8007936 <modbus_receive+0x2e>
    }

    return ctx->backend->receive(ctx, req);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <response_io_status>:
    return rc;
}

static int
response_io_status(uint8_t *tab_io_status, int address, int nb, uint8_t *rsp, int offset)
{
 800793e:	b480      	push	{r7}
 8007940:	b089      	sub	sp, #36	@ 0x24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	603b      	str	r3, [r7, #0]
    int shift = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
    /* Instead of byte (not allowed in Win32) */
    int one_byte = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    int i;

    for (i = address; i < address + nb; i++) {
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e021      	b.n	800799e <response_io_status+0x60>
        one_byte |= tab_io_status[i] << shift;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4313      	orrs	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        if (shift == 7) {
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	2b07      	cmp	r3, #7
 8007974:	d10d      	bne.n	8007992 <response_io_status+0x54>
            /* Byte is full */
            rsp[offset++] = one_byte;
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800797c:	461a      	mov	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	4413      	add	r3, r2
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	701a      	strb	r2, [r3, #0]
            one_byte = shift = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e002      	b.n	8007998 <response_io_status+0x5a>
        } else {
            shift++;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3301      	adds	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
    for (i = address; i < address + nb; i++) {
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3301      	adds	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	dbd7      	blt.n	800795a <response_io_status+0x1c>
        }
    }

    if (shift != 0)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <response_io_status+0x84>
        rsp[offset++] = one_byte;
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80079b6:	461a      	mov	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	4413      	add	r3, r2
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]

    return offset;
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3724      	adds	r7, #36	@ 0x24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr
	...

080079d0 <response_exception>:
                              int exception_code,
                              uint8_t *rsp,
                              unsigned int to_flush,
                              const char *template,
                              ...)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
    int rsp_length;

    /* Print debug message */
    if (ctx->debug) {
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <response_exception+0x2c>
        va_list ap;

        va_start(ap, template);
 80079e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079ea:	613b      	str	r3, [r7, #16]
        vfprintf(stderr, template, ap);
 80079ec:	4b15      	ldr	r3, [pc, #84]	@ (8007a44 <response_exception+0x74>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fbf2 	bl	80091e0 <vfiprintf>
        va_end(ap);
    }

    /* Flush if required */
    if (to_flush) {
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <response_exception+0x3e>
        _sleep_response_timeout(ctx);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fc62 	bl	80072cc <_sleep_response_timeout>
        modbus_flush(ctx);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff fc7d 	bl	8007308 <modbus_flush>
    }

    /* Build exception response */
    sft->function = sft->function + 0x80;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	605a      	str	r2, [r3, #4]
    rsp_length = ctx->backend->build_response_basis(sft, rsp);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	68b8      	ldr	r0, [r7, #8]
 8007a24:	4798      	blx	r3
 8007a26:	6178      	str	r0, [r7, #20]
    rsp[rsp_length++] = exception_code;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	617a      	str	r2, [r7, #20]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	4413      	add	r3, r2
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]

    return rsp_length;
 8007a3a:	697b      	ldr	r3, [r7, #20]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	2000001c 	.word	0x2000001c

08007a48 <modbus_reply>:
*/
int modbus_reply(modbus_t *ctx,
                 const uint8_t *req,
                 int req_length,
                 modbus_mapping_t *mb_mapping)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b0fd      	sub	sp, #500	@ 0x1f4
 8007a4c:	af06      	add	r7, sp, #24
 8007a4e:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8007a52:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007a5c:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8007a60:	6001      	str	r1, [r0, #0]
 8007a62:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007a66:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007a6a:	600a      	str	r2, [r1, #0]
 8007a6c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007a70:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007a74:	6013      	str	r3, [r2, #0]
    unsigned int offset;
    int slave;
    int function;
    uint16_t address;
    uint8_t rsp[MAX_MESSAGE_LENGTH];
    int rsp_length = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    sft_t sft;

    if (ctx == NULL) {
 8007a7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a80:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d108      	bne.n	8007a9c <modbus_reply+0x54>
        errno = EINVAL;
 8007a8a:	f002 fab9 	bl	800a000 <__errno>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2216      	movs	r2, #22
 8007a92:	601a      	str	r2, [r3, #0]
        return -1;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	f001 b875 	b.w	8008b86 <modbus_reply+0x113e>
    }

    offset = ctx->backend->header_length;
 8007a9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007aa0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    slave = req[offset - 1];
 8007aae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007ab8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    function = req[offset];
 8007ac6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007aca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    address = (req[offset + 1] << 8) + req[offset + 2];
 8007adc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007ae6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8007af8:	3202      	adds	r2, #2
 8007afa:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007afe:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8007b02:	6809      	ldr	r1, [r1, #0]
 8007b04:	440a      	add	r2, r1
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f8a7 31b2 	strh.w	r3, [r7, #434]	@ 0x1b2

    sft.slave = slave;
 8007b0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b12:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007b16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8007b1a:	601a      	str	r2, [r3, #0]
    sft.function = function;
 8007b1c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b20:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007b24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8007b28:	605a      	str	r2, [r3, #4]
    sft.t_id = ctx->backend->prepare_response_tid(req, &req_length);
 8007b2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b2e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	1d39      	adds	r1, r7, #4
 8007b3a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007b3e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007b42:	6810      	ldr	r0, [r2, #0]
 8007b44:	4798      	blx	r3
 8007b46:	4602      	mov	r2, r0
 8007b48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b4c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007b50:	609a      	str	r2, [r3, #8]

    /* Data are flushed on illegal number of values errors. */
    switch (function) {
 8007b52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b16      	cmp	r3, #22
 8007b5a:	f200 87d8 	bhi.w	8008b0e <modbus_reply+0x10c6>
 8007b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b64 <modbus_reply+0x11c>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007dc3 	.word	0x08007dc3
 8007b70:	08007dc3 	.word	0x08007dc3
 8007b74:	0800800f 	.word	0x0800800f
 8007b78:	0800813d 	.word	0x0800813d
 8007b7c:	0800864d 	.word	0x0800864d
 8007b80:	08008b0f 	.word	0x08008b0f
 8007b84:	08008b0f 	.word	0x08008b0f
 8007b88:	08008b0f 	.word	0x08008b0f
 8007b8c:	08008b0f 	.word	0x08008b0f
 8007b90:	08008b0f 	.word	0x08008b0f
 8007b94:	08008b0f 	.word	0x08008b0f
 8007b98:	08008b0f 	.word	0x08008b0f
 8007b9c:	0800821d 	.word	0x0800821d
 8007ba0:	080083bf 	.word	0x080083bf
 8007ba4:	080085a3 	.word	0x080085a3
 8007ba8:	08008b0f 	.word	0x08008b0f
 8007bac:	08008b0f 	.word	0x08008b0f
 8007bb0:	08008b0f 	.word	0x08008b0f
 8007bb4:	08008b0f 	.word	0x08008b0f
 8007bb8:	0800867d 	.word	0x0800867d
 8007bbc:	080087e5 	.word	0x080087e5
    case MODBUS_FC_READ_COILS:
    case MODBUS_FC_READ_DISCRETE_INPUTS: {
        unsigned int is_input = (function == MODBUS_FC_READ_DISCRETE_INPUTS);
 8007bc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	bf0c      	ite	eq
 8007bc8:	2301      	moveq	r3, #1
 8007bca:	2300      	movne	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
        int start_bits = is_input ? mb_mapping->start_input_bits : mb_mapping->start_bits;
 8007bd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d006      	beq.n	8007be8 <modbus_reply+0x1a0>
 8007bda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007bde:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	e005      	b.n	8007bf4 <modbus_reply+0x1ac>
 8007be8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007bec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        int nb_bits = is_input ? mb_mapping->nb_input_bits : mb_mapping->nb_bits;
 8007bf8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <modbus_reply+0x1c6>
 8007c00:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c04:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	e005      	b.n	8007c1a <modbus_reply+0x1d2>
 8007c0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c12:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        uint8_t *tab_bits = is_input ? mb_mapping->tab_input_bits : mb_mapping->tab_bits;
 8007c1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d006      	beq.n	8007c34 <modbus_reply+0x1ec>
 8007c26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	e005      	b.n	8007c40 <modbus_reply+0x1f8>
 8007c34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        const char *const name = is_input ? "read_input_bits" : "read_bits";
 8007c44:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <modbus_reply+0x208>
 8007c4c:	4bbc      	ldr	r3, [pc, #752]	@ (8007f40 <modbus_reply+0x4f8>)
 8007c4e:	e000      	b.n	8007c52 <modbus_reply+0x20a>
 8007c50:	4bbc      	ldr	r3, [pc, #752]	@ (8007f44 <modbus_reply+0x4fc>)
 8007c52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        int nb = (req[offset + 3] << 8) + req[offset + 4];
 8007c56:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007c5a:	3303      	adds	r3, #3
 8007c5c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007c60:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8007c70:	3204      	adds	r2, #4
 8007c72:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007c76:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8007c7a:	6809      	ldr	r1, [r1, #0]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	4413      	add	r3, r2
 8007c82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        /* The mapping can be shifted to reduce memory consumption and it
           doesn't always start at address zero. */
        int mapping_address = address - start_bits;
 8007c86:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8007c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

        if (nb < 1 || MODBUS_MAX_READ_BITS < nb) {
 8007c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dd04      	ble.n	8007ca6 <modbus_reply+0x25e>
 8007c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ca0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007ca4:	dd1c      	ble.n	8007ce0 <modbus_reply+0x298>
            rsp_length = response_exception(ctx,
 8007ca6:	f107 0220 	add.w	r2, r7, #32
 8007caa:	f107 0114 	add.w	r1, r7, #20
 8007cae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007cb2:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 8007cb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8007f48 <modbus_reply+0x500>)
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	6800      	ldr	r0, [r0, #0]
 8007cd6:	f7ff fe7b 	bl	80079d0 <response_exception>
 8007cda:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8007cde:	e06e      	b.n	8007dbe <modbus_reply+0x376>
                                            TRUE,
                                            "Illegal nb of values %d in %s (max %d)\n",
                                            nb,
                                            name,
                                            MODBUS_MAX_READ_BITS);
        } else if (mapping_address < 0 || (mapping_address + nb) > nb_bits) {
 8007ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db08      	blt.n	8007cfa <modbus_reply+0x2b2>
 8007ce8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	da23      	bge.n	8007d42 <modbus_reply+0x2fa>
            rsp_length = response_exception(ctx,
 8007cfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da02      	bge.n	8007d08 <modbus_reply+0x2c0>
 8007d02:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8007d06:	e004      	b.n	8007d12 <modbus_reply+0x2ca>
                                            &sft,
                                            MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
                                            rsp,
                                            FALSE,
                                            "Illegal data address 0x%0X in %s\n",
                                            mapping_address < 0 ? address : address + nb,
 8007d08:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
            rsp_length = response_exception(ctx,
 8007d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d10:	4413      	add	r3, r2
 8007d12:	f107 0420 	add.w	r4, r7, #32
 8007d16:	f107 0114 	add.w	r1, r7, #20
 8007d1a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007d1e:	f5a2 70e6 	sub.w	r0, r2, #460	@ 0x1cc
 8007d22:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	4b88      	ldr	r3, [pc, #544]	@ (8007f4c <modbus_reply+0x504>)
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4623      	mov	r3, r4
 8007d34:	2202      	movs	r2, #2
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	f7ff fe4a 	bl	80079d0 <response_exception>
 8007d3c:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8007d40:	e03d      	b.n	8007dbe <modbus_reply+0x376>
                                            name);
        } else {
            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 8007d42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d46:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f107 0120 	add.w	r1, r7, #32
 8007d54:	f107 0214 	add.w	r2, r7, #20
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp[rsp_length++] = (nb / 8) + ((nb % 8) ? 1 : 0);
 8007d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da00      	bge.n	8007d6a <modbus_reply+0x322>
 8007d68:	3307      	adds	r3, #7
 8007d6a:	10db      	asrs	r3, r3, #3
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	2300      	moveq	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	4618      	mov	r0, r3
 8007d82:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	f8c7 11d4 	str.w	r1, [r7, #468]	@ 0x1d4
 8007d8c:	4402      	add	r2, r0
 8007d8e:	b2d1      	uxtb	r1, r2
 8007d90:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007d94:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8007d98:	54d1      	strb	r1, [r2, r3]
            rsp_length =
                response_io_status(tab_bits, mapping_address, nb, rsp, rsp_length);
 8007d9a:	f107 0220 	add.w	r2, r7, #32
 8007d9e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007daa:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8007dae:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8007db2:	f7ff fdc4 	bl	800793e <response_io_status>
 8007db6:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
        }
    } break;
 8007dba:	f000 bebf 	b.w	8008b3c <modbus_reply+0x10f4>
 8007dbe:	f000 bebd 	b.w	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_READ_HOLDING_REGISTERS:
    case MODBUS_FC_READ_INPUT_REGISTERS: {
        unsigned int is_input = (function == MODBUS_FC_READ_INPUT_REGISTERS);
 8007dc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	bf0c      	ite	eq
 8007dca:	2301      	moveq	r3, #1
 8007dcc:	2300      	movne	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
        int start_registers =
            is_input ? mb_mapping->start_input_registers : mb_mapping->start_registers;
 8007dd4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <modbus_reply+0x3a2>
 8007ddc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007de0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	e005      	b.n	8007df6 <modbus_reply+0x3ae>
 8007dea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007dee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
        int start_registers =
 8007df6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        int nb_registers =
            is_input ? mb_mapping->nb_input_registers : mb_mapping->nb_registers;
 8007dfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <modbus_reply+0x3c8>
 8007e02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e06:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	e005      	b.n	8007e1c <modbus_reply+0x3d4>
 8007e10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
        int nb_registers =
 8007e1c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        uint16_t *tab_registers =
            is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers;
 8007e20:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <modbus_reply+0x3ee>
 8007e28:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	e005      	b.n	8007e42 <modbus_reply+0x3fa>
 8007e36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        uint16_t *tab_registers =
 8007e42:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        const char *const name = is_input ? "read_input_registers" : "read_registers";
 8007e46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <modbus_reply+0x40a>
 8007e4e:	4b40      	ldr	r3, [pc, #256]	@ (8007f50 <modbus_reply+0x508>)
 8007e50:	e000      	b.n	8007e54 <modbus_reply+0x40c>
 8007e52:	4b40      	ldr	r3, [pc, #256]	@ (8007f54 <modbus_reply+0x50c>)
 8007e54:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
        int nb = (req[offset + 3] << 8) + req[offset + 4];
 8007e58:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007e5c:	3303      	adds	r3, #3
 8007e5e:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007e62:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8007e72:	3204      	adds	r2, #4
 8007e74:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007e78:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8007e7c:	6809      	ldr	r1, [r1, #0]
 8007e7e:	440a      	add	r2, r1
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	4413      	add	r3, r2
 8007e84:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
        /* The mapping can be shifted to reduce memory consumption and it
           doesn't always start at address zero. */
        int mapping_address = address - start_registers;
 8007e88:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8007e8c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

        if (nb < 1 || MODBUS_MAX_READ_REGISTERS < nb) {
 8007e96:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dd03      	ble.n	8007ea6 <modbus_reply+0x45e>
 8007e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ea2:	2b7d      	cmp	r3, #125	@ 0x7d
 8007ea4:	dd1b      	ble.n	8007ede <modbus_reply+0x496>
            rsp_length = response_exception(ctx,
 8007ea6:	f107 0220 	add.w	r2, r7, #32
 8007eaa:	f107 0114 	add.w	r1, r7, #20
 8007eae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007eb2:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 8007eb6:	237d      	movs	r3, #125	@ 0x7d
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	4b20      	ldr	r3, [pc, #128]	@ (8007f48 <modbus_reply+0x500>)
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	f7ff fd7c 	bl	80079d0 <response_exception>
 8007ed8:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8007edc:	e095      	b.n	800800a <modbus_reply+0x5c2>
                                            TRUE,
                                            "Illegal nb of values %d in %s (max %d)\n",
                                            nb,
                                            name,
                                            MODBUS_MAX_READ_REGISTERS);
        } else if (mapping_address < 0 || (mapping_address + nb) > nb_registers) {
 8007ede:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db08      	blt.n	8007ef8 <modbus_reply+0x4b0>
 8007ee6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8007eea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007eee:	4413      	add	r3, r2
 8007ef0:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	da2f      	bge.n	8007f58 <modbus_reply+0x510>
            rsp_length = response_exception(ctx,
 8007ef8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da02      	bge.n	8007f06 <modbus_reply+0x4be>
 8007f00:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8007f04:	e004      	b.n	8007f10 <modbus_reply+0x4c8>
                                            &sft,
                                            MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
                                            rsp,
                                            FALSE,
                                            "Illegal data address 0x%0X in %s\n",
                                            mapping_address < 0 ? address : address + nb,
 8007f06:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
            rsp_length = response_exception(ctx,
 8007f0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007f0e:	4413      	add	r3, r2
 8007f10:	f107 0420 	add.w	r4, r7, #32
 8007f14:	f107 0114 	add.w	r1, r7, #20
 8007f18:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007f1c:	f5a2 70e6 	sub.w	r0, r2, #460	@ 0x1cc
 8007f20:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8007f24:	9203      	str	r2, [sp, #12]
 8007f26:	9302      	str	r3, [sp, #8]
 8007f28:	4b08      	ldr	r3, [pc, #32]	@ (8007f4c <modbus_reply+0x504>)
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	4623      	mov	r3, r4
 8007f32:	2202      	movs	r2, #2
 8007f34:	6800      	ldr	r0, [r0, #0]
 8007f36:	f7ff fd4b 	bl	80079d0 <response_exception>
 8007f3a:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8007f3e:	e064      	b.n	800800a <modbus_reply+0x5c2>
 8007f40:	0800aa18 	.word	0x0800aa18
 8007f44:	0800aa28 	.word	0x0800aa28
 8007f48:	0800aa34 	.word	0x0800aa34
 8007f4c:	0800aa5c 	.word	0x0800aa5c
 8007f50:	0800aa80 	.word	0x0800aa80
 8007f54:	0800aa98 	.word	0x0800aa98
                                            name);
        } else {
            int i;

            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 8007f58:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f5c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f107 0120 	add.w	r1, r7, #32
 8007f6a:	f107 0214 	add.w	r2, r7, #20
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
 8007f72:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp[rsp_length++] = nb << 1;
 8007f76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007f80:	1c59      	adds	r1, r3, #1
 8007f82:	f8c7 11d4 	str.w	r1, [r7, #468]	@ 0x1d4
 8007f86:	0052      	lsls	r2, r2, #1
 8007f88:	b2d1      	uxtb	r1, r2
 8007f8a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007f8e:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8007f92:	54d1      	strb	r1, [r2, r3]
            for (i = mapping_address; i < mapping_address + nb; i++) {
 8007f94:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007f98:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007f9c:	e02a      	b.n	8007ff4 <modbus_reply+0x5ac>
                rsp[rsp_length++] = tab_registers[i] >> 8;
 8007f9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	b299      	uxth	r1, r3
 8007fb0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8007fba:	b2c9      	uxtb	r1, r1
 8007fbc:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007fc0:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8007fc4:	54d1      	strb	r1, [r2, r3]
                rsp[rsp_length++] = tab_registers[i] & 0xFF;
 8007fc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007fd0:	4413      	add	r3, r2
 8007fd2:	8819      	ldrh	r1, [r3, #0]
 8007fd4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8007fde:	b2c9      	uxtb	r1, r1
 8007fe0:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007fe4:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8007fe8:	54d1      	strb	r1, [r2, r3]
            for (i = mapping_address; i < mapping_address + nb; i++) {
 8007fea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007fee:	3301      	adds	r3, #1
 8007ff0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007ff4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8007ff8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8008002:	429a      	cmp	r2, r3
 8008004:	dbcb      	blt.n	8007f9e <modbus_reply+0x556>
            }
        }
    } break;
 8008006:	f000 bd99 	b.w	8008b3c <modbus_reply+0x10f4>
 800800a:	f000 bd97 	b.w	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_WRITE_SINGLE_COIL: {
        int mapping_address = address - mb_mapping->start_bits;
 800800e:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8008012:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008016:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

        if (mapping_address < 0 || mapping_address >= mb_mapping->nb_bits) {
 8008024:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8008028:	2b00      	cmp	r3, #0
 800802a:	db09      	blt.n	8008040 <modbus_reply+0x5f8>
 800802c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008030:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800803c:	429a      	cmp	r2, r3
 800803e:	db16      	blt.n	800806e <modbus_reply+0x626>
            rsp_length = response_exception(ctx,
 8008040:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8008044:	f107 0220 	add.w	r2, r7, #32
 8008048:	f107 0114 	add.w	r1, r7, #20
 800804c:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008050:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8008054:	9302      	str	r3, [sp, #8]
 8008056:	4bb7      	ldr	r3, [pc, #732]	@ (8008334 <modbus_reply+0x8ec>)
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2300      	movs	r3, #0
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	2202      	movs	r2, #2
 8008062:	6800      	ldr	r0, [r0, #0]
 8008064:	f7ff fcb4 	bl	80079d0 <response_exception>
 8008068:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 800806c:	e064      	b.n	8008138 <modbus_reply+0x6f0>
                                            rsp,
                                            FALSE,
                                            "Illegal data address 0x%0X in write_bit\n",
                                            address);
        } else {
            int data = (req[offset + 3] << 8) + req[offset + 4];
 800806e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008072:	3303      	adds	r3, #3
 8008074:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008078:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	4413      	add	r3, r2
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008088:	3204      	adds	r2, #4
 800808a:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800808e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008092:	6809      	ldr	r1, [r1, #0]
 8008094:	440a      	add	r2, r1
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	4413      	add	r3, r2
 800809a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

            if (data == 0xFF00 || data == 0x0) {
 800809e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80080a2:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80080a6:	d003      	beq.n	80080b0 <modbus_reply+0x668>
 80080a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d128      	bne.n	8008102 <modbus_reply+0x6ba>
                mb_mapping->tab_bits[mapping_address] = data ? ON : OFF;
 80080b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf14      	ite	ne
 80080b8:	2301      	movne	r3, #1
 80080ba:	2300      	moveq	r3, #0
 80080bc:	b2d9      	uxtb	r1, r3
 80080be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080c2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80080ce:	4413      	add	r3, r2
 80080d0:	460a      	mov	r2, r1
 80080d2:	701a      	strb	r2, [r3, #0]
                memcpy(rsp, req, req_length);
 80080d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80080e8:	f107 0020 	add.w	r0, r7, #32
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	f001 ffca 	bl	800a086 <memcpy>
                rsp_length = req_length;
 80080f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8008100:	e01a      	b.n	8008138 <modbus_reply+0x6f0>
            } else {
                rsp_length = response_exception(
 8008102:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8008106:	f107 0220 	add.w	r2, r7, #32
 800810a:	f107 0114 	add.w	r1, r7, #20
 800810e:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008112:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	4b86      	ldr	r3, [pc, #536]	@ (8008338 <modbus_reply+0x8f0>)
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	2203      	movs	r2, #3
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	f7ff fc50 	bl	80079d0 <response_exception>
 8008130:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
                    "Illegal data value 0x%0X in write_bit request at address %0X\n",
                    data,
                    address);
            }
        }
    } break;
 8008134:	f000 bd02 	b.w	8008b3c <modbus_reply+0x10f4>
 8008138:	f000 bd00 	b.w	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_WRITE_SINGLE_REGISTER: {
        int mapping_address = address - mb_mapping->start_registers;
 800813c:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8008140:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008144:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

        if (mapping_address < 0 || mapping_address >= mb_mapping->nb_registers) {
 8008152:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8008156:	2b00      	cmp	r3, #0
 8008158:	db09      	blt.n	800816e <modbus_reply+0x726>
 800815a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800815e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800816a:	429a      	cmp	r2, r3
 800816c:	db18      	blt.n	80081a0 <modbus_reply+0x758>
            rsp_length =
                response_exception(ctx,
 800816e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8008172:	f107 0220 	add.w	r2, r7, #32
 8008176:	f107 0114 	add.w	r1, r7, #20
 800817a:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 800817e:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8008182:	9302      	str	r3, [sp, #8]
 8008184:	4b6d      	ldr	r3, [pc, #436]	@ (800833c <modbus_reply+0x8f4>)
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	2300      	movs	r3, #0
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	2202      	movs	r2, #2
 8008190:	6800      	ldr	r0, [r0, #0]
 8008192:	f7ff fc1d 	bl	80079d0 <response_exception>
 8008196:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp_length =
 800819a:	bf00      	nop

            mb_mapping->tab_registers[mapping_address] = data;
            memcpy(rsp, req, req_length);
            rsp_length = req_length;
        }
    } break;
 800819c:	f000 bcce 	b.w	8008b3c <modbus_reply+0x10f4>
            int data = (req[offset + 3] << 8) + req[offset + 4];
 80081a0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80081a4:	3303      	adds	r3, #3
 80081a6:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80081aa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	4413      	add	r3, r2
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80081ba:	3204      	adds	r2, #4
 80081bc:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80081c0:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80081c4:	6809      	ldr	r1, [r1, #0]
 80081c6:	440a      	add	r2, r1
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	4413      	add	r3, r2
 80081cc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
            mb_mapping->tab_registers[mapping_address] = data;
 80081d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081d4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80081e8:	b292      	uxth	r2, r2
 80081ea:	801a      	strh	r2, [r3, #0]
            memcpy(rsp, req, req_length);
 80081ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008200:	f107 0020 	add.w	r0, r7, #32
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	f001 ff3e 	bl	800a086 <memcpy>
            rsp_length = req_length;
 800820a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800820e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    } break;
 8008218:	f000 bc90 	b.w	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_WRITE_MULTIPLE_COILS: {
        int nb = (req[offset + 3] << 8) + req[offset + 4];
 800821c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008220:	3303      	adds	r3, #3
 8008222:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008226:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	4413      	add	r3, r2
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008236:	3204      	adds	r2, #4
 8008238:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800823c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008240:	6809      	ldr	r1, [r1, #0]
 8008242:	440a      	add	r2, r1
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	4413      	add	r3, r2
 8008248:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
        int nb_bits = req[offset + 5];
 800824c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008250:	3305      	adds	r3, #5
 8008252:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008256:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	4413      	add	r3, r2
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        int mapping_address = address - mb_mapping->start_bits;
 8008264:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8008268:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800826c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

        if (nb < 1 || MODBUS_MAX_WRITE_BITS < nb || nb_bits * 8 < nb) {
 800827a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd0b      	ble.n	800829a <modbus_reply+0x852>
 8008282:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008286:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 800828a:	dc06      	bgt.n	800829a <modbus_reply+0x852>
 800828c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8008296:	429a      	cmp	r2, r3
 8008298:	dd19      	ble.n	80082ce <modbus_reply+0x886>
            /* May be the indication has been truncated on reading because of
             * invalid address (eg. nb is 0 but the request contains values to
             * write) so it's necessary to flush. */
            rsp_length =
                response_exception(ctx,
 800829a:	f107 0220 	add.w	r2, r7, #32
 800829e:	f107 0114 	add.w	r1, r7, #20
 80082a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082a6:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 80082aa:	f44f 63f6 	mov.w	r3, #1968	@ 0x7b0
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082b4:	9302      	str	r3, [sp, #8]
 80082b6:	4b22      	ldr	r3, [pc, #136]	@ (8008340 <modbus_reply+0x8f8>)
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	2301      	movs	r3, #1
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	4613      	mov	r3, r2
 80082c0:	2203      	movs	r2, #3
 80082c2:	6800      	ldr	r0, [r0, #0]
 80082c4:	f7ff fb84 	bl	80079d0 <response_exception>
 80082c8:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp_length =
 80082cc:	e076      	b.n	80083bc <modbus_reply+0x974>
                                   rsp,
                                   TRUE,
                                   "Illegal number of values %d in write_bits (max %d)\n",
                                   nb,
                                   MODBUS_MAX_WRITE_BITS);
        } else if (mapping_address < 0 || (mapping_address + nb) > mb_mapping->nb_bits) {
 80082ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db0c      	blt.n	80082f0 <modbus_reply+0x8a8>
 80082d6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80082da:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082de:	441a      	add	r2, r3
 80082e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	dd2b      	ble.n	8008348 <modbus_reply+0x900>
            rsp_length = response_exception(ctx,
 80082f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da02      	bge.n	80082fe <modbus_reply+0x8b6>
 80082f8:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 80082fc:	e004      	b.n	8008308 <modbus_reply+0x8c0>
                                            &sft,
                                            MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
                                            rsp,
                                            FALSE,
                                            "Illegal data address 0x%0X in write_bits\n",
                                            mapping_address < 0 ? address : address + nb);
 80082fe:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
            rsp_length = response_exception(ctx,
 8008302:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008306:	4413      	add	r3, r2
 8008308:	f107 0220 	add.w	r2, r7, #32
 800830c:	f107 0114 	add.w	r1, r7, #20
 8008310:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008314:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8008318:	9302      	str	r3, [sp, #8]
 800831a:	4b0a      	ldr	r3, [pc, #40]	@ (8008344 <modbus_reply+0x8fc>)
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	2202      	movs	r2, #2
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	f7ff fb52 	bl	80079d0 <response_exception>
 800832c:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8008330:	e044      	b.n	80083bc <modbus_reply+0x974>
 8008332:	bf00      	nop
 8008334:	0800aaa8 	.word	0x0800aaa8
 8008338:	0800aad4 	.word	0x0800aad4
 800833c:	0800ab14 	.word	0x0800ab14
 8008340:	0800ab44 	.word	0x0800ab44
 8008344:	0800ab78 	.word	0x0800ab78
        } else {
            /* 6 = byte count */
            modbus_set_bits_from_bytes(
 8008348:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800834c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6a18      	ldr	r0, [r3, #32]
 8008354:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
                mb_mapping->tab_bits, mapping_address, nb, &req[offset + 6]);
 8008358:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800835c:	3306      	adds	r3, #6
            modbus_set_bits_from_bytes(
 800835e:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008362:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	4413      	add	r3, r2
 800836a:	460a      	mov	r2, r1
 800836c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8008370:	f7fe fa76 	bl	8006860 <modbus_set_bits_from_bytes>

            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 8008374:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008378:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f107 0120 	add.w	r1, r7, #32
 8008386:	f107 0214 	add.w	r2, r7, #20
 800838a:	4610      	mov	r0, r2
 800838c:	4798      	blx	r3
 800838e:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            /* 4 to copy the bit address (2) and the quantity of bits */
            memcpy(rsp + rsp_length, req + rsp_length, 4);
 8008392:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008396:	f107 0220 	add.w	r2, r7, #32
 800839a:	4413      	add	r3, r2
 800839c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80083a0:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80083a4:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80083a8:	6809      	ldr	r1, [r1, #0]
 80083aa:	440a      	add	r2, r1
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	601a      	str	r2, [r3, #0]
            rsp_length += 4;
 80083b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80083b4:	3304      	adds	r3, #4
 80083b6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
        }
    } break;
 80083ba:	e3bf      	b.n	8008b3c <modbus_reply+0x10f4>
 80083bc:	e3be      	b.n	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_WRITE_MULTIPLE_REGISTERS: {
        int nb = (req[offset + 3] << 8) + req[offset + 4];
 80083be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80083c2:	3303      	adds	r3, #3
 80083c4:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80083c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80083d8:	3204      	adds	r2, #4
 80083da:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80083de:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80083e2:	6809      	ldr	r1, [r1, #0]
 80083e4:	440a      	add	r2, r1
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	4413      	add	r3, r2
 80083ea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        int nb_bytes = req[offset + 5];
 80083ee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80083f2:	3305      	adds	r3, #5
 80083f4:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80083f8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
        int mapping_address = address - mb_mapping->start_registers;
 8008406:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 800840a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800840e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

        if (nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb || nb_bytes != nb * 2) {
 800841c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd0a      	ble.n	800843a <modbus_reply+0x9f2>
 8008424:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008428:	2b7b      	cmp	r3, #123	@ 0x7b
 800842a:	dc06      	bgt.n	800843a <modbus_reply+0x9f2>
 800842c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8008436:	429a      	cmp	r2, r3
 8008438:	d018      	beq.n	800846c <modbus_reply+0xa24>
            rsp_length = response_exception(
 800843a:	f107 0220 	add.w	r2, r7, #32
 800843e:	f107 0114 	add.w	r1, r7, #20
 8008442:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008446:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 800844a:	237b      	movs	r3, #123	@ 0x7b
 800844c:	9303      	str	r3, [sp, #12]
 800844e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	4ba2      	ldr	r3, [pc, #648]	@ (80086e0 <modbus_reply+0xc98>)
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2301      	movs	r3, #1
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4613      	mov	r3, r2
 800845e:	2203      	movs	r2, #3
 8008460:	6800      	ldr	r0, [r0, #0]
 8008462:	f7ff fab5 	bl	80079d0 <response_exception>
 8008466:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 800846a:	e099      	b.n	80085a0 <modbus_reply+0xb58>
                rsp,
                TRUE,
                "Illegal number of values %d in write_registers (max %d)\n",
                nb,
                MODBUS_MAX_WRITE_REGISTERS);
        } else if (mapping_address < 0 ||
 800846c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008470:	2b00      	cmp	r3, #0
 8008472:	db0c      	blt.n	800848e <modbus_reply+0xa46>
                   (mapping_address + nb) > mb_mapping->nb_registers) {
 8008474:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8008478:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800847c:	441a      	add	r2, r3
 800847e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008482:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699b      	ldr	r3, [r3, #24]
        } else if (mapping_address < 0 ||
 800848a:	429a      	cmp	r2, r3
 800848c:	dd20      	ble.n	80084d0 <modbus_reply+0xa88>
            rsp_length =
                response_exception(ctx,
 800848e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008492:	2b00      	cmp	r3, #0
 8008494:	da02      	bge.n	800849c <modbus_reply+0xa54>
 8008496:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 800849a:	e004      	b.n	80084a6 <modbus_reply+0xa5e>
                                   &sft,
                                   MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
                                   rsp,
                                   FALSE,
                                   "Illegal data address 0x%0X in write_registers\n",
                                   mapping_address < 0 ? address : address + nb);
 800849c:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
                response_exception(ctx,
 80084a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80084a4:	4413      	add	r3, r2
 80084a6:	f107 0220 	add.w	r2, r7, #32
 80084aa:	f107 0114 	add.w	r1, r7, #20
 80084ae:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80084b2:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	4b8a      	ldr	r3, [pc, #552]	@ (80086e4 <modbus_reply+0xc9c>)
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2300      	movs	r3, #0
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	2202      	movs	r2, #2
 80084c4:	6800      	ldr	r0, [r0, #0]
 80084c6:	f7ff fa83 	bl	80079d0 <response_exception>
 80084ca:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp_length =
 80084ce:	e067      	b.n	80085a0 <modbus_reply+0xb58>
        } else {
            int i, j;
            for (i = mapping_address, j = 6; i < mapping_address + nb; i++, j += 2) {
 80084d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80084d4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80084d8:	2306      	movs	r3, #6
 80084da:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80084de:	e032      	b.n	8008546 <modbus_reply+0xafe>
                /* 6 and 7 = first value */
                mb_mapping->tab_registers[i] =
                    (req[offset + j] << 8) + req[offset + j + 1];
 80084e0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80084e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80084e8:	4413      	add	r3, r2
 80084ea:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80084ee:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 8008500:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008504:	440b      	add	r3, r1
 8008506:	3301      	adds	r3, #1
 8008508:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800850c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008510:	6809      	ldr	r1, [r1, #0]
 8008512:	440b      	add	r3, r1
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
                mb_mapping->tab_registers[i] =
 8008518:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800851c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008524:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	440b      	add	r3, r1
                    (req[offset + j] << 8) + req[offset + j + 1];
 800852c:	4402      	add	r2, r0
 800852e:	b292      	uxth	r2, r2
                mb_mapping->tab_registers[i] =
 8008530:	801a      	strh	r2, [r3, #0]
            for (i = mapping_address, j = 6; i < mapping_address + nb; i++, j += 2) {
 8008532:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008536:	3301      	adds	r3, #1
 8008538:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800853c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008540:	3302      	adds	r3, #2
 8008542:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8008546:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800854a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800854e:	4413      	add	r3, r2
 8008550:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008554:	429a      	cmp	r2, r3
 8008556:	dbc3      	blt.n	80084e0 <modbus_reply+0xa98>
            }

            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 8008558:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800855c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f107 0120 	add.w	r1, r7, #32
 800856a:	f107 0214 	add.w	r2, r7, #20
 800856e:	4610      	mov	r0, r2
 8008570:	4798      	blx	r3
 8008572:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            /* 4 to copy the address (2) and the no. of registers */
            memcpy(rsp + rsp_length, req + rsp_length, 4);
 8008576:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800857a:	f107 0220 	add.w	r2, r7, #32
 800857e:	4413      	add	r3, r2
 8008580:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8008584:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008588:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800858c:	6809      	ldr	r1, [r1, #0]
 800858e:	440a      	add	r2, r1
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	601a      	str	r2, [r3, #0]
            rsp_length += 4;
 8008594:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008598:	3304      	adds	r3, #4
 800859a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
        }
    } break;
 800859e:	e2cd      	b.n	8008b3c <modbus_reply+0x10f4>
 80085a0:	e2cc      	b.n	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_REPORT_SLAVE_ID: {
        int str_len;
        int byte_count_pos;

        rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 80085a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085a6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f107 0120 	add.w	r1, r7, #32
 80085b4:	f107 0214 	add.w	r2, r7, #20
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
        /* Skip byte count for now */
        byte_count_pos = rsp_length++;
 80085c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80085ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        rsp[rsp_length++] = _REPORT_SLAVE_ID;
 80085ce:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80085d8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80085dc:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 80085e0:	21b4      	movs	r1, #180	@ 0xb4
 80085e2:	54d1      	strb	r1, [r2, r3]
        /* Run indicator status to ON */
        rsp[rsp_length++] = 0xFF;
 80085e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80085ee:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80085f2:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 80085f6:	21ff      	movs	r1, #255	@ 0xff
 80085f8:	54d1      	strb	r1, [r2, r3]
        /* LMB + length of LIBMODBUS_VERSION_STRING */
        str_len = 3 + strlen(LIBMODBUS_VERSION_STRING);
 80085fa:	2308      	movs	r3, #8
 80085fc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        memcpy(rsp + rsp_length, "LMB" LIBMODBUS_VERSION_STRING, str_len);
 8008600:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008604:	f107 0220 	add.w	r2, r7, #32
 8008608:	4413      	add	r3, r2
 800860a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800860e:	4936      	ldr	r1, [pc, #216]	@ (80086e8 <modbus_reply+0xca0>)
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fd38 	bl	800a086 <memcpy>
        rsp_length += str_len;
 8008616:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800861a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800861e:	4413      	add	r3, r2
 8008620:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
        rsp[byte_count_pos] = rsp_length - byte_count_pos - 1;
 8008624:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008628:	b2da      	uxtb	r2, r3
 800862a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800862e:	b2db      	uxtb	r3, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	b2db      	uxtb	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b2d9      	uxtb	r1, r3
 8008638:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800863c:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008640:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8008644:	4413      	add	r3, r2
 8008646:	460a      	mov	r2, r1
 8008648:	701a      	strb	r2, [r3, #0]
    } break;
 800864a:	e277      	b.n	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_READ_EXCEPTION_STATUS:
        if (ctx->debug) {
 800864c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008650:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <modbus_reply+0xc24>
            fprintf(stderr, "FIXME Not implemented\n");
 800865c:	4b23      	ldr	r3, [pc, #140]	@ (80086ec <modbus_reply+0xca4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2216      	movs	r2, #22
 8008664:	2101      	movs	r1, #1
 8008666:	4822      	ldr	r0, [pc, #136]	@ (80086f0 <modbus_reply+0xca8>)
 8008668:	f001 f8a2 	bl	80097b0 <fwrite>
        }
        errno = ENOPROTOOPT;
 800866c:	f001 fcc8 	bl	800a000 <__errno>
 8008670:	4603      	mov	r3, r0
 8008672:	226d      	movs	r2, #109	@ 0x6d
 8008674:	601a      	str	r2, [r3, #0]
        return -1;
 8008676:	f04f 33ff 	mov.w	r3, #4294967295
 800867a:	e284      	b.n	8008b86 <modbus_reply+0x113e>
        break;
    case MODBUS_FC_MASK_WRITE_REGISTER: {
        int mapping_address = address - mb_mapping->start_registers;
 800867c:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8008680:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008684:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

        if (mapping_address < 0 || mapping_address >= mb_mapping->nb_registers) {
 8008692:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008696:	2b00      	cmp	r3, #0
 8008698:	db09      	blt.n	80086ae <modbus_reply+0xc66>
 800869a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800869e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80086aa:	429a      	cmp	r2, r3
 80086ac:	db24      	blt.n	80086f8 <modbus_reply+0xcb0>
            rsp_length =
                response_exception(ctx,
 80086ae:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 80086b2:	f107 0220 	add.w	r2, r7, #32
 80086b6:	f107 0114 	add.w	r1, r7, #20
 80086ba:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80086be:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 80086c2:	9302      	str	r3, [sp, #8]
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <modbus_reply+0xcac>)
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	2300      	movs	r3, #0
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4613      	mov	r3, r2
 80086ce:	2202      	movs	r2, #2
 80086d0:	6800      	ldr	r0, [r0, #0]
 80086d2:	f7ff f97d 	bl	80079d0 <response_exception>
 80086d6:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp_length =
 80086da:	bf00      	nop
            data = (data & and) | (or &(~and));
            mb_mapping->tab_registers[mapping_address] = data;
            memcpy(rsp, req, req_length);
            rsp_length = req_length;
        }
    } break;
 80086dc:	e22e      	b.n	8008b3c <modbus_reply+0x10f4>
 80086de:	bf00      	nop
 80086e0:	0800aba4 	.word	0x0800aba4
 80086e4:	0800abe0 	.word	0x0800abe0
 80086e8:	0800ac10 	.word	0x0800ac10
 80086ec:	2000001c 	.word	0x2000001c
 80086f0:	0800ac1c 	.word	0x0800ac1c
 80086f4:	0800ab14 	.word	0x0800ab14
            uint16_t data = mb_mapping->tab_registers[mapping_address];
 80086f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80086fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008704:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
            uint16_t and = (req[offset + 3] << 8) + req[offset + 4];
 8008712:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008716:	3303      	adds	r3, #3
 8008718:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800871c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	4413      	add	r3, r2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	b29b      	uxth	r3, r3
 800872a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800872e:	3204      	adds	r2, #4
 8008730:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008734:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008738:	6809      	ldr	r1, [r1, #0]
 800873a:	440a      	add	r2, r1
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	4413      	add	r3, r2
 8008740:	f8a7 3190 	strh.w	r3, [r7, #400]	@ 0x190
            uint16_t or = (req[offset + 5] << 8) + req[offset + 6];
 8008744:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008748:	3305      	adds	r3, #5
 800874a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800874e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	4413      	add	r3, r2
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b29b      	uxth	r3, r3
 800875c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008760:	3206      	adds	r2, #6
 8008762:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008766:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800876a:	6809      	ldr	r1, [r1, #0]
 800876c:	440a      	add	r2, r1
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	4413      	add	r3, r2
 8008772:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
            data = (data & and) | (or &(~and));
 8008776:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 800877a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 800877e:	4013      	ands	r3, r2
 8008780:	b29b      	uxth	r3, r3
 8008782:	b21a      	sxth	r2, r3
 8008784:	f9b7 3190 	ldrsh.w	r3, [r7, #400]	@ 0x190
 8008788:	43db      	mvns	r3, r3
 800878a:	b219      	sxth	r1, r3
 800878c:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	@ 0x18e
 8008790:	400b      	ands	r3, r1
 8008792:	b21b      	sxth	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b21b      	sxth	r3, r3
 8008798:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
            mb_mapping->tab_registers[mapping_address] = data;
 800879c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4413      	add	r3, r2
 80087b0:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 80087b4:	801a      	strh	r2, [r3, #0]
            memcpy(rsp, req, req_length);
 80087b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80087ca:	f107 0020 	add.w	r0, r7, #32
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	f001 fc59 	bl	800a086 <memcpy>
            rsp_length = req_length;
 80087d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    } break;
 80087e2:	e1ab      	b.n	8008b3c <modbus_reply+0x10f4>
    case MODBUS_FC_WRITE_AND_READ_REGISTERS: {
        int nb = (req[offset + 3] << 8) + req[offset + 4];
 80087e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80087e8:	3303      	adds	r3, #3
 80087ea:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80087ee:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80087f2:	6812      	ldr	r2, [r2, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80087fe:	3204      	adds	r2, #4
 8008800:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008804:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008808:	6809      	ldr	r1, [r1, #0]
 800880a:	440a      	add	r2, r1
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	4413      	add	r3, r2
 8008810:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        uint16_t address_write = (req[offset + 5] << 8) + req[offset + 6];
 8008814:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008818:	3305      	adds	r3, #5
 800881a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800881e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	4413      	add	r3, r2
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	b29b      	uxth	r3, r3
 800882c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008830:	3206      	adds	r2, #6
 8008832:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008836:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800883a:	6809      	ldr	r1, [r1, #0]
 800883c:	440a      	add	r2, r1
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	4413      	add	r3, r2
 8008842:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
        int nb_write = (req[offset + 7] << 8) + req[offset + 8];
 8008846:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800884a:	3307      	adds	r3, #7
 800884c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008850:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	4413      	add	r3, r2
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008860:	3208      	adds	r2, #8
 8008862:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008866:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800886a:	6809      	ldr	r1, [r1, #0]
 800886c:	440a      	add	r2, r1
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	4413      	add	r3, r2
 8008872:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
        int nb_write_bytes = req[offset + 9];
 8008876:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800887a:	3309      	adds	r3, #9
 800887c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008880:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	4413      	add	r3, r2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
        int mapping_address = address - mb_mapping->start_registers;
 800888e:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8008892:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008896:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
        int mapping_address_write = address_write - mb_mapping->start_registers;
 80088a4:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	@ 0x1aa
 80088a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

        if (nb_write < 1 || MODBUS_MAX_WR_WRITE_REGISTERS < nb_write || nb < 1 ||
 80088ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dd12      	ble.n	80088e8 <modbus_reply+0xea0>
 80088c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80088c6:	2b79      	cmp	r3, #121	@ 0x79
 80088c8:	dc0e      	bgt.n	80088e8 <modbus_reply+0xea0>
 80088ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd0a      	ble.n	80088e8 <modbus_reply+0xea0>
 80088d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80088d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80088d8:	dc06      	bgt.n	80088e8 <modbus_reply+0xea0>
            MODBUS_MAX_WR_READ_REGISTERS < nb || nb_write_bytes != nb_write * 2) {
 80088da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d01d      	beq.n	8008924 <modbus_reply+0xedc>
            rsp_length = response_exception(
 80088e8:	f107 0220 	add.w	r2, r7, #32
 80088ec:	f107 0114 	add.w	r1, r7, #20
 80088f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088f4:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 80088f8:	237d      	movs	r3, #125	@ 0x7d
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	2379      	movs	r3, #121	@ 0x79
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	4ba0      	ldr	r3, [pc, #640]	@ (8008b90 <modbus_reply+0x1148>)
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	2301      	movs	r3, #1
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	2203      	movs	r2, #3
 8008918:	6800      	ldr	r0, [r0, #0]
 800891a:	f7ff f859 	bl	80079d0 <response_exception>
 800891e:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 8008922:	e0f3      	b.n	8008b0c <modbus_reply+0x10c4>
                "R%d)\n",
                nb_write,
                nb,
                MODBUS_MAX_WR_WRITE_REGISTERS,
                MODBUS_MAX_WR_READ_REGISTERS);
        } else if (mapping_address < 0 ||
 8008924:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008928:	2b00      	cmp	r3, #0
 800892a:	db1d      	blt.n	8008968 <modbus_reply+0xf20>
                   (mapping_address + nb) > mb_mapping->nb_registers ||
 800892c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8008930:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008934:	441a      	add	r2, r3
 8008936:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800893a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699b      	ldr	r3, [r3, #24]
        } else if (mapping_address < 0 ||
 8008942:	429a      	cmp	r2, r3
 8008944:	dc10      	bgt.n	8008968 <modbus_reply+0xf20>
                   (mapping_address + nb) > mb_mapping->nb_registers ||
 8008946:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800894a:	2b00      	cmp	r3, #0
 800894c:	db0c      	blt.n	8008968 <modbus_reply+0xf20>
                   mapping_address_write < 0 ||
                   (mapping_address_write + nb_write) > mb_mapping->nb_registers) {
 800894e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8008952:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008956:	441a      	add	r2, r3
 8008958:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800895c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
                   mapping_address_write < 0 ||
 8008964:	429a      	cmp	r2, r3
 8008966:	dd2d      	ble.n	80089c4 <modbus_reply+0xf7c>
            rsp_length = response_exception(
 8008968:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800896c:	2b00      	cmp	r3, #0
 800896e:	da02      	bge.n	8008976 <modbus_reply+0xf2e>
 8008970:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8008974:	e004      	b.n	8008980 <modbus_reply+0xf38>
                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
                rsp,
                FALSE,
                "Illegal data read address 0x%0X or write address 0x%0X "
                "write_and_read_registers\n",
                mapping_address < 0 ? address : address + nb,
 8008976:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
            rsp_length = response_exception(
 800897a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800897e:	4413      	add	r3, r2
 8008980:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8008984:	2a00      	cmp	r2, #0
 8008986:	da02      	bge.n	800898e <modbus_reply+0xf46>
 8008988:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	@ 0x1aa
 800898c:	e004      	b.n	8008998 <modbus_reply+0xf50>
                mapping_address_write < 0 ? address_write : address_write + nb_write);
 800898e:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	@ 0x1aa
            rsp_length = response_exception(
 8008992:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8008996:	440a      	add	r2, r1
 8008998:	f107 0420 	add.w	r4, r7, #32
 800899c:	f107 0114 	add.w	r1, r7, #20
 80089a0:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80089a4:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 80089a8:	9203      	str	r2, [sp, #12]
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	4b79      	ldr	r3, [pc, #484]	@ (8008b94 <modbus_reply+0x114c>)
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	4623      	mov	r3, r4
 80089b6:	2202      	movs	r2, #2
 80089b8:	6800      	ldr	r0, [r0, #0]
 80089ba:	f7ff f809 	bl	80079d0 <response_exception>
 80089be:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
 80089c2:	e0a3      	b.n	8008b0c <modbus_reply+0x10c4>
        } else {
            int i, j;
            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
 80089c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80089c8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f107 0120 	add.w	r1, r7, #32
 80089d6:	f107 0214 	add.w	r2, r7, #20
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            rsp[rsp_length++] = nb << 1;
 80089e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80089ec:	1c59      	adds	r1, r3, #1
 80089ee:	f8c7 11d4 	str.w	r1, [r7, #468]	@ 0x1d4
 80089f2:	0052      	lsls	r2, r2, #1
 80089f4:	b2d1      	uxtb	r1, r2
 80089f6:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80089fa:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 80089fe:	54d1      	strb	r1, [r2, r3]

            /* Write first.
               10 and 11 are the offset of the first values to write */
            for (i = mapping_address_write, j = 10; i < mapping_address_write + nb_write;
 8008a00:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008a04:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8008a08:	230a      	movs	r3, #10
 8008a0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008a0e:	e032      	b.n	8008a76 <modbus_reply+0x102e>
                 i++, j += 2) {
                mb_mapping->tab_registers[i] =
                    (req[offset + j] << 8) + req[offset + j + 1];
 8008a10:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008a14:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a18:	4413      	add	r3, r2
 8008a1a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008a1e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8008a22:	6812      	ldr	r2, [r2, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8008a30:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a34:	440b      	add	r3, r1
 8008a36:	3301      	adds	r3, #1
 8008a38:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008a3c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8008a40:	6809      	ldr	r1, [r1, #0]
 8008a42:	440b      	add	r3, r1
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	4618      	mov	r0, r3
                mb_mapping->tab_registers[i] =
 8008a48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a4c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008a54:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	440b      	add	r3, r1
                    (req[offset + j] << 8) + req[offset + j + 1];
 8008a5c:	4402      	add	r2, r0
 8008a5e:	b292      	uxth	r2, r2
                mb_mapping->tab_registers[i] =
 8008a60:	801a      	strh	r2, [r3, #0]
                 i++, j += 2) {
 8008a62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a66:	3301      	adds	r3, #1
 8008a68:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8008a6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008a70:	3302      	adds	r3, #2
 8008a72:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
            for (i = mapping_address_write, j = 10; i < mapping_address_write + nb_write;
 8008a76:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8008a7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008a7e:	4413      	add	r3, r2
 8008a80:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8008a84:	429a      	cmp	r2, r3
 8008a86:	dbc3      	blt.n	8008a10 <modbus_reply+0xfc8>
            }

            /* and read the data for the response */
            for (i = mapping_address; i < mapping_address + nb; i++) {
 8008a88:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008a8c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8008a90:	e032      	b.n	8008af8 <modbus_reply+0x10b0>
                rsp[rsp_length++] = mb_mapping->tab_registers[i] >> 8;
 8008a92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	b299      	uxth	r1, r3
 8008aac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8008ab6:	b2c9      	uxtb	r1, r1
 8008ab8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008abc:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8008ac0:	54d1      	strb	r1, [r2, r3]
                rsp[rsp_length++] = mb_mapping->tab_registers[i] & 0xFF;
 8008ac2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ac6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	8819      	ldrh	r1, [r3, #0]
 8008ad8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8008ae2:	b2c9      	uxtb	r1, r1
 8008ae4:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008ae8:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8008aec:	54d1      	strb	r1, [r2, r3]
            for (i = mapping_address; i < mapping_address + nb; i++) {
 8008aee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008af2:	3301      	adds	r3, #1
 8008af4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8008af8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8008afc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008b00:	4413      	add	r3, r2
 8008b02:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8008b06:	429a      	cmp	r2, r3
 8008b08:	dbc3      	blt.n	8008a92 <modbus_reply+0x104a>
            }
        }
    } break;
 8008b0a:	e017      	b.n	8008b3c <modbus_reply+0x10f4>
 8008b0c:	e016      	b.n	8008b3c <modbus_reply+0x10f4>

    default:
        rsp_length = response_exception(ctx,
 8008b0e:	f107 0220 	add.w	r2, r7, #32
 8008b12:	f107 0114 	add.w	r1, r7, #20
 8008b16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b1a:	f5a3 70e6 	sub.w	r0, r3, #460	@ 0x1cc
 8008b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	4b1c      	ldr	r3, [pc, #112]	@ (8008b98 <modbus_reply+0x1150>)
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	2201      	movs	r2, #1
 8008b30:	6800      	ldr	r0, [r0, #0]
 8008b32:	f7fe ff4d 	bl	80079d0 <response_exception>
 8008b36:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
                                        MODBUS_EXCEPTION_ILLEGAL_FUNCTION,
                                        rsp,
                                        TRUE,
                                        "Unknown Modbus function code: 0x%0X\n",
                                        function);
        break;
 8008b3a:	bf00      	nop
    }

    /* Suppress any responses in RTU when the request was a broadcast, excepted when quirk
     * is enabled. */
    if (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&
 8008b3c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b40:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10f      	bne.n	8008b6e <modbus_reply+0x1126>
 8008b4e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10b      	bne.n	8008b6e <modbus_reply+0x1126>
        slave == MODBUS_BROADCAST_ADDRESS &&
        !(ctx->quirks & MODBUS_QUIRK_REPLY_TO_BROADCAST)) {
 8008b56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b5a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0304 	and.w	r3, r3, #4
        slave == MODBUS_BROADCAST_ADDRESS &&
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <modbus_reply+0x1126>
        return 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e00b      	b.n	8008b86 <modbus_reply+0x113e>
    }
    return send_msg(ctx, rsp, rsp_length);
 8008b6e:	f107 0120 	add.w	r1, r7, #32
 8008b72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b76:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b7a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	f7fe fbea 	bl	8007358 <send_msg>
 8008b84:	4603      	mov	r3, r0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd90      	pop	{r4, r7, pc}
 8008b90:	0800ac34 	.word	0x0800ac34
 8008b94:	0800ac80 	.word	0x0800ac80
 8008b98:	0800acd4 	.word	0x0800acd4

08008b9c <_modbus_init_common>:

    return rc;
}

void _modbus_init_common(modbus_t *ctx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    /* Slave and socket are initialized to -1 */
    ctx->slave = -1;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8008baa:	601a      	str	r2, [r3, #0]
    ctx->s = -1;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb2:	605a      	str	r2, [r3, #4]

    ctx->debug = FALSE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	609a      	str	r2, [r3, #8]
    ctx->error_recovery = MODBUS_ERROR_RECOVERY_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	60da      	str	r2, [r3, #12]
    ctx->quirks = MODBUS_QUIRK_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	611a      	str	r2, [r3, #16]

    ctx->response_timeout.tv_sec = 0;
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	f04f 0300 	mov.w	r3, #0
 8008bd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    ctx->response_timeout.tv_usec = _RESPONSE_TIMEOUT;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8008c0c <_modbus_init_common+0x70>)
 8008bd8:	621a      	str	r2, [r3, #32]

    ctx->byte_timeout.tv_sec = 0;
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    ctx->byte_timeout.tv_usec = _BYTE_TIMEOUT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a08      	ldr	r2, [pc, #32]	@ (8008c0c <_modbus_init_common+0x70>)
 8008bec:	631a      	str	r2, [r3, #48]	@ 0x30

    ctx->indication_timeout.tv_sec = 0;
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    ctx->indication_timeout.tv_usec = 0;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr
 8008c0c:	0007a120 	.word	0x0007a120

08008c10 <modbus_set_slave>:

/* Define the slave number */
int modbus_set_slave(modbus_t *ctx, int slave)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <modbus_set_slave+0x20>
        errno = EINVAL;
 8008c20:	f001 f9ee 	bl	800a000 <__errno>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2216      	movs	r2, #22
 8008c28:	601a      	str	r2, [r3, #0]
        return -1;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	e006      	b.n	8008c3e <modbus_set_slave+0x2e>
    }

    return ctx->backend->set_slave(ctx, slave);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	4798      	blx	r3
 8008c3c:	4603      	mov	r3, r0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <modbus_set_response_timeout>:
    *to_usec = ctx->response_timeout.tv_usec;
    return 0;
}

int modbus_set_response_timeout(modbus_t *ctx, uint32_t to_sec, uint32_t to_usec)
{
 8008c48:	b5b0      	push	{r4, r5, r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
    if (ctx == NULL || (to_sec == 0 && to_usec == 0) || to_usec > 999999) {
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <modbus_set_response_timeout+0x26>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <modbus_set_response_timeout+0x1e>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <modbus_set_response_timeout+0x26>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a0c      	ldr	r2, [pc, #48]	@ (8008c9c <modbus_set_response_timeout+0x54>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d907      	bls.n	8008c7e <modbus_set_response_timeout+0x36>
        errno = EINVAL;
 8008c6e:	f001 f9c7 	bl	800a000 <__errno>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2216      	movs	r2, #22
 8008c76:	601a      	str	r2, [r3, #0]
        return -1;
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7c:	e00a      	b.n	8008c94 <modbus_set_response_timeout+0x4c>
    }

    ctx->response_timeout.tv_sec = to_sec;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	461c      	mov	r4, r3
 8008c84:	4615      	mov	r5, r2
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	e9c3 4506 	strd	r4, r5, [r3, #24]
    ctx->response_timeout.tv_usec = to_usec;
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	621a      	str	r2, [r3, #32]
    return 0;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c9c:	000f423f 	.word	0x000f423f

08008ca0 <modbus_set_byte_timeout>:
    *to_usec = ctx->byte_timeout.tv_usec;
    return 0;
}

int modbus_set_byte_timeout(modbus_t *ctx, uint32_t to_sec, uint32_t to_usec)
{
 8008ca0:	b5b0      	push	{r4, r5, r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
    /* Byte timeout can be disabled when both values are zero */
    if (ctx == NULL || to_usec > 999999) {
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <modbus_set_byte_timeout+0x1a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce8 <modbus_set_byte_timeout+0x48>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d907      	bls.n	8008cca <modbus_set_byte_timeout+0x2a>
        errno = EINVAL;
 8008cba:	f001 f9a1 	bl	800a000 <__errno>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2216      	movs	r2, #22
 8008cc2:	601a      	str	r2, [r3, #0]
        return -1;
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e00a      	b.n	8008ce0 <modbus_set_byte_timeout+0x40>
    }

    ctx->byte_timeout.tv_sec = to_sec;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	461c      	mov	r4, r3
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    ctx->byte_timeout.tv_usec = to_usec;
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce8:	000f423f 	.word	0x000f423f

08008cec <modbus_connect>:
    ctx->quirks &= ~quirks_mask;
    return 0;
}

int modbus_connect(modbus_t *ctx)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d107      	bne.n	8008d0a <modbus_connect+0x1e>
        errno = EINVAL;
 8008cfa:	f001 f981 	bl	800a000 <__errno>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2216      	movs	r2, #22
 8008d02:	601a      	str	r2, [r3, #0]
        return -1;
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	e005      	b.n	8008d16 <modbus_connect+0x2a>
    }

    return ctx->backend->connect(ctx);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <modbus_close>:

void modbus_close(modbus_t *ctx)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
    if (ctx == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <modbus_close+0x1a>
        return;

    ctx->backend->close(ctx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
 8008d36:	e000      	b.n	8008d3a <modbus_close+0x1c>
        return;
 8008d38:	bf00      	nop
}
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <modbus_free>:

void modbus_free(modbus_t *ctx)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
    if (ctx == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <modbus_free+0x1a>
        return;

    ctx->backend->free(ctx);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
 8008d58:	e000      	b.n	8008d5c <modbus_free+0x1c>
        return;
 8008d5a:	bf00      	nop
}
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <modbus_mapping_new_start_address>:
                                                   unsigned int nb_input_bits,
                                                   unsigned int start_registers,
                                                   unsigned int nb_registers,
                                                   unsigned int start_input_registers,
                                                   unsigned int nb_input_registers)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	603b      	str	r3, [r7, #0]
    modbus_mapping_t *mb_mapping;

    mb_mapping = (modbus_mapping_t *) pvPortMalloc(sizeof(modbus_mapping_t));
 8008d70:	2030      	movs	r0, #48	@ 0x30
 8008d72:	f7fd fb5d 	bl	8006430 <pvPortMalloc>
 8008d76:	6178      	str	r0, [r7, #20]
    if (mb_mapping == NULL) {
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <modbus_mapping_new_start_address+0x20>
        return NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e0b0      	b.n	8008ee4 <modbus_mapping_new_start_address+0x182>
    }

    /* 0X */
    mb_mapping->nb_bits = nb_bits;
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	601a      	str	r2, [r3, #0]
    mb_mapping->start_bits = start_bits;
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	605a      	str	r2, [r3, #4]
    if (nb_bits == 0) {
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <modbus_mapping_new_start_address+0x3a>
        mb_mapping->tab_bits = NULL;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2200      	movs	r2, #0
 8008d98:	621a      	str	r2, [r3, #32]
 8008d9a:	e015      	b.n	8008dc8 <modbus_mapping_new_start_address+0x66>
    } else {
        /* Negative number raises a POSIX error */
        mb_mapping->tab_bits = (uint8_t *) pvPortMalloc(nb_bits * sizeof(uint8_t));
 8008d9c:	68b8      	ldr	r0, [r7, #8]
 8008d9e:	f7fd fb47 	bl	8006430 <pvPortMalloc>
 8008da2:	4602      	mov	r2, r0
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	621a      	str	r2, [r3, #32]
        if (mb_mapping->tab_bits == NULL) {
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <modbus_mapping_new_start_address+0x58>
            vPortFree(mb_mapping);
 8008db0:	6978      	ldr	r0, [r7, #20]
 8008db2:	f7fd fc05 	bl	80065c0 <vPortFree>
            return NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e094      	b.n	8008ee4 <modbus_mapping_new_start_address+0x182>
        }
        memset(mb_mapping->tab_bits, 0, nb_bits * sizeof(uint8_t));
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fe86 	bl	8009ad4 <memset>
    }

    /* 1X */
    mb_mapping->nb_input_bits = nb_input_bits;
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	609a      	str	r2, [r3, #8]
    mb_mapping->start_input_bits = start_input_bits;
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	60da      	str	r2, [r3, #12]
    if (nb_input_bits == 0) {
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <modbus_mapping_new_start_address+0x80>
        mb_mapping->tab_input_bits = NULL;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	625a      	str	r2, [r3, #36]	@ 0x24
 8008de0:	e01a      	b.n	8008e18 <modbus_mapping_new_start_address+0xb6>
    } else {
        mb_mapping->tab_input_bits = (uint8_t *) pvPortMalloc(nb_input_bits * sizeof(uint8_t));
 8008de2:	6838      	ldr	r0, [r7, #0]
 8008de4:	f7fd fb24 	bl	8006430 <pvPortMalloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	625a      	str	r2, [r3, #36]	@ 0x24
        if (mb_mapping->tab_input_bits == NULL) {
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <modbus_mapping_new_start_address+0xa8>
            vPortFree(mb_mapping->tab_bits);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fd fbe0 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping);
 8008e00:	6978      	ldr	r0, [r7, #20]
 8008e02:	f7fd fbdd 	bl	80065c0 <vPortFree>
            return NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e06c      	b.n	8008ee4 <modbus_mapping_new_start_address+0x182>
        }
        memset(mb_mapping->tab_input_bits, 0, nb_input_bits * sizeof(uint8_t));
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	2100      	movs	r1, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fe5e 	bl	8009ad4 <memset>
    }

    /* 4X */
    mb_mapping->nb_registers = nb_registers;
 8008e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	619a      	str	r2, [r3, #24]
    mb_mapping->start_registers = start_registers;
 8008e1e:	6a3a      	ldr	r2, [r7, #32]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	61da      	str	r2, [r3, #28]
    if (nb_registers == 0) {
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <modbus_mapping_new_start_address+0xd0>
        mb_mapping->tab_registers = NULL;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008e30:	e022      	b.n	8008e78 <modbus_mapping_new_start_address+0x116>
    } else {
        mb_mapping->tab_registers = (uint16_t *) pvPortMalloc(nb_registers * sizeof(uint16_t));
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fafa 	bl	8006430 <pvPortMalloc>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (mb_mapping->tab_registers == NULL) {
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10e      	bne.n	8008e68 <modbus_mapping_new_start_address+0x106>
            vPortFree(mb_mapping->tab_input_bits);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd fbb6 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping->tab_bits);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fd fbb1 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping);
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f7fd fbae 	bl	80065c0 <vPortFree>
            return NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e03d      	b.n	8008ee4 <modbus_mapping_new_start_address+0x182>
        }
        memset(mb_mapping->tab_registers, 0, nb_registers * sizeof(uint16_t));
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	461a      	mov	r2, r3
 8008e72:	2100      	movs	r1, #0
 8008e74:	f000 fe2e 	bl	8009ad4 <memset>
    }

    /* 3X */
    mb_mapping->nb_input_registers = nb_input_registers;
 8008e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	611a      	str	r2, [r3, #16]
    mb_mapping->start_input_registers = start_input_registers;
 8008e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	615a      	str	r2, [r3, #20]
    if (nb_input_registers == 0) {
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <modbus_mapping_new_start_address+0x130>
        mb_mapping->tab_input_registers = NULL;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e90:	e027      	b.n	8008ee2 <modbus_mapping_new_start_address+0x180>
    } else {
        mb_mapping->tab_input_registers =
            (uint16_t *) pvPortMalloc(nb_input_registers * sizeof(uint16_t));
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fd faca 	bl	8006430 <pvPortMalloc>
 8008e9c:	4602      	mov	r2, r0
        mb_mapping->tab_input_registers =
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        if (mb_mapping->tab_input_registers == NULL) {
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d113      	bne.n	8008ed2 <modbus_mapping_new_start_address+0x170>
            vPortFree(mb_mapping->tab_registers);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd fb86 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping->tab_input_bits);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fd fb81 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping->tab_bits);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fd fb7c 	bl	80065c0 <vPortFree>
            vPortFree(mb_mapping);
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f7fd fb79 	bl	80065c0 <vPortFree>
            return NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e008      	b.n	8008ee4 <modbus_mapping_new_start_address+0x182>
        }
        memset(mb_mapping->tab_input_registers, 0, nb_input_registers * sizeof(uint16_t));
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	461a      	mov	r2, r3
 8008edc:	2100      	movs	r1, #0
 8008ede:	f000 fdf9 	bl	8009ad4 <memset>
    }

    return mb_mapping;
 8008ee2:	697b      	ldr	r3, [r7, #20]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <modbus_mapping_new>:

modbus_mapping_t *modbus_mapping_new(int nb_bits,
                                     int nb_input_bits,
                                     int nb_registers,
                                     int nb_input_registers)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af04      	add	r7, sp, #16
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
    return modbus_mapping_new_start_address(
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	9203      	str	r2, [sp, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	9202      	str	r2, [sp, #8]
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2200      	movs	r2, #0
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7ff ff25 	bl	8008d62 <modbus_mapping_new_start_address>
 8008f18:	4603      	mov	r3, r0
        0, nb_bits, 0, nb_input_bits, 0, nb_registers, 0, nb_input_registers);
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <__assert_func>:
 8008f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f26:	4614      	mov	r4, r2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <__assert_func+0x2c>)
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68d8      	ldr	r0, [r3, #12]
 8008f32:	b954      	cbnz	r4, 8008f4a <__assert_func+0x26>
 8008f34:	4b07      	ldr	r3, [pc, #28]	@ (8008f54 <__assert_func+0x30>)
 8008f36:	461c      	mov	r4, r3
 8008f38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f3c:	9100      	str	r1, [sp, #0]
 8008f3e:	462b      	mov	r3, r5
 8008f40:	4905      	ldr	r1, [pc, #20]	@ (8008f58 <__assert_func+0x34>)
 8008f42:	f000 fb8d 	bl	8009660 <fiprintf>
 8008f46:	f001 f8ac 	bl	800a0a2 <abort>
 8008f4a:	4b04      	ldr	r3, [pc, #16]	@ (8008f5c <__assert_func+0x38>)
 8008f4c:	e7f4      	b.n	8008f38 <__assert_func+0x14>
 8008f4e:	bf00      	nop
 8008f50:	2000001c 	.word	0x2000001c
 8008f54:	0800b15b 	.word	0x0800b15b
 8008f58:	0800b12d 	.word	0x0800b12d
 8008f5c:	0800b120 	.word	0x0800b120

08008f60 <__sfputc_r>:
 8008f60:	6893      	ldr	r3, [r2, #8]
 8008f62:	b410      	push	{r4}
 8008f64:	3b01      	subs	r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	6093      	str	r3, [r2, #8]
 8008f6a:	da07      	bge.n	8008f7c <__sfputc_r+0x1c>
 8008f6c:	6994      	ldr	r4, [r2, #24]
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	db01      	blt.n	8008f76 <__sfputc_r+0x16>
 8008f72:	290a      	cmp	r1, #10
 8008f74:	d102      	bne.n	8008f7c <__sfputc_r+0x1c>
 8008f76:	bc10      	pop	{r4}
 8008f78:	f000 bd17 	b.w	80099aa <__swbuf_r>
 8008f7c:	6813      	ldr	r3, [r2, #0]
 8008f7e:	1c58      	adds	r0, r3, #1
 8008f80:	6010      	str	r0, [r2, #0]
 8008f82:	7019      	strb	r1, [r3, #0]
 8008f84:	4608      	mov	r0, r1
 8008f86:	bc10      	pop	{r4}
 8008f88:	4770      	bx	lr

08008f8a <__sfputs_r>:
 8008f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	4614      	mov	r4, r2
 8008f92:	18d5      	adds	r5, r2, r3
 8008f94:	42ac      	cmp	r4, r5
 8008f96:	d101      	bne.n	8008f9c <__sfputs_r+0x12>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e007      	b.n	8008fac <__sfputs_r+0x22>
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	f7ff ffdc 	bl	8008f60 <__sfputc_r>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d1f3      	bne.n	8008f94 <__sfputs_r+0xa>
 8008fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb0 <_vfiprintf_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	4698      	mov	r8, r3
 8008fba:	4606      	mov	r6, r0
 8008fbc:	b09d      	sub	sp, #116	@ 0x74
 8008fbe:	b118      	cbz	r0, 8008fc8 <_vfiprintf_r+0x18>
 8008fc0:	6a03      	ldr	r3, [r0, #32]
 8008fc2:	b90b      	cbnz	r3, 8008fc8 <_vfiprintf_r+0x18>
 8008fc4:	f000 fb34 	bl	8009630 <__sinit>
 8008fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d405      	bmi.n	8008fda <_vfiprintf_r+0x2a>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	059a      	lsls	r2, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_vfiprintf_r+0x2a>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd6:	f001 f83e 	bl	800a056 <__retarget_lock_acquire_recursive>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	071b      	lsls	r3, r3, #28
 8008fde:	d501      	bpl.n	8008fe4 <_vfiprintf_r+0x34>
 8008fe0:	692b      	ldr	r3, [r5, #16]
 8008fe2:	b99b      	cbnz	r3, 800900c <_vfiprintf_r+0x5c>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f000 fd1e 	bl	8009a28 <__swsetup_r>
 8008fec:	b170      	cbz	r0, 800900c <_vfiprintf_r+0x5c>
 8008fee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ff0:	07dc      	lsls	r4, r3, #31
 8008ff2:	d504      	bpl.n	8008ffe <_vfiprintf_r+0x4e>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	b01d      	add	sp, #116	@ 0x74
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	0598      	lsls	r0, r3, #22
 8009002:	d4f7      	bmi.n	8008ff4 <_vfiprintf_r+0x44>
 8009004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009006:	f001 f827 	bl	800a058 <__retarget_lock_release_recursive>
 800900a:	e7f3      	b.n	8008ff4 <_vfiprintf_r+0x44>
 800900c:	2300      	movs	r3, #0
 800900e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009010:	2320      	movs	r3, #32
 8009012:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009016:	2330      	movs	r3, #48	@ 0x30
 8009018:	f04f 0901 	mov.w	r9, #1
 800901c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009020:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80091cc <_vfiprintf_r+0x21c>
 8009024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009028:	4623      	mov	r3, r4
 800902a:	469a      	mov	sl, r3
 800902c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009030:	b10a      	cbz	r2, 8009036 <_vfiprintf_r+0x86>
 8009032:	2a25      	cmp	r2, #37	@ 0x25
 8009034:	d1f9      	bne.n	800902a <_vfiprintf_r+0x7a>
 8009036:	ebba 0b04 	subs.w	fp, sl, r4
 800903a:	d00b      	beq.n	8009054 <_vfiprintf_r+0xa4>
 800903c:	465b      	mov	r3, fp
 800903e:	4622      	mov	r2, r4
 8009040:	4629      	mov	r1, r5
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ffa1 	bl	8008f8a <__sfputs_r>
 8009048:	3001      	adds	r0, #1
 800904a:	f000 80a7 	beq.w	800919c <_vfiprintf_r+0x1ec>
 800904e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009050:	445a      	add	r2, fp
 8009052:	9209      	str	r2, [sp, #36]	@ 0x24
 8009054:	f89a 3000 	ldrb.w	r3, [sl]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 809f 	beq.w	800919c <_vfiprintf_r+0x1ec>
 800905e:	2300      	movs	r3, #0
 8009060:	f04f 32ff 	mov.w	r2, #4294967295
 8009064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009068:	f10a 0a01 	add.w	sl, sl, #1
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009074:	931a      	str	r3, [sp, #104]	@ 0x68
 8009076:	4654      	mov	r4, sl
 8009078:	2205      	movs	r2, #5
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	4853      	ldr	r0, [pc, #332]	@ (80091cc <_vfiprintf_r+0x21c>)
 8009080:	f000 fff3 	bl	800a06a <memchr>
 8009084:	9a04      	ldr	r2, [sp, #16]
 8009086:	b9d8      	cbnz	r0, 80090c0 <_vfiprintf_r+0x110>
 8009088:	06d1      	lsls	r1, r2, #27
 800908a:	bf44      	itt	mi
 800908c:	2320      	movmi	r3, #32
 800908e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009092:	0713      	lsls	r3, r2, #28
 8009094:	bf44      	itt	mi
 8009096:	232b      	movmi	r3, #43	@ 0x2b
 8009098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800909c:	f89a 3000 	ldrb.w	r3, [sl]
 80090a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a2:	d015      	beq.n	80090d0 <_vfiprintf_r+0x120>
 80090a4:	4654      	mov	r4, sl
 80090a6:	2000      	movs	r0, #0
 80090a8:	f04f 0c0a 	mov.w	ip, #10
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	4621      	mov	r1, r4
 80090b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090b4:	3b30      	subs	r3, #48	@ 0x30
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	d94b      	bls.n	8009152 <_vfiprintf_r+0x1a2>
 80090ba:	b1b0      	cbz	r0, 80090ea <_vfiprintf_r+0x13a>
 80090bc:	9207      	str	r2, [sp, #28]
 80090be:	e014      	b.n	80090ea <_vfiprintf_r+0x13a>
 80090c0:	eba0 0308 	sub.w	r3, r0, r8
 80090c4:	fa09 f303 	lsl.w	r3, r9, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	46a2      	mov	sl, r4
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	e7d2      	b.n	8009076 <_vfiprintf_r+0xc6>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	1d19      	adds	r1, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9103      	str	r1, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfbb      	ittet	lt
 80090dc:	425b      	neglt	r3, r3
 80090de:	f042 0202 	orrlt.w	r2, r2, #2
 80090e2:	9307      	strge	r3, [sp, #28]
 80090e4:	9307      	strlt	r3, [sp, #28]
 80090e6:	bfb8      	it	lt
 80090e8:	9204      	strlt	r2, [sp, #16]
 80090ea:	7823      	ldrb	r3, [r4, #0]
 80090ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ee:	d10a      	bne.n	8009106 <_vfiprintf_r+0x156>
 80090f0:	7863      	ldrb	r3, [r4, #1]
 80090f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f4:	d132      	bne.n	800915c <_vfiprintf_r+0x1ac>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	3402      	adds	r4, #2
 80090fa:	1d1a      	adds	r2, r3, #4
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	9203      	str	r2, [sp, #12]
 8009100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009104:	9305      	str	r3, [sp, #20]
 8009106:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80091d0 <_vfiprintf_r+0x220>
 800910a:	2203      	movs	r2, #3
 800910c:	4650      	mov	r0, sl
 800910e:	7821      	ldrb	r1, [r4, #0]
 8009110:	f000 ffab 	bl	800a06a <memchr>
 8009114:	b138      	cbz	r0, 8009126 <_vfiprintf_r+0x176>
 8009116:	2240      	movs	r2, #64	@ 0x40
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	eba0 000a 	sub.w	r0, r0, sl
 800911e:	4082      	lsls	r2, r0
 8009120:	4313      	orrs	r3, r2
 8009122:	3401      	adds	r4, #1
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912a:	2206      	movs	r2, #6
 800912c:	4829      	ldr	r0, [pc, #164]	@ (80091d4 <_vfiprintf_r+0x224>)
 800912e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009132:	f000 ff9a 	bl	800a06a <memchr>
 8009136:	2800      	cmp	r0, #0
 8009138:	d03f      	beq.n	80091ba <_vfiprintf_r+0x20a>
 800913a:	4b27      	ldr	r3, [pc, #156]	@ (80091d8 <_vfiprintf_r+0x228>)
 800913c:	bb1b      	cbnz	r3, 8009186 <_vfiprintf_r+0x1d6>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	3307      	adds	r3, #7
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	3308      	adds	r3, #8
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	443b      	add	r3, r7
 800914e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009150:	e76a      	b.n	8009028 <_vfiprintf_r+0x78>
 8009152:	460c      	mov	r4, r1
 8009154:	2001      	movs	r0, #1
 8009156:	fb0c 3202 	mla	r2, ip, r2, r3
 800915a:	e7a8      	b.n	80090ae <_vfiprintf_r+0xfe>
 800915c:	2300      	movs	r3, #0
 800915e:	f04f 0c0a 	mov.w	ip, #10
 8009162:	4619      	mov	r1, r3
 8009164:	3401      	adds	r4, #1
 8009166:	9305      	str	r3, [sp, #20]
 8009168:	4620      	mov	r0, r4
 800916a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916e:	3a30      	subs	r2, #48	@ 0x30
 8009170:	2a09      	cmp	r2, #9
 8009172:	d903      	bls.n	800917c <_vfiprintf_r+0x1cc>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0c6      	beq.n	8009106 <_vfiprintf_r+0x156>
 8009178:	9105      	str	r1, [sp, #20]
 800917a:	e7c4      	b.n	8009106 <_vfiprintf_r+0x156>
 800917c:	4604      	mov	r4, r0
 800917e:	2301      	movs	r3, #1
 8009180:	fb0c 2101 	mla	r1, ip, r1, r2
 8009184:	e7f0      	b.n	8009168 <_vfiprintf_r+0x1b8>
 8009186:	ab03      	add	r3, sp, #12
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	462a      	mov	r2, r5
 800918c:	4630      	mov	r0, r6
 800918e:	4b13      	ldr	r3, [pc, #76]	@ (80091dc <_vfiprintf_r+0x22c>)
 8009190:	a904      	add	r1, sp, #16
 8009192:	f3af 8000 	nop.w
 8009196:	4607      	mov	r7, r0
 8009198:	1c78      	adds	r0, r7, #1
 800919a:	d1d6      	bne.n	800914a <_vfiprintf_r+0x19a>
 800919c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800919e:	07d9      	lsls	r1, r3, #31
 80091a0:	d405      	bmi.n	80091ae <_vfiprintf_r+0x1fe>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	059a      	lsls	r2, r3, #22
 80091a6:	d402      	bmi.n	80091ae <_vfiprintf_r+0x1fe>
 80091a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091aa:	f000 ff55 	bl	800a058 <__retarget_lock_release_recursive>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	065b      	lsls	r3, r3, #25
 80091b2:	f53f af1f 	bmi.w	8008ff4 <_vfiprintf_r+0x44>
 80091b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091b8:	e71e      	b.n	8008ff8 <_vfiprintf_r+0x48>
 80091ba:	ab03      	add	r3, sp, #12
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	462a      	mov	r2, r5
 80091c0:	4630      	mov	r0, r6
 80091c2:	4b06      	ldr	r3, [pc, #24]	@ (80091dc <_vfiprintf_r+0x22c>)
 80091c4:	a904      	add	r1, sp, #16
 80091c6:	f000 f887 	bl	80092d8 <_printf_i>
 80091ca:	e7e4      	b.n	8009196 <_vfiprintf_r+0x1e6>
 80091cc:	0800b15c 	.word	0x0800b15c
 80091d0:	0800b162 	.word	0x0800b162
 80091d4:	0800b166 	.word	0x0800b166
 80091d8:	00000000 	.word	0x00000000
 80091dc:	08008f8b 	.word	0x08008f8b

080091e0 <vfiprintf>:
 80091e0:	4613      	mov	r3, r2
 80091e2:	460a      	mov	r2, r1
 80091e4:	4601      	mov	r1, r0
 80091e6:	4802      	ldr	r0, [pc, #8]	@ (80091f0 <vfiprintf+0x10>)
 80091e8:	6800      	ldr	r0, [r0, #0]
 80091ea:	f7ff bee1 	b.w	8008fb0 <_vfiprintf_r>
 80091ee:	bf00      	nop
 80091f0:	2000001c 	.word	0x2000001c

080091f4 <_printf_common>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	4616      	mov	r6, r2
 80091fa:	4698      	mov	r8, r3
 80091fc:	688a      	ldr	r2, [r1, #8]
 80091fe:	690b      	ldr	r3, [r1, #16]
 8009200:	4607      	mov	r7, r0
 8009202:	4293      	cmp	r3, r2
 8009204:	bfb8      	it	lt
 8009206:	4613      	movlt	r3, r2
 8009208:	6033      	str	r3, [r6, #0]
 800920a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800920e:	460c      	mov	r4, r1
 8009210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009214:	b10a      	cbz	r2, 800921a <_printf_common+0x26>
 8009216:	3301      	adds	r3, #1
 8009218:	6033      	str	r3, [r6, #0]
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	0699      	lsls	r1, r3, #26
 800921e:	bf42      	ittt	mi
 8009220:	6833      	ldrmi	r3, [r6, #0]
 8009222:	3302      	addmi	r3, #2
 8009224:	6033      	strmi	r3, [r6, #0]
 8009226:	6825      	ldr	r5, [r4, #0]
 8009228:	f015 0506 	ands.w	r5, r5, #6
 800922c:	d106      	bne.n	800923c <_printf_common+0x48>
 800922e:	f104 0a19 	add.w	sl, r4, #25
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	6832      	ldr	r2, [r6, #0]
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	42ab      	cmp	r3, r5
 800923a:	dc2b      	bgt.n	8009294 <_printf_common+0xa0>
 800923c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009240:	6822      	ldr	r2, [r4, #0]
 8009242:	3b00      	subs	r3, #0
 8009244:	bf18      	it	ne
 8009246:	2301      	movne	r3, #1
 8009248:	0692      	lsls	r2, r2, #26
 800924a:	d430      	bmi.n	80092ae <_printf_common+0xba>
 800924c:	4641      	mov	r1, r8
 800924e:	4638      	mov	r0, r7
 8009250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009254:	47c8      	blx	r9
 8009256:	3001      	adds	r0, #1
 8009258:	d023      	beq.n	80092a2 <_printf_common+0xae>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	6922      	ldr	r2, [r4, #16]
 800925e:	f003 0306 	and.w	r3, r3, #6
 8009262:	2b04      	cmp	r3, #4
 8009264:	bf14      	ite	ne
 8009266:	2500      	movne	r5, #0
 8009268:	6833      	ldreq	r3, [r6, #0]
 800926a:	f04f 0600 	mov.w	r6, #0
 800926e:	bf08      	it	eq
 8009270:	68e5      	ldreq	r5, [r4, #12]
 8009272:	f104 041a 	add.w	r4, r4, #26
 8009276:	bf08      	it	eq
 8009278:	1aed      	subeq	r5, r5, r3
 800927a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800927e:	bf08      	it	eq
 8009280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009284:	4293      	cmp	r3, r2
 8009286:	bfc4      	itt	gt
 8009288:	1a9b      	subgt	r3, r3, r2
 800928a:	18ed      	addgt	r5, r5, r3
 800928c:	42b5      	cmp	r5, r6
 800928e:	d11a      	bne.n	80092c6 <_printf_common+0xd2>
 8009290:	2000      	movs	r0, #0
 8009292:	e008      	b.n	80092a6 <_printf_common+0xb2>
 8009294:	2301      	movs	r3, #1
 8009296:	4652      	mov	r2, sl
 8009298:	4641      	mov	r1, r8
 800929a:	4638      	mov	r0, r7
 800929c:	47c8      	blx	r9
 800929e:	3001      	adds	r0, #1
 80092a0:	d103      	bne.n	80092aa <_printf_common+0xb6>
 80092a2:	f04f 30ff 	mov.w	r0, #4294967295
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	3501      	adds	r5, #1
 80092ac:	e7c1      	b.n	8009232 <_printf_common+0x3e>
 80092ae:	2030      	movs	r0, #48	@ 0x30
 80092b0:	18e1      	adds	r1, r4, r3
 80092b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092bc:	4422      	add	r2, r4
 80092be:	3302      	adds	r3, #2
 80092c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092c4:	e7c2      	b.n	800924c <_printf_common+0x58>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4622      	mov	r2, r4
 80092ca:	4641      	mov	r1, r8
 80092cc:	4638      	mov	r0, r7
 80092ce:	47c8      	blx	r9
 80092d0:	3001      	adds	r0, #1
 80092d2:	d0e6      	beq.n	80092a2 <_printf_common+0xae>
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7d9      	b.n	800928c <_printf_common+0x98>

080092d8 <_printf_i>:
 80092d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	7e0f      	ldrb	r7, [r1, #24]
 80092de:	4691      	mov	r9, r2
 80092e0:	2f78      	cmp	r7, #120	@ 0x78
 80092e2:	4680      	mov	r8, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	469a      	mov	sl, r3
 80092e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ee:	d807      	bhi.n	8009300 <_printf_i+0x28>
 80092f0:	2f62      	cmp	r7, #98	@ 0x62
 80092f2:	d80a      	bhi.n	800930a <_printf_i+0x32>
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	f000 80d3 	beq.w	80094a0 <_printf_i+0x1c8>
 80092fa:	2f58      	cmp	r7, #88	@ 0x58
 80092fc:	f000 80ba 	beq.w	8009474 <_printf_i+0x19c>
 8009300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009308:	e03a      	b.n	8009380 <_printf_i+0xa8>
 800930a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800930e:	2b15      	cmp	r3, #21
 8009310:	d8f6      	bhi.n	8009300 <_printf_i+0x28>
 8009312:	a101      	add	r1, pc, #4	@ (adr r1, 8009318 <_printf_i+0x40>)
 8009314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009318:	08009371 	.word	0x08009371
 800931c:	08009385 	.word	0x08009385
 8009320:	08009301 	.word	0x08009301
 8009324:	08009301 	.word	0x08009301
 8009328:	08009301 	.word	0x08009301
 800932c:	08009301 	.word	0x08009301
 8009330:	08009385 	.word	0x08009385
 8009334:	08009301 	.word	0x08009301
 8009338:	08009301 	.word	0x08009301
 800933c:	08009301 	.word	0x08009301
 8009340:	08009301 	.word	0x08009301
 8009344:	08009487 	.word	0x08009487
 8009348:	080093af 	.word	0x080093af
 800934c:	08009441 	.word	0x08009441
 8009350:	08009301 	.word	0x08009301
 8009354:	08009301 	.word	0x08009301
 8009358:	080094a9 	.word	0x080094a9
 800935c:	08009301 	.word	0x08009301
 8009360:	080093af 	.word	0x080093af
 8009364:	08009301 	.word	0x08009301
 8009368:	08009301 	.word	0x08009301
 800936c:	08009449 	.word	0x08009449
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6032      	str	r2, [r6, #0]
 8009378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800937c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009380:	2301      	movs	r3, #1
 8009382:	e09e      	b.n	80094c2 <_printf_i+0x1ea>
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	1d19      	adds	r1, r3, #4
 800938a:	6031      	str	r1, [r6, #0]
 800938c:	0606      	lsls	r6, r0, #24
 800938e:	d501      	bpl.n	8009394 <_printf_i+0xbc>
 8009390:	681d      	ldr	r5, [r3, #0]
 8009392:	e003      	b.n	800939c <_printf_i+0xc4>
 8009394:	0645      	lsls	r5, r0, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0xb8>
 8009398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800939c:	2d00      	cmp	r5, #0
 800939e:	da03      	bge.n	80093a8 <_printf_i+0xd0>
 80093a0:	232d      	movs	r3, #45	@ 0x2d
 80093a2:	426d      	negs	r5, r5
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a8:	230a      	movs	r3, #10
 80093aa:	4859      	ldr	r0, [pc, #356]	@ (8009510 <_printf_i+0x238>)
 80093ac:	e011      	b.n	80093d2 <_printf_i+0xfa>
 80093ae:	6821      	ldr	r1, [r4, #0]
 80093b0:	6833      	ldr	r3, [r6, #0]
 80093b2:	0608      	lsls	r0, r1, #24
 80093b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093b8:	d402      	bmi.n	80093c0 <_printf_i+0xe8>
 80093ba:	0649      	lsls	r1, r1, #25
 80093bc:	bf48      	it	mi
 80093be:	b2ad      	uxthmi	r5, r5
 80093c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093c2:	6033      	str	r3, [r6, #0]
 80093c4:	bf14      	ite	ne
 80093c6:	230a      	movne	r3, #10
 80093c8:	2308      	moveq	r3, #8
 80093ca:	4851      	ldr	r0, [pc, #324]	@ (8009510 <_printf_i+0x238>)
 80093cc:	2100      	movs	r1, #0
 80093ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093d2:	6866      	ldr	r6, [r4, #4]
 80093d4:	2e00      	cmp	r6, #0
 80093d6:	bfa8      	it	ge
 80093d8:	6821      	ldrge	r1, [r4, #0]
 80093da:	60a6      	str	r6, [r4, #8]
 80093dc:	bfa4      	itt	ge
 80093de:	f021 0104 	bicge.w	r1, r1, #4
 80093e2:	6021      	strge	r1, [r4, #0]
 80093e4:	b90d      	cbnz	r5, 80093ea <_printf_i+0x112>
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d04b      	beq.n	8009482 <_printf_i+0x1aa>
 80093ea:	4616      	mov	r6, r2
 80093ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80093f0:	fb03 5711 	mls	r7, r3, r1, r5
 80093f4:	5dc7      	ldrb	r7, [r0, r7]
 80093f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093fa:	462f      	mov	r7, r5
 80093fc:	42bb      	cmp	r3, r7
 80093fe:	460d      	mov	r5, r1
 8009400:	d9f4      	bls.n	80093ec <_printf_i+0x114>
 8009402:	2b08      	cmp	r3, #8
 8009404:	d10b      	bne.n	800941e <_printf_i+0x146>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	07df      	lsls	r7, r3, #31
 800940a:	d508      	bpl.n	800941e <_printf_i+0x146>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	6861      	ldr	r1, [r4, #4]
 8009410:	4299      	cmp	r1, r3
 8009412:	bfde      	ittt	le
 8009414:	2330      	movle	r3, #48	@ 0x30
 8009416:	f806 3c01 	strble.w	r3, [r6, #-1]
 800941a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800941e:	1b92      	subs	r2, r2, r6
 8009420:	6122      	str	r2, [r4, #16]
 8009422:	464b      	mov	r3, r9
 8009424:	4621      	mov	r1, r4
 8009426:	4640      	mov	r0, r8
 8009428:	f8cd a000 	str.w	sl, [sp]
 800942c:	aa03      	add	r2, sp, #12
 800942e:	f7ff fee1 	bl	80091f4 <_printf_common>
 8009432:	3001      	adds	r0, #1
 8009434:	d14a      	bne.n	80094cc <_printf_i+0x1f4>
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	b004      	add	sp, #16
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	f043 0320 	orr.w	r3, r3, #32
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	2778      	movs	r7, #120	@ 0x78
 800944a:	4832      	ldr	r0, [pc, #200]	@ (8009514 <_printf_i+0x23c>)
 800944c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	6831      	ldr	r1, [r6, #0]
 8009454:	061f      	lsls	r7, r3, #24
 8009456:	f851 5b04 	ldr.w	r5, [r1], #4
 800945a:	d402      	bmi.n	8009462 <_printf_i+0x18a>
 800945c:	065f      	lsls	r7, r3, #25
 800945e:	bf48      	it	mi
 8009460:	b2ad      	uxthmi	r5, r5
 8009462:	6031      	str	r1, [r6, #0]
 8009464:	07d9      	lsls	r1, r3, #31
 8009466:	bf44      	itt	mi
 8009468:	f043 0320 	orrmi.w	r3, r3, #32
 800946c:	6023      	strmi	r3, [r4, #0]
 800946e:	b11d      	cbz	r5, 8009478 <_printf_i+0x1a0>
 8009470:	2310      	movs	r3, #16
 8009472:	e7ab      	b.n	80093cc <_printf_i+0xf4>
 8009474:	4826      	ldr	r0, [pc, #152]	@ (8009510 <_printf_i+0x238>)
 8009476:	e7e9      	b.n	800944c <_printf_i+0x174>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	f023 0320 	bic.w	r3, r3, #32
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	e7f6      	b.n	8009470 <_printf_i+0x198>
 8009482:	4616      	mov	r6, r2
 8009484:	e7bd      	b.n	8009402 <_printf_i+0x12a>
 8009486:	6833      	ldr	r3, [r6, #0]
 8009488:	6825      	ldr	r5, [r4, #0]
 800948a:	1d18      	adds	r0, r3, #4
 800948c:	6961      	ldr	r1, [r4, #20]
 800948e:	6030      	str	r0, [r6, #0]
 8009490:	062e      	lsls	r6, r5, #24
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	d501      	bpl.n	800949a <_printf_i+0x1c2>
 8009496:	6019      	str	r1, [r3, #0]
 8009498:	e002      	b.n	80094a0 <_printf_i+0x1c8>
 800949a:	0668      	lsls	r0, r5, #25
 800949c:	d5fb      	bpl.n	8009496 <_printf_i+0x1be>
 800949e:	8019      	strh	r1, [r3, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	4616      	mov	r6, r2
 80094a4:	6123      	str	r3, [r4, #16]
 80094a6:	e7bc      	b.n	8009422 <_printf_i+0x14a>
 80094a8:	6833      	ldr	r3, [r6, #0]
 80094aa:	2100      	movs	r1, #0
 80094ac:	1d1a      	adds	r2, r3, #4
 80094ae:	6032      	str	r2, [r6, #0]
 80094b0:	681e      	ldr	r6, [r3, #0]
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	4630      	mov	r0, r6
 80094b6:	f000 fdd8 	bl	800a06a <memchr>
 80094ba:	b108      	cbz	r0, 80094c0 <_printf_i+0x1e8>
 80094bc:	1b80      	subs	r0, r0, r6
 80094be:	6060      	str	r0, [r4, #4]
 80094c0:	6863      	ldr	r3, [r4, #4]
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	2300      	movs	r3, #0
 80094c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094ca:	e7aa      	b.n	8009422 <_printf_i+0x14a>
 80094cc:	4632      	mov	r2, r6
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	47d0      	blx	sl
 80094d6:	3001      	adds	r0, #1
 80094d8:	d0ad      	beq.n	8009436 <_printf_i+0x15e>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	079b      	lsls	r3, r3, #30
 80094de:	d413      	bmi.n	8009508 <_printf_i+0x230>
 80094e0:	68e0      	ldr	r0, [r4, #12]
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	4298      	cmp	r0, r3
 80094e6:	bfb8      	it	lt
 80094e8:	4618      	movlt	r0, r3
 80094ea:	e7a6      	b.n	800943a <_printf_i+0x162>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4632      	mov	r2, r6
 80094f0:	4649      	mov	r1, r9
 80094f2:	4640      	mov	r0, r8
 80094f4:	47d0      	blx	sl
 80094f6:	3001      	adds	r0, #1
 80094f8:	d09d      	beq.n	8009436 <_printf_i+0x15e>
 80094fa:	3501      	adds	r5, #1
 80094fc:	68e3      	ldr	r3, [r4, #12]
 80094fe:	9903      	ldr	r1, [sp, #12]
 8009500:	1a5b      	subs	r3, r3, r1
 8009502:	42ab      	cmp	r3, r5
 8009504:	dcf2      	bgt.n	80094ec <_printf_i+0x214>
 8009506:	e7eb      	b.n	80094e0 <_printf_i+0x208>
 8009508:	2500      	movs	r5, #0
 800950a:	f104 0619 	add.w	r6, r4, #25
 800950e:	e7f5      	b.n	80094fc <_printf_i+0x224>
 8009510:	0800b16d 	.word	0x0800b16d
 8009514:	0800b17e 	.word	0x0800b17e

08009518 <std>:
 8009518:	2300      	movs	r3, #0
 800951a:	b510      	push	{r4, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	e9c0 3300 	strd	r3, r3, [r0]
 8009522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009526:	6083      	str	r3, [r0, #8]
 8009528:	8181      	strh	r1, [r0, #12]
 800952a:	6643      	str	r3, [r0, #100]	@ 0x64
 800952c:	81c2      	strh	r2, [r0, #14]
 800952e:	6183      	str	r3, [r0, #24]
 8009530:	4619      	mov	r1, r3
 8009532:	2208      	movs	r2, #8
 8009534:	305c      	adds	r0, #92	@ 0x5c
 8009536:	f000 facd 	bl	8009ad4 <memset>
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <std+0x58>)
 800953c:	6224      	str	r4, [r4, #32]
 800953e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009540:	4b0c      	ldr	r3, [pc, #48]	@ (8009574 <std+0x5c>)
 8009542:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009544:	4b0c      	ldr	r3, [pc, #48]	@ (8009578 <std+0x60>)
 8009546:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009548:	4b0c      	ldr	r3, [pc, #48]	@ (800957c <std+0x64>)
 800954a:	6323      	str	r3, [r4, #48]	@ 0x30
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <std+0x68>)
 800954e:	429c      	cmp	r4, r3
 8009550:	d006      	beq.n	8009560 <std+0x48>
 8009552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009556:	4294      	cmp	r4, r2
 8009558:	d002      	beq.n	8009560 <std+0x48>
 800955a:	33d0      	adds	r3, #208	@ 0xd0
 800955c:	429c      	cmp	r4, r3
 800955e:	d105      	bne.n	800956c <std+0x54>
 8009560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009568:	f000 bd74 	b.w	800a054 <__retarget_lock_init_recursive>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	bf00      	nop
 8009570:	08009925 	.word	0x08009925
 8009574:	08009947 	.word	0x08009947
 8009578:	0800997f 	.word	0x0800997f
 800957c:	080099a3 	.word	0x080099a3
 8009580:	20002e18 	.word	0x20002e18

08009584 <stdio_exit_handler>:
 8009584:	4a02      	ldr	r2, [pc, #8]	@ (8009590 <stdio_exit_handler+0xc>)
 8009586:	4903      	ldr	r1, [pc, #12]	@ (8009594 <stdio_exit_handler+0x10>)
 8009588:	4803      	ldr	r0, [pc, #12]	@ (8009598 <stdio_exit_handler+0x14>)
 800958a:	f000 b8a7 	b.w	80096dc <_fwalk_sglue>
 800958e:	bf00      	nop
 8009590:	20000010 	.word	0x20000010
 8009594:	0800a39d 	.word	0x0800a39d
 8009598:	20000020 	.word	0x20000020

0800959c <cleanup_stdio>:
 800959c:	6841      	ldr	r1, [r0, #4]
 800959e:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <cleanup_stdio+0x34>)
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4299      	cmp	r1, r3
 80095a4:	4604      	mov	r4, r0
 80095a6:	d001      	beq.n	80095ac <cleanup_stdio+0x10>
 80095a8:	f000 fef8 	bl	800a39c <_fflush_r>
 80095ac:	68a1      	ldr	r1, [r4, #8]
 80095ae:	4b09      	ldr	r3, [pc, #36]	@ (80095d4 <cleanup_stdio+0x38>)
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d002      	beq.n	80095ba <cleanup_stdio+0x1e>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fef1 	bl	800a39c <_fflush_r>
 80095ba:	68e1      	ldr	r1, [r4, #12]
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <cleanup_stdio+0x3c>)
 80095be:	4299      	cmp	r1, r3
 80095c0:	d004      	beq.n	80095cc <cleanup_stdio+0x30>
 80095c2:	4620      	mov	r0, r4
 80095c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c8:	f000 bee8 	b.w	800a39c <_fflush_r>
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	bf00      	nop
 80095d0:	20002e18 	.word	0x20002e18
 80095d4:	20002e80 	.word	0x20002e80
 80095d8:	20002ee8 	.word	0x20002ee8

080095dc <global_stdio_init.part.0>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <global_stdio_init.part.0+0x30>)
 80095e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009610 <global_stdio_init.part.0+0x34>)
 80095e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009614 <global_stdio_init.part.0+0x38>)
 80095e4:	4620      	mov	r0, r4
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	2104      	movs	r1, #4
 80095ea:	2200      	movs	r2, #0
 80095ec:	f7ff ff94 	bl	8009518 <std>
 80095f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095f4:	2201      	movs	r2, #1
 80095f6:	2109      	movs	r1, #9
 80095f8:	f7ff ff8e 	bl	8009518 <std>
 80095fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009600:	2202      	movs	r2, #2
 8009602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009606:	2112      	movs	r1, #18
 8009608:	f7ff bf86 	b.w	8009518 <std>
 800960c:	20002f50 	.word	0x20002f50
 8009610:	20002e18 	.word	0x20002e18
 8009614:	08009585 	.word	0x08009585

08009618 <__sfp_lock_acquire>:
 8009618:	4801      	ldr	r0, [pc, #4]	@ (8009620 <__sfp_lock_acquire+0x8>)
 800961a:	f000 bd1c 	b.w	800a056 <__retarget_lock_acquire_recursive>
 800961e:	bf00      	nop
 8009620:	20002f59 	.word	0x20002f59

08009624 <__sfp_lock_release>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_release+0x8>)
 8009626:	f000 bd17 	b.w	800a058 <__retarget_lock_release_recursive>
 800962a:	bf00      	nop
 800962c:	20002f59 	.word	0x20002f59

08009630 <__sinit>:
 8009630:	b510      	push	{r4, lr}
 8009632:	4604      	mov	r4, r0
 8009634:	f7ff fff0 	bl	8009618 <__sfp_lock_acquire>
 8009638:	6a23      	ldr	r3, [r4, #32]
 800963a:	b11b      	cbz	r3, 8009644 <__sinit+0x14>
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	f7ff bff0 	b.w	8009624 <__sfp_lock_release>
 8009644:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <__sinit+0x28>)
 8009646:	6223      	str	r3, [r4, #32]
 8009648:	4b04      	ldr	r3, [pc, #16]	@ (800965c <__sinit+0x2c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f5      	bne.n	800963c <__sinit+0xc>
 8009650:	f7ff ffc4 	bl	80095dc <global_stdio_init.part.0>
 8009654:	e7f2      	b.n	800963c <__sinit+0xc>
 8009656:	bf00      	nop
 8009658:	0800959d 	.word	0x0800959d
 800965c:	20002f50 	.word	0x20002f50

08009660 <fiprintf>:
 8009660:	b40e      	push	{r1, r2, r3}
 8009662:	b503      	push	{r0, r1, lr}
 8009664:	4601      	mov	r1, r0
 8009666:	ab03      	add	r3, sp, #12
 8009668:	4805      	ldr	r0, [pc, #20]	@ (8009680 <fiprintf+0x20>)
 800966a:	f853 2b04 	ldr.w	r2, [r3], #4
 800966e:	6800      	ldr	r0, [r0, #0]
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f7ff fc9d 	bl	8008fb0 <_vfiprintf_r>
 8009676:	b002      	add	sp, #8
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b003      	add	sp, #12
 800967e:	4770      	bx	lr
 8009680:	2000001c 	.word	0x2000001c

08009684 <_fputc_r>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	460e      	mov	r6, r1
 8009688:	4614      	mov	r4, r2
 800968a:	4605      	mov	r5, r0
 800968c:	b118      	cbz	r0, 8009696 <_fputc_r+0x12>
 800968e:	6a03      	ldr	r3, [r0, #32]
 8009690:	b90b      	cbnz	r3, 8009696 <_fputc_r+0x12>
 8009692:	f7ff ffcd 	bl	8009630 <__sinit>
 8009696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009698:	07d8      	lsls	r0, r3, #31
 800969a:	d405      	bmi.n	80096a8 <_fputc_r+0x24>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	0599      	lsls	r1, r3, #22
 80096a0:	d402      	bmi.n	80096a8 <_fputc_r+0x24>
 80096a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096a4:	f000 fcd7 	bl	800a056 <__retarget_lock_acquire_recursive>
 80096a8:	4622      	mov	r2, r4
 80096aa:	4628      	mov	r0, r5
 80096ac:	4631      	mov	r1, r6
 80096ae:	f000 f89f 	bl	80097f0 <_putc_r>
 80096b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096b4:	4605      	mov	r5, r0
 80096b6:	07da      	lsls	r2, r3, #31
 80096b8:	d405      	bmi.n	80096c6 <_fputc_r+0x42>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	059b      	lsls	r3, r3, #22
 80096be:	d402      	bmi.n	80096c6 <_fputc_r+0x42>
 80096c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096c2:	f000 fcc9 	bl	800a058 <__retarget_lock_release_recursive>
 80096c6:	4628      	mov	r0, r5
 80096c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080096cc <fputc>:
 80096cc:	4b02      	ldr	r3, [pc, #8]	@ (80096d8 <fputc+0xc>)
 80096ce:	460a      	mov	r2, r1
 80096d0:	4601      	mov	r1, r0
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	f7ff bfd6 	b.w	8009684 <_fputc_r>
 80096d8:	2000001c 	.word	0x2000001c

080096dc <_fwalk_sglue>:
 80096dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e0:	4607      	mov	r7, r0
 80096e2:	4688      	mov	r8, r1
 80096e4:	4614      	mov	r4, r2
 80096e6:	2600      	movs	r6, #0
 80096e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096ec:	f1b9 0901 	subs.w	r9, r9, #1
 80096f0:	d505      	bpl.n	80096fe <_fwalk_sglue+0x22>
 80096f2:	6824      	ldr	r4, [r4, #0]
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	d1f7      	bne.n	80096e8 <_fwalk_sglue+0xc>
 80096f8:	4630      	mov	r0, r6
 80096fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fe:	89ab      	ldrh	r3, [r5, #12]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d907      	bls.n	8009714 <_fwalk_sglue+0x38>
 8009704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009708:	3301      	adds	r3, #1
 800970a:	d003      	beq.n	8009714 <_fwalk_sglue+0x38>
 800970c:	4629      	mov	r1, r5
 800970e:	4638      	mov	r0, r7
 8009710:	47c0      	blx	r8
 8009712:	4306      	orrs	r6, r0
 8009714:	3568      	adds	r5, #104	@ 0x68
 8009716:	e7e9      	b.n	80096ec <_fwalk_sglue+0x10>

08009718 <_fwrite_r>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	9c08      	ldr	r4, [sp, #32]
 800971e:	468a      	mov	sl, r1
 8009720:	4690      	mov	r8, r2
 8009722:	4606      	mov	r6, r0
 8009724:	fb02 f903 	mul.w	r9, r2, r3
 8009728:	b118      	cbz	r0, 8009732 <_fwrite_r+0x1a>
 800972a:	6a03      	ldr	r3, [r0, #32]
 800972c:	b90b      	cbnz	r3, 8009732 <_fwrite_r+0x1a>
 800972e:	f7ff ff7f 	bl	8009630 <__sinit>
 8009732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009734:	07dd      	lsls	r5, r3, #31
 8009736:	d405      	bmi.n	8009744 <_fwrite_r+0x2c>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	0598      	lsls	r0, r3, #22
 800973c:	d402      	bmi.n	8009744 <_fwrite_r+0x2c>
 800973e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009740:	f000 fc89 	bl	800a056 <__retarget_lock_acquire_recursive>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	0719      	lsls	r1, r3, #28
 8009748:	d516      	bpl.n	8009778 <_fwrite_r+0x60>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	b1a3      	cbz	r3, 8009778 <_fwrite_r+0x60>
 800974e:	2500      	movs	r5, #0
 8009750:	454d      	cmp	r5, r9
 8009752:	d01f      	beq.n	8009794 <_fwrite_r+0x7c>
 8009754:	68a7      	ldr	r7, [r4, #8]
 8009756:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800975a:	3f01      	subs	r7, #1
 800975c:	2f00      	cmp	r7, #0
 800975e:	60a7      	str	r7, [r4, #8]
 8009760:	da04      	bge.n	800976c <_fwrite_r+0x54>
 8009762:	69a3      	ldr	r3, [r4, #24]
 8009764:	429f      	cmp	r7, r3
 8009766:	db0f      	blt.n	8009788 <_fwrite_r+0x70>
 8009768:	290a      	cmp	r1, #10
 800976a:	d00d      	beq.n	8009788 <_fwrite_r+0x70>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	3501      	adds	r5, #1
 8009776:	e7eb      	b.n	8009750 <_fwrite_r+0x38>
 8009778:	4621      	mov	r1, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f954 	bl	8009a28 <__swsetup_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	d0e4      	beq.n	800974e <_fwrite_r+0x36>
 8009784:	2500      	movs	r5, #0
 8009786:	e005      	b.n	8009794 <_fwrite_r+0x7c>
 8009788:	4622      	mov	r2, r4
 800978a:	4630      	mov	r0, r6
 800978c:	f000 f90d 	bl	80099aa <__swbuf_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d1ef      	bne.n	8009774 <_fwrite_r+0x5c>
 8009794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009796:	07da      	lsls	r2, r3, #31
 8009798:	d405      	bmi.n	80097a6 <_fwrite_r+0x8e>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	059b      	lsls	r3, r3, #22
 800979e:	d402      	bmi.n	80097a6 <_fwrite_r+0x8e>
 80097a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a2:	f000 fc59 	bl	800a058 <__retarget_lock_release_recursive>
 80097a6:	fbb5 f0f8 	udiv	r0, r5, r8
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080097b0 <fwrite>:
 80097b0:	b507      	push	{r0, r1, r2, lr}
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	460a      	mov	r2, r1
 80097b8:	4601      	mov	r1, r0
 80097ba:	4803      	ldr	r0, [pc, #12]	@ (80097c8 <fwrite+0x18>)
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	f7ff ffab 	bl	8009718 <_fwrite_r>
 80097c2:	b003      	add	sp, #12
 80097c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80097c8:	2000001c 	.word	0x2000001c

080097cc <iprintf>:
 80097cc:	b40f      	push	{r0, r1, r2, r3}
 80097ce:	b507      	push	{r0, r1, r2, lr}
 80097d0:	4906      	ldr	r1, [pc, #24]	@ (80097ec <iprintf+0x20>)
 80097d2:	ab04      	add	r3, sp, #16
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097da:	6881      	ldr	r1, [r0, #8]
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	f7ff fbe7 	bl	8008fb0 <_vfiprintf_r>
 80097e2:	b003      	add	sp, #12
 80097e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e8:	b004      	add	sp, #16
 80097ea:	4770      	bx	lr
 80097ec:	2000001c 	.word	0x2000001c

080097f0 <_putc_r>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	460d      	mov	r5, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	4606      	mov	r6, r0
 80097f8:	b118      	cbz	r0, 8009802 <_putc_r+0x12>
 80097fa:	6a03      	ldr	r3, [r0, #32]
 80097fc:	b90b      	cbnz	r3, 8009802 <_putc_r+0x12>
 80097fe:	f7ff ff17 	bl	8009630 <__sinit>
 8009802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009804:	07d8      	lsls	r0, r3, #31
 8009806:	d405      	bmi.n	8009814 <_putc_r+0x24>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	0599      	lsls	r1, r3, #22
 800980c:	d402      	bmi.n	8009814 <_putc_r+0x24>
 800980e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009810:	f000 fc21 	bl	800a056 <__retarget_lock_acquire_recursive>
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	3b01      	subs	r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	da05      	bge.n	800982a <_putc_r+0x3a>
 800981e:	69a2      	ldr	r2, [r4, #24]
 8009820:	4293      	cmp	r3, r2
 8009822:	db12      	blt.n	800984a <_putc_r+0x5a>
 8009824:	b2eb      	uxtb	r3, r5
 8009826:	2b0a      	cmp	r3, #10
 8009828:	d00f      	beq.n	800984a <_putc_r+0x5a>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	701d      	strb	r5, [r3, #0]
 8009832:	b2ed      	uxtb	r5, r5
 8009834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009836:	07da      	lsls	r2, r3, #31
 8009838:	d405      	bmi.n	8009846 <_putc_r+0x56>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	059b      	lsls	r3, r3, #22
 800983e:	d402      	bmi.n	8009846 <_putc_r+0x56>
 8009840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009842:	f000 fc09 	bl	800a058 <__retarget_lock_release_recursive>
 8009846:	4628      	mov	r0, r5
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	4629      	mov	r1, r5
 800984c:	4622      	mov	r2, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f000 f8ab 	bl	80099aa <__swbuf_r>
 8009854:	4605      	mov	r5, r0
 8009856:	e7ed      	b.n	8009834 <_putc_r+0x44>

08009858 <putchar>:
 8009858:	4b02      	ldr	r3, [pc, #8]	@ (8009864 <putchar+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	6882      	ldr	r2, [r0, #8]
 8009860:	f7ff bfc6 	b.w	80097f0 <_putc_r>
 8009864:	2000001c 	.word	0x2000001c

08009868 <_puts_r>:
 8009868:	6a03      	ldr	r3, [r0, #32]
 800986a:	b570      	push	{r4, r5, r6, lr}
 800986c:	4605      	mov	r5, r0
 800986e:	460e      	mov	r6, r1
 8009870:	6884      	ldr	r4, [r0, #8]
 8009872:	b90b      	cbnz	r3, 8009878 <_puts_r+0x10>
 8009874:	f7ff fedc 	bl	8009630 <__sinit>
 8009878:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800987a:	07db      	lsls	r3, r3, #31
 800987c:	d405      	bmi.n	800988a <_puts_r+0x22>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	0598      	lsls	r0, r3, #22
 8009882:	d402      	bmi.n	800988a <_puts_r+0x22>
 8009884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009886:	f000 fbe6 	bl	800a056 <__retarget_lock_acquire_recursive>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	0719      	lsls	r1, r3, #28
 800988e:	d502      	bpl.n	8009896 <_puts_r+0x2e>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d135      	bne.n	8009902 <_puts_r+0x9a>
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f000 f8c5 	bl	8009a28 <__swsetup_r>
 800989e:	b380      	cbz	r0, 8009902 <_puts_r+0x9a>
 80098a0:	f04f 35ff 	mov.w	r5, #4294967295
 80098a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098a6:	07da      	lsls	r2, r3, #31
 80098a8:	d405      	bmi.n	80098b6 <_puts_r+0x4e>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	059b      	lsls	r3, r3, #22
 80098ae:	d402      	bmi.n	80098b6 <_puts_r+0x4e>
 80098b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098b2:	f000 fbd1 	bl	800a058 <__retarget_lock_release_recursive>
 80098b6:	4628      	mov	r0, r5
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	da04      	bge.n	80098c8 <_puts_r+0x60>
 80098be:	69a2      	ldr	r2, [r4, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	dc17      	bgt.n	80098f4 <_puts_r+0x8c>
 80098c4:	290a      	cmp	r1, #10
 80098c6:	d015      	beq.n	80098f4 <_puts_r+0x8c>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	7019      	strb	r1, [r3, #0]
 80098d0:	68a3      	ldr	r3, [r4, #8]
 80098d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098d6:	3b01      	subs	r3, #1
 80098d8:	60a3      	str	r3, [r4, #8]
 80098da:	2900      	cmp	r1, #0
 80098dc:	d1ed      	bne.n	80098ba <_puts_r+0x52>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da11      	bge.n	8009906 <_puts_r+0x9e>
 80098e2:	4622      	mov	r2, r4
 80098e4:	210a      	movs	r1, #10
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f85f 	bl	80099aa <__swbuf_r>
 80098ec:	3001      	adds	r0, #1
 80098ee:	d0d7      	beq.n	80098a0 <_puts_r+0x38>
 80098f0:	250a      	movs	r5, #10
 80098f2:	e7d7      	b.n	80098a4 <_puts_r+0x3c>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f857 	bl	80099aa <__swbuf_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d1e7      	bne.n	80098d0 <_puts_r+0x68>
 8009900:	e7ce      	b.n	80098a0 <_puts_r+0x38>
 8009902:	3e01      	subs	r6, #1
 8009904:	e7e4      	b.n	80098d0 <_puts_r+0x68>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	6022      	str	r2, [r4, #0]
 800990c:	220a      	movs	r2, #10
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e7ee      	b.n	80098f0 <_puts_r+0x88>
	...

08009914 <puts>:
 8009914:	4b02      	ldr	r3, [pc, #8]	@ (8009920 <puts+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f7ff bfa5 	b.w	8009868 <_puts_r>
 800991e:	bf00      	nop
 8009920:	2000001c 	.word	0x2000001c

08009924 <__sread>:
 8009924:	b510      	push	{r4, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	f000 fb44 	bl	8009fb8 <_read_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	bfab      	itete	ge
 8009934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009936:	89a3      	ldrhlt	r3, [r4, #12]
 8009938:	181b      	addge	r3, r3, r0
 800993a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800993e:	bfac      	ite	ge
 8009940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009942:	81a3      	strhlt	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__swrite>:
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	461f      	mov	r7, r3
 800994c:	898b      	ldrh	r3, [r1, #12]
 800994e:	4605      	mov	r5, r0
 8009950:	05db      	lsls	r3, r3, #23
 8009952:	460c      	mov	r4, r1
 8009954:	4616      	mov	r6, r2
 8009956:	d505      	bpl.n	8009964 <__swrite+0x1e>
 8009958:	2302      	movs	r3, #2
 800995a:	2200      	movs	r2, #0
 800995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009960:	f000 fb18 	bl	8009f94 <_lseek_r>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	4632      	mov	r2, r6
 8009968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	4628      	mov	r0, r5
 8009970:	463b      	mov	r3, r7
 8009972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800997a:	f000 bb2f 	b.w	8009fdc <_write_r>

0800997e <__sseek>:
 800997e:	b510      	push	{r4, lr}
 8009980:	460c      	mov	r4, r1
 8009982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009986:	f000 fb05 	bl	8009f94 <_lseek_r>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	bf15      	itete	ne
 8009990:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800999a:	81a3      	strheq	r3, [r4, #12]
 800999c:	bf18      	it	ne
 800999e:	81a3      	strhne	r3, [r4, #12]
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <__sclose>:
 80099a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a6:	f000 ba8f 	b.w	8009ec8 <_close_r>

080099aa <__swbuf_r>:
 80099aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ac:	460e      	mov	r6, r1
 80099ae:	4614      	mov	r4, r2
 80099b0:	4605      	mov	r5, r0
 80099b2:	b118      	cbz	r0, 80099bc <__swbuf_r+0x12>
 80099b4:	6a03      	ldr	r3, [r0, #32]
 80099b6:	b90b      	cbnz	r3, 80099bc <__swbuf_r+0x12>
 80099b8:	f7ff fe3a 	bl	8009630 <__sinit>
 80099bc:	69a3      	ldr	r3, [r4, #24]
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	071a      	lsls	r2, r3, #28
 80099c4:	d501      	bpl.n	80099ca <__swbuf_r+0x20>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	b943      	cbnz	r3, 80099dc <__swbuf_r+0x32>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 f82b 	bl	8009a28 <__swsetup_r>
 80099d2:	b118      	cbz	r0, 80099dc <__swbuf_r+0x32>
 80099d4:	f04f 37ff 	mov.w	r7, #4294967295
 80099d8:	4638      	mov	r0, r7
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	6922      	ldr	r2, [r4, #16]
 80099e0:	b2f6      	uxtb	r6, r6
 80099e2:	1a98      	subs	r0, r3, r2
 80099e4:	6963      	ldr	r3, [r4, #20]
 80099e6:	4637      	mov	r7, r6
 80099e8:	4283      	cmp	r3, r0
 80099ea:	dc05      	bgt.n	80099f8 <__swbuf_r+0x4e>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4628      	mov	r0, r5
 80099f0:	f000 fcd4 	bl	800a39c <_fflush_r>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d1ed      	bne.n	80099d4 <__swbuf_r+0x2a>
 80099f8:	68a3      	ldr	r3, [r4, #8]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	701e      	strb	r6, [r3, #0]
 8009a06:	6962      	ldr	r2, [r4, #20]
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d004      	beq.n	8009a18 <__swbuf_r+0x6e>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	07db      	lsls	r3, r3, #31
 8009a12:	d5e1      	bpl.n	80099d8 <__swbuf_r+0x2e>
 8009a14:	2e0a      	cmp	r6, #10
 8009a16:	d1df      	bne.n	80099d8 <__swbuf_r+0x2e>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 fcbe 	bl	800a39c <_fflush_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d0d9      	beq.n	80099d8 <__swbuf_r+0x2e>
 8009a24:	e7d6      	b.n	80099d4 <__swbuf_r+0x2a>
	...

08009a28 <__swsetup_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ad0 <__swsetup_r+0xa8>)
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	460c      	mov	r4, r1
 8009a32:	b118      	cbz	r0, 8009a3c <__swsetup_r+0x14>
 8009a34:	6a03      	ldr	r3, [r0, #32]
 8009a36:	b90b      	cbnz	r3, 8009a3c <__swsetup_r+0x14>
 8009a38:	f7ff fdfa 	bl	8009630 <__sinit>
 8009a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a40:	0719      	lsls	r1, r3, #28
 8009a42:	d422      	bmi.n	8009a8a <__swsetup_r+0x62>
 8009a44:	06da      	lsls	r2, r3, #27
 8009a46:	d407      	bmi.n	8009a58 <__swsetup_r+0x30>
 8009a48:	2209      	movs	r2, #9
 8009a4a:	602a      	str	r2, [r5, #0]
 8009a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	e033      	b.n	8009ac0 <__swsetup_r+0x98>
 8009a58:	0758      	lsls	r0, r3, #29
 8009a5a:	d512      	bpl.n	8009a82 <__swsetup_r+0x5a>
 8009a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a5e:	b141      	cbz	r1, 8009a72 <__swsetup_r+0x4a>
 8009a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a64:	4299      	cmp	r1, r3
 8009a66:	d002      	beq.n	8009a6e <__swsetup_r+0x46>
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 fb21 	bl	800a0b0 <_free_r>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0308 	orr.w	r3, r3, #8
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	b94b      	cbnz	r3, 8009aa2 <__swsetup_r+0x7a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a98:	d003      	beq.n	8009aa2 <__swsetup_r+0x7a>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f000 fcca 	bl	800a436 <__smakebuf_r>
 8009aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa6:	f013 0201 	ands.w	r2, r3, #1
 8009aaa:	d00a      	beq.n	8009ac2 <__swsetup_r+0x9a>
 8009aac:	2200      	movs	r2, #0
 8009aae:	60a2      	str	r2, [r4, #8]
 8009ab0:	6962      	ldr	r2, [r4, #20]
 8009ab2:	4252      	negs	r2, r2
 8009ab4:	61a2      	str	r2, [r4, #24]
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	b942      	cbnz	r2, 8009acc <__swsetup_r+0xa4>
 8009aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009abe:	d1c5      	bne.n	8009a4c <__swsetup_r+0x24>
 8009ac0:	bd38      	pop	{r3, r4, r5, pc}
 8009ac2:	0799      	lsls	r1, r3, #30
 8009ac4:	bf58      	it	pl
 8009ac6:	6962      	ldrpl	r2, [r4, #20]
 8009ac8:	60a2      	str	r2, [r4, #8]
 8009aca:	e7f4      	b.n	8009ab6 <__swsetup_r+0x8e>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7f7      	b.n	8009ac0 <__swsetup_r+0x98>
 8009ad0:	2000001c 	.word	0x2000001c

08009ad4 <memset>:
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4402      	add	r2, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <_strerror_r>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	288e      	cmp	r0, #142	@ 0x8e
 8009af0:	f200 8130 	bhi.w	8009d54 <_strerror_r+0x270>
 8009af4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009af8:	0138008f 	.word	0x0138008f
 8009afc:	00940092 	.word	0x00940092
 8009b00:	00980096 	.word	0x00980096
 8009b04:	009c009a 	.word	0x009c009a
 8009b08:	00a2009e 	.word	0x00a2009e
 8009b0c:	00a800a4 	.word	0x00a800a4
 8009b10:	00ac00aa 	.word	0x00ac00aa
 8009b14:	012e00ae 	.word	0x012e00ae
 8009b18:	00b200b0 	.word	0x00b200b0
 8009b1c:	00b600b4 	.word	0x00b600b4
 8009b20:	00be00b8 	.word	0x00be00b8
 8009b24:	00c600c0 	.word	0x00c600c0
 8009b28:	00ca00c8 	.word	0x00ca00c8
 8009b2c:	00ce00cc 	.word	0x00ce00cc
 8009b30:	00d600d2 	.word	0x00d600d2
 8009b34:	00da00d8 	.word	0x00da00d8
 8009b38:	00de00dc 	.word	0x00de00dc
 8009b3c:	00e200e0 	.word	0x00e200e0
 8009b40:	012e00e4 	.word	0x012e00e4
 8009b44:	012e012e 	.word	0x012e012e
 8009b48:	012e012e 	.word	0x012e012e
 8009b4c:	012e012e 	.word	0x012e012e
 8009b50:	00e8012e 	.word	0x00e8012e
 8009b54:	012e00ec 	.word	0x012e00ec
 8009b58:	012e012e 	.word	0x012e012e
 8009b5c:	012e012e 	.word	0x012e012e
 8009b60:	012e012e 	.word	0x012e012e
 8009b64:	012e012e 	.word	0x012e012e
 8009b68:	012e012e 	.word	0x012e012e
 8009b6c:	012e012e 	.word	0x012e012e
 8009b70:	010800ee 	.word	0x010800ee
 8009b74:	00f200f0 	.word	0x00f200f0
 8009b78:	012e012e 	.word	0x012e012e
 8009b7c:	00f4012e 	.word	0x00f4012e
 8009b80:	012e012e 	.word	0x012e012e
 8009b84:	00f6012e 	.word	0x00f6012e
 8009b88:	012e012e 	.word	0x012e012e
 8009b8c:	012e00fa 	.word	0x012e00fa
 8009b90:	00fc012e 	.word	0x00fc012e
 8009b94:	012e012e 	.word	0x012e012e
 8009b98:	012e012e 	.word	0x012e012e
 8009b9c:	012e012e 	.word	0x012e012e
 8009ba0:	012e012e 	.word	0x012e012e
 8009ba4:	012e012e 	.word	0x012e012e
 8009ba8:	012e00fe 	.word	0x012e00fe
 8009bac:	01020100 	.word	0x01020100
 8009bb0:	012e0104 	.word	0x012e0104
 8009bb4:	0126012e 	.word	0x0126012e
 8009bb8:	012e012e 	.word	0x012e012e
 8009bbc:	012e012e 	.word	0x012e012e
 8009bc0:	012e012e 	.word	0x012e012e
 8009bc4:	012e012e 	.word	0x012e012e
 8009bc8:	01060114 	.word	0x01060114
 8009bcc:	010c010a 	.word	0x010c010a
 8009bd0:	0110010e 	.word	0x0110010e
 8009bd4:	0112012e 	.word	0x0112012e
 8009bd8:	011a0116 	.word	0x011a0116
 8009bdc:	00c200ea 	.word	0x00c200ea
 8009be0:	00ba012c 	.word	0x00ba012c
 8009be4:	00bc00d0 	.word	0x00bc00d0
 8009be8:	00a600a0 	.word	0x00a600a0
 8009bec:	00f8012a 	.word	0x00f8012a
 8009bf0:	0118012e 	.word	0x0118012e
 8009bf4:	011e00c4 	.word	0x011e00c4
 8009bf8:	012e011c 	.word	0x012e011c
 8009bfc:	012e012e 	.word	0x012e012e
 8009c00:	012e012e 	.word	0x012e012e
 8009c04:	012e00d4 	.word	0x012e00d4
 8009c08:	012e012e 	.word	0x012e012e
 8009c0c:	012800e6 	.word	0x012800e6
 8009c10:	01220120 	.word	0x01220120
 8009c14:	0124      	.short	0x0124
 8009c16:	4b55      	ldr	r3, [pc, #340]	@ (8009d6c <_strerror_r+0x288>)
 8009c18:	4618      	mov	r0, r3
 8009c1a:	bd10      	pop	{r4, pc}
 8009c1c:	4b54      	ldr	r3, [pc, #336]	@ (8009d70 <_strerror_r+0x28c>)
 8009c1e:	e7fb      	b.n	8009c18 <_strerror_r+0x134>
 8009c20:	4b54      	ldr	r3, [pc, #336]	@ (8009d74 <_strerror_r+0x290>)
 8009c22:	e7f9      	b.n	8009c18 <_strerror_r+0x134>
 8009c24:	4b54      	ldr	r3, [pc, #336]	@ (8009d78 <_strerror_r+0x294>)
 8009c26:	e7f7      	b.n	8009c18 <_strerror_r+0x134>
 8009c28:	4b54      	ldr	r3, [pc, #336]	@ (8009d7c <_strerror_r+0x298>)
 8009c2a:	e7f5      	b.n	8009c18 <_strerror_r+0x134>
 8009c2c:	4b54      	ldr	r3, [pc, #336]	@ (8009d80 <_strerror_r+0x29c>)
 8009c2e:	e7f3      	b.n	8009c18 <_strerror_r+0x134>
 8009c30:	4b54      	ldr	r3, [pc, #336]	@ (8009d84 <_strerror_r+0x2a0>)
 8009c32:	e7f1      	b.n	8009c18 <_strerror_r+0x134>
 8009c34:	4b54      	ldr	r3, [pc, #336]	@ (8009d88 <_strerror_r+0x2a4>)
 8009c36:	e7ef      	b.n	8009c18 <_strerror_r+0x134>
 8009c38:	4b54      	ldr	r3, [pc, #336]	@ (8009d8c <_strerror_r+0x2a8>)
 8009c3a:	e7ed      	b.n	8009c18 <_strerror_r+0x134>
 8009c3c:	4b54      	ldr	r3, [pc, #336]	@ (8009d90 <_strerror_r+0x2ac>)
 8009c3e:	e7eb      	b.n	8009c18 <_strerror_r+0x134>
 8009c40:	4b54      	ldr	r3, [pc, #336]	@ (8009d94 <_strerror_r+0x2b0>)
 8009c42:	e7e9      	b.n	8009c18 <_strerror_r+0x134>
 8009c44:	4b54      	ldr	r3, [pc, #336]	@ (8009d98 <_strerror_r+0x2b4>)
 8009c46:	e7e7      	b.n	8009c18 <_strerror_r+0x134>
 8009c48:	4b54      	ldr	r3, [pc, #336]	@ (8009d9c <_strerror_r+0x2b8>)
 8009c4a:	e7e5      	b.n	8009c18 <_strerror_r+0x134>
 8009c4c:	4b54      	ldr	r3, [pc, #336]	@ (8009da0 <_strerror_r+0x2bc>)
 8009c4e:	e7e3      	b.n	8009c18 <_strerror_r+0x134>
 8009c50:	4b54      	ldr	r3, [pc, #336]	@ (8009da4 <_strerror_r+0x2c0>)
 8009c52:	e7e1      	b.n	8009c18 <_strerror_r+0x134>
 8009c54:	4b54      	ldr	r3, [pc, #336]	@ (8009da8 <_strerror_r+0x2c4>)
 8009c56:	e7df      	b.n	8009c18 <_strerror_r+0x134>
 8009c58:	4b54      	ldr	r3, [pc, #336]	@ (8009dac <_strerror_r+0x2c8>)
 8009c5a:	e7dd      	b.n	8009c18 <_strerror_r+0x134>
 8009c5c:	4b54      	ldr	r3, [pc, #336]	@ (8009db0 <_strerror_r+0x2cc>)
 8009c5e:	e7db      	b.n	8009c18 <_strerror_r+0x134>
 8009c60:	4b54      	ldr	r3, [pc, #336]	@ (8009db4 <_strerror_r+0x2d0>)
 8009c62:	e7d9      	b.n	8009c18 <_strerror_r+0x134>
 8009c64:	4b54      	ldr	r3, [pc, #336]	@ (8009db8 <_strerror_r+0x2d4>)
 8009c66:	e7d7      	b.n	8009c18 <_strerror_r+0x134>
 8009c68:	4b54      	ldr	r3, [pc, #336]	@ (8009dbc <_strerror_r+0x2d8>)
 8009c6a:	e7d5      	b.n	8009c18 <_strerror_r+0x134>
 8009c6c:	4b54      	ldr	r3, [pc, #336]	@ (8009dc0 <_strerror_r+0x2dc>)
 8009c6e:	e7d3      	b.n	8009c18 <_strerror_r+0x134>
 8009c70:	4b54      	ldr	r3, [pc, #336]	@ (8009dc4 <_strerror_r+0x2e0>)
 8009c72:	e7d1      	b.n	8009c18 <_strerror_r+0x134>
 8009c74:	4b54      	ldr	r3, [pc, #336]	@ (8009dc8 <_strerror_r+0x2e4>)
 8009c76:	e7cf      	b.n	8009c18 <_strerror_r+0x134>
 8009c78:	4b54      	ldr	r3, [pc, #336]	@ (8009dcc <_strerror_r+0x2e8>)
 8009c7a:	e7cd      	b.n	8009c18 <_strerror_r+0x134>
 8009c7c:	4b54      	ldr	r3, [pc, #336]	@ (8009dd0 <_strerror_r+0x2ec>)
 8009c7e:	e7cb      	b.n	8009c18 <_strerror_r+0x134>
 8009c80:	4b54      	ldr	r3, [pc, #336]	@ (8009dd4 <_strerror_r+0x2f0>)
 8009c82:	e7c9      	b.n	8009c18 <_strerror_r+0x134>
 8009c84:	4b54      	ldr	r3, [pc, #336]	@ (8009dd8 <_strerror_r+0x2f4>)
 8009c86:	e7c7      	b.n	8009c18 <_strerror_r+0x134>
 8009c88:	4b54      	ldr	r3, [pc, #336]	@ (8009ddc <_strerror_r+0x2f8>)
 8009c8a:	e7c5      	b.n	8009c18 <_strerror_r+0x134>
 8009c8c:	4b54      	ldr	r3, [pc, #336]	@ (8009de0 <_strerror_r+0x2fc>)
 8009c8e:	e7c3      	b.n	8009c18 <_strerror_r+0x134>
 8009c90:	4b54      	ldr	r3, [pc, #336]	@ (8009de4 <_strerror_r+0x300>)
 8009c92:	e7c1      	b.n	8009c18 <_strerror_r+0x134>
 8009c94:	4b54      	ldr	r3, [pc, #336]	@ (8009de8 <_strerror_r+0x304>)
 8009c96:	e7bf      	b.n	8009c18 <_strerror_r+0x134>
 8009c98:	4b54      	ldr	r3, [pc, #336]	@ (8009dec <_strerror_r+0x308>)
 8009c9a:	e7bd      	b.n	8009c18 <_strerror_r+0x134>
 8009c9c:	4b54      	ldr	r3, [pc, #336]	@ (8009df0 <_strerror_r+0x30c>)
 8009c9e:	e7bb      	b.n	8009c18 <_strerror_r+0x134>
 8009ca0:	4b54      	ldr	r3, [pc, #336]	@ (8009df4 <_strerror_r+0x310>)
 8009ca2:	e7b9      	b.n	8009c18 <_strerror_r+0x134>
 8009ca4:	4b54      	ldr	r3, [pc, #336]	@ (8009df8 <_strerror_r+0x314>)
 8009ca6:	e7b7      	b.n	8009c18 <_strerror_r+0x134>
 8009ca8:	4b54      	ldr	r3, [pc, #336]	@ (8009dfc <_strerror_r+0x318>)
 8009caa:	e7b5      	b.n	8009c18 <_strerror_r+0x134>
 8009cac:	4b54      	ldr	r3, [pc, #336]	@ (8009e00 <_strerror_r+0x31c>)
 8009cae:	e7b3      	b.n	8009c18 <_strerror_r+0x134>
 8009cb0:	4b54      	ldr	r3, [pc, #336]	@ (8009e04 <_strerror_r+0x320>)
 8009cb2:	e7b1      	b.n	8009c18 <_strerror_r+0x134>
 8009cb4:	4b54      	ldr	r3, [pc, #336]	@ (8009e08 <_strerror_r+0x324>)
 8009cb6:	e7af      	b.n	8009c18 <_strerror_r+0x134>
 8009cb8:	4b54      	ldr	r3, [pc, #336]	@ (8009e0c <_strerror_r+0x328>)
 8009cba:	e7ad      	b.n	8009c18 <_strerror_r+0x134>
 8009cbc:	4b54      	ldr	r3, [pc, #336]	@ (8009e10 <_strerror_r+0x32c>)
 8009cbe:	e7ab      	b.n	8009c18 <_strerror_r+0x134>
 8009cc0:	4b54      	ldr	r3, [pc, #336]	@ (8009e14 <_strerror_r+0x330>)
 8009cc2:	e7a9      	b.n	8009c18 <_strerror_r+0x134>
 8009cc4:	4b54      	ldr	r3, [pc, #336]	@ (8009e18 <_strerror_r+0x334>)
 8009cc6:	e7a7      	b.n	8009c18 <_strerror_r+0x134>
 8009cc8:	4b54      	ldr	r3, [pc, #336]	@ (8009e1c <_strerror_r+0x338>)
 8009cca:	e7a5      	b.n	8009c18 <_strerror_r+0x134>
 8009ccc:	4b54      	ldr	r3, [pc, #336]	@ (8009e20 <_strerror_r+0x33c>)
 8009cce:	e7a3      	b.n	8009c18 <_strerror_r+0x134>
 8009cd0:	4b54      	ldr	r3, [pc, #336]	@ (8009e24 <_strerror_r+0x340>)
 8009cd2:	e7a1      	b.n	8009c18 <_strerror_r+0x134>
 8009cd4:	4b54      	ldr	r3, [pc, #336]	@ (8009e28 <_strerror_r+0x344>)
 8009cd6:	e79f      	b.n	8009c18 <_strerror_r+0x134>
 8009cd8:	4b54      	ldr	r3, [pc, #336]	@ (8009e2c <_strerror_r+0x348>)
 8009cda:	e79d      	b.n	8009c18 <_strerror_r+0x134>
 8009cdc:	4b54      	ldr	r3, [pc, #336]	@ (8009e30 <_strerror_r+0x34c>)
 8009cde:	e79b      	b.n	8009c18 <_strerror_r+0x134>
 8009ce0:	4b54      	ldr	r3, [pc, #336]	@ (8009e34 <_strerror_r+0x350>)
 8009ce2:	e799      	b.n	8009c18 <_strerror_r+0x134>
 8009ce4:	4b54      	ldr	r3, [pc, #336]	@ (8009e38 <_strerror_r+0x354>)
 8009ce6:	e797      	b.n	8009c18 <_strerror_r+0x134>
 8009ce8:	4b54      	ldr	r3, [pc, #336]	@ (8009e3c <_strerror_r+0x358>)
 8009cea:	e795      	b.n	8009c18 <_strerror_r+0x134>
 8009cec:	4b54      	ldr	r3, [pc, #336]	@ (8009e40 <_strerror_r+0x35c>)
 8009cee:	e793      	b.n	8009c18 <_strerror_r+0x134>
 8009cf0:	4b54      	ldr	r3, [pc, #336]	@ (8009e44 <_strerror_r+0x360>)
 8009cf2:	e791      	b.n	8009c18 <_strerror_r+0x134>
 8009cf4:	4b54      	ldr	r3, [pc, #336]	@ (8009e48 <_strerror_r+0x364>)
 8009cf6:	e78f      	b.n	8009c18 <_strerror_r+0x134>
 8009cf8:	4b54      	ldr	r3, [pc, #336]	@ (8009e4c <_strerror_r+0x368>)
 8009cfa:	e78d      	b.n	8009c18 <_strerror_r+0x134>
 8009cfc:	4b54      	ldr	r3, [pc, #336]	@ (8009e50 <_strerror_r+0x36c>)
 8009cfe:	e78b      	b.n	8009c18 <_strerror_r+0x134>
 8009d00:	4b54      	ldr	r3, [pc, #336]	@ (8009e54 <_strerror_r+0x370>)
 8009d02:	e789      	b.n	8009c18 <_strerror_r+0x134>
 8009d04:	4b54      	ldr	r3, [pc, #336]	@ (8009e58 <_strerror_r+0x374>)
 8009d06:	e787      	b.n	8009c18 <_strerror_r+0x134>
 8009d08:	4b54      	ldr	r3, [pc, #336]	@ (8009e5c <_strerror_r+0x378>)
 8009d0a:	e785      	b.n	8009c18 <_strerror_r+0x134>
 8009d0c:	4b54      	ldr	r3, [pc, #336]	@ (8009e60 <_strerror_r+0x37c>)
 8009d0e:	e783      	b.n	8009c18 <_strerror_r+0x134>
 8009d10:	4b54      	ldr	r3, [pc, #336]	@ (8009e64 <_strerror_r+0x380>)
 8009d12:	e781      	b.n	8009c18 <_strerror_r+0x134>
 8009d14:	4b54      	ldr	r3, [pc, #336]	@ (8009e68 <_strerror_r+0x384>)
 8009d16:	e77f      	b.n	8009c18 <_strerror_r+0x134>
 8009d18:	4b54      	ldr	r3, [pc, #336]	@ (8009e6c <_strerror_r+0x388>)
 8009d1a:	e77d      	b.n	8009c18 <_strerror_r+0x134>
 8009d1c:	4b54      	ldr	r3, [pc, #336]	@ (8009e70 <_strerror_r+0x38c>)
 8009d1e:	e77b      	b.n	8009c18 <_strerror_r+0x134>
 8009d20:	4b54      	ldr	r3, [pc, #336]	@ (8009e74 <_strerror_r+0x390>)
 8009d22:	e779      	b.n	8009c18 <_strerror_r+0x134>
 8009d24:	4b54      	ldr	r3, [pc, #336]	@ (8009e78 <_strerror_r+0x394>)
 8009d26:	e777      	b.n	8009c18 <_strerror_r+0x134>
 8009d28:	4b54      	ldr	r3, [pc, #336]	@ (8009e7c <_strerror_r+0x398>)
 8009d2a:	e775      	b.n	8009c18 <_strerror_r+0x134>
 8009d2c:	4b54      	ldr	r3, [pc, #336]	@ (8009e80 <_strerror_r+0x39c>)
 8009d2e:	e773      	b.n	8009c18 <_strerror_r+0x134>
 8009d30:	4b54      	ldr	r3, [pc, #336]	@ (8009e84 <_strerror_r+0x3a0>)
 8009d32:	e771      	b.n	8009c18 <_strerror_r+0x134>
 8009d34:	4b54      	ldr	r3, [pc, #336]	@ (8009e88 <_strerror_r+0x3a4>)
 8009d36:	e76f      	b.n	8009c18 <_strerror_r+0x134>
 8009d38:	4b54      	ldr	r3, [pc, #336]	@ (8009e8c <_strerror_r+0x3a8>)
 8009d3a:	e76d      	b.n	8009c18 <_strerror_r+0x134>
 8009d3c:	4b54      	ldr	r3, [pc, #336]	@ (8009e90 <_strerror_r+0x3ac>)
 8009d3e:	e76b      	b.n	8009c18 <_strerror_r+0x134>
 8009d40:	4b54      	ldr	r3, [pc, #336]	@ (8009e94 <_strerror_r+0x3b0>)
 8009d42:	e769      	b.n	8009c18 <_strerror_r+0x134>
 8009d44:	4b54      	ldr	r3, [pc, #336]	@ (8009e98 <_strerror_r+0x3b4>)
 8009d46:	e767      	b.n	8009c18 <_strerror_r+0x134>
 8009d48:	4b54      	ldr	r3, [pc, #336]	@ (8009e9c <_strerror_r+0x3b8>)
 8009d4a:	e765      	b.n	8009c18 <_strerror_r+0x134>
 8009d4c:	4b54      	ldr	r3, [pc, #336]	@ (8009ea0 <_strerror_r+0x3bc>)
 8009d4e:	e763      	b.n	8009c18 <_strerror_r+0x134>
 8009d50:	4b54      	ldr	r3, [pc, #336]	@ (8009ea4 <_strerror_r+0x3c0>)
 8009d52:	e761      	b.n	8009c18 <_strerror_r+0x134>
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	bf08      	it	eq
 8009d58:	4622      	moveq	r2, r4
 8009d5a:	f000 f8b3 	bl	8009ec4 <_user_strerror>
 8009d5e:	4b52      	ldr	r3, [pc, #328]	@ (8009ea8 <_strerror_r+0x3c4>)
 8009d60:	2800      	cmp	r0, #0
 8009d62:	bf18      	it	ne
 8009d64:	4603      	movne	r3, r0
 8009d66:	e757      	b.n	8009c18 <_strerror_r+0x134>
 8009d68:	4b50      	ldr	r3, [pc, #320]	@ (8009eac <_strerror_r+0x3c8>)
 8009d6a:	e755      	b.n	8009c18 <_strerror_r+0x134>
 8009d6c:	0800b18f 	.word	0x0800b18f
 8009d70:	0800b1a1 	.word	0x0800b1a1
 8009d74:	0800b1bb 	.word	0x0800b1bb
 8009d78:	0800b1cb 	.word	0x0800b1cb
 8009d7c:	0800b1e3 	.word	0x0800b1e3
 8009d80:	0800b1ed 	.word	0x0800b1ed
 8009d84:	0800b207 	.word	0x0800b207
 8009d88:	0800b219 	.word	0x0800b219
 8009d8c:	0800b22b 	.word	0x0800b22b
 8009d90:	0800b244 	.word	0x0800b244
 8009d94:	0800b254 	.word	0x0800b254
 8009d98:	0800b260 	.word	0x0800b260
 8009d9c:	0800b27d 	.word	0x0800b27d
 8009da0:	0800b28f 	.word	0x0800b28f
 8009da4:	0800b2a0 	.word	0x0800b2a0
 8009da8:	0800b2b2 	.word	0x0800b2b2
 8009dac:	0800b2be 	.word	0x0800b2be
 8009db0:	0800b2d6 	.word	0x0800b2d6
 8009db4:	0800b2e2 	.word	0x0800b2e2
 8009db8:	0800b2f4 	.word	0x0800b2f4
 8009dbc:	0800b303 	.word	0x0800b303
 8009dc0:	0800b313 	.word	0x0800b313
 8009dc4:	0800b320 	.word	0x0800b320
 8009dc8:	0800b33f 	.word	0x0800b33f
 8009dcc:	0800b34e 	.word	0x0800b34e
 8009dd0:	0800b35f 	.word	0x0800b35f
 8009dd4:	0800b383 	.word	0x0800b383
 8009dd8:	0800b3a1 	.word	0x0800b3a1
 8009ddc:	0800b3bf 	.word	0x0800b3bf
 8009de0:	0800b3df 	.word	0x0800b3df
 8009de4:	0800b3f6 	.word	0x0800b3f6
 8009de8:	0800b405 	.word	0x0800b405
 8009dec:	0800b414 	.word	0x0800b414
 8009df0:	0800b428 	.word	0x0800b428
 8009df4:	0800b440 	.word	0x0800b440
 8009df8:	0800b44e 	.word	0x0800b44e
 8009dfc:	0800b45b 	.word	0x0800b45b
 8009e00:	0800b471 	.word	0x0800b471
 8009e04:	0800b480 	.word	0x0800b480
 8009e08:	0800b48c 	.word	0x0800b48c
 8009e0c:	0800b4bb 	.word	0x0800b4bb
 8009e10:	0800b4cc 	.word	0x0800b4cc
 8009e14:	0800b4e7 	.word	0x0800b4e7
 8009e18:	0800b4fa 	.word	0x0800b4fa
 8009e1c:	0800b510 	.word	0x0800b510
 8009e20:	0800b519 	.word	0x0800b519
 8009e24:	0800b530 	.word	0x0800b530
 8009e28:	0800b538 	.word	0x0800b538
 8009e2c:	0800b545 	.word	0x0800b545
 8009e30:	0800b55a 	.word	0x0800b55a
 8009e34:	0800b56e 	.word	0x0800b56e
 8009e38:	0800b586 	.word	0x0800b586
 8009e3c:	0800b595 	.word	0x0800b595
 8009e40:	0800b5a6 	.word	0x0800b5a6
 8009e44:	0800b5b9 	.word	0x0800b5b9
 8009e48:	0800b5c5 	.word	0x0800b5c5
 8009e4c:	0800b5de 	.word	0x0800b5de
 8009e50:	0800b5f2 	.word	0x0800b5f2
 8009e54:	0800b60d 	.word	0x0800b60d
 8009e58:	0800b625 	.word	0x0800b625
 8009e5c:	0800b63f 	.word	0x0800b63f
 8009e60:	0800b647 	.word	0x0800b647
 8009e64:	0800b677 	.word	0x0800b677
 8009e68:	0800b696 	.word	0x0800b696
 8009e6c:	0800b6b5 	.word	0x0800b6b5
 8009e70:	0800b6cc 	.word	0x0800b6cc
 8009e74:	0800b6df 	.word	0x0800b6df
 8009e78:	0800b6f8 	.word	0x0800b6f8
 8009e7c:	0800b70f 	.word	0x0800b70f
 8009e80:	0800b725 	.word	0x0800b725
 8009e84:	0800b746 	.word	0x0800b746
 8009e88:	0800b75e 	.word	0x0800b75e
 8009e8c:	0800b77a 	.word	0x0800b77a
 8009e90:	0800b78d 	.word	0x0800b78d
 8009e94:	0800b7a3 	.word	0x0800b7a3
 8009e98:	0800b7b7 	.word	0x0800b7b7
 8009e9c:	0800b7d9 	.word	0x0800b7d9
 8009ea0:	0800b7ff 	.word	0x0800b7ff
 8009ea4:	0800b810 	.word	0x0800b810
 8009ea8:	0800b15b 	.word	0x0800b15b
 8009eac:	0800b197 	.word	0x0800b197

08009eb0 <strerror>:
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	4802      	ldr	r0, [pc, #8]	@ (8009ec0 <strerror+0x10>)
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6800      	ldr	r0, [r0, #0]
 8009eba:	f7ff be13 	b.w	8009ae4 <_strerror_r>
 8009ebe:	bf00      	nop
 8009ec0:	2000001c 	.word	0x2000001c

08009ec4 <_user_strerror>:
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	4770      	bx	lr

08009ec8 <_close_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4d05      	ldr	r5, [pc, #20]	@ (8009ee4 <_close_r+0x1c>)
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f6 fd01 	bl	80008da <_close>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_close_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_close_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20002f54 	.word	0x20002f54

08009ee8 <_reclaim_reent>:
 8009ee8:	4b29      	ldr	r3, [pc, #164]	@ (8009f90 <_reclaim_reent+0xa8>)
 8009eea:	b570      	push	{r4, r5, r6, lr}
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4283      	cmp	r3, r0
 8009ef2:	d04b      	beq.n	8009f8c <_reclaim_reent+0xa4>
 8009ef4:	69c3      	ldr	r3, [r0, #28]
 8009ef6:	b1ab      	cbz	r3, 8009f24 <_reclaim_reent+0x3c>
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	b16b      	cbz	r3, 8009f18 <_reclaim_reent+0x30>
 8009efc:	2500      	movs	r5, #0
 8009efe:	69e3      	ldr	r3, [r4, #28]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	5959      	ldr	r1, [r3, r5]
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d13b      	bne.n	8009f80 <_reclaim_reent+0x98>
 8009f08:	3504      	adds	r5, #4
 8009f0a:	2d80      	cmp	r5, #128	@ 0x80
 8009f0c:	d1f7      	bne.n	8009efe <_reclaim_reent+0x16>
 8009f0e:	69e3      	ldr	r3, [r4, #28]
 8009f10:	4620      	mov	r0, r4
 8009f12:	68d9      	ldr	r1, [r3, #12]
 8009f14:	f000 f8cc 	bl	800a0b0 <_free_r>
 8009f18:	69e3      	ldr	r3, [r4, #28]
 8009f1a:	6819      	ldr	r1, [r3, #0]
 8009f1c:	b111      	cbz	r1, 8009f24 <_reclaim_reent+0x3c>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 f8c6 	bl	800a0b0 <_free_r>
 8009f24:	6961      	ldr	r1, [r4, #20]
 8009f26:	b111      	cbz	r1, 8009f2e <_reclaim_reent+0x46>
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 f8c1 	bl	800a0b0 <_free_r>
 8009f2e:	69e1      	ldr	r1, [r4, #28]
 8009f30:	b111      	cbz	r1, 8009f38 <_reclaim_reent+0x50>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f8bc 	bl	800a0b0 <_free_r>
 8009f38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f3a:	b111      	cbz	r1, 8009f42 <_reclaim_reent+0x5a>
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f8b7 	bl	800a0b0 <_free_r>
 8009f42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f44:	b111      	cbz	r1, 8009f4c <_reclaim_reent+0x64>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f8b2 	bl	800a0b0 <_free_r>
 8009f4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f4e:	b111      	cbz	r1, 8009f56 <_reclaim_reent+0x6e>
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f8ad 	bl	800a0b0 <_free_r>
 8009f56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009f58:	b111      	cbz	r1, 8009f60 <_reclaim_reent+0x78>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f8a8 	bl	800a0b0 <_free_r>
 8009f60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009f62:	b111      	cbz	r1, 8009f6a <_reclaim_reent+0x82>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 f8a3 	bl	800a0b0 <_free_r>
 8009f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f6c:	b111      	cbz	r1, 8009f74 <_reclaim_reent+0x8c>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f89e 	bl	800a0b0 <_free_r>
 8009f74:	6a23      	ldr	r3, [r4, #32]
 8009f76:	b14b      	cbz	r3, 8009f8c <_reclaim_reent+0xa4>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f7e:	4718      	bx	r3
 8009f80:	680e      	ldr	r6, [r1, #0]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f894 	bl	800a0b0 <_free_r>
 8009f88:	4631      	mov	r1, r6
 8009f8a:	e7bb      	b.n	8009f04 <_reclaim_reent+0x1c>
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000001c 	.word	0x2000001c

08009f94 <_lseek_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4d05      	ldr	r5, [pc, #20]	@ (8009fb4 <_lseek_r+0x20>)
 8009fa0:	602a      	str	r2, [r5, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f7f6 fcbd 	bl	8000922 <_lseek>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_lseek_r+0x1e>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_lseek_r+0x1e>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	20002f54 	.word	0x20002f54

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4d05      	ldr	r5, [pc, #20]	@ (8009fd8 <_read_r+0x20>)
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f6 fc4e 	bl	8000868 <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20002f54 	.word	0x20002f54

08009fdc <_write_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4d05      	ldr	r5, [pc, #20]	@ (8009ffc <_write_r+0x20>)
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7f6 fc59 	bl	80008a2 <_write>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_write_r+0x1e>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_write_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20002f54 	.word	0x20002f54

0800a000 <__errno>:
 800a000:	4b01      	ldr	r3, [pc, #4]	@ (800a008 <__errno+0x8>)
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	2000001c 	.word	0x2000001c

0800a00c <__libc_init_array>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	2600      	movs	r6, #0
 800a010:	4d0c      	ldr	r5, [pc, #48]	@ (800a044 <__libc_init_array+0x38>)
 800a012:	4c0d      	ldr	r4, [pc, #52]	@ (800a048 <__libc_init_array+0x3c>)
 800a014:	1b64      	subs	r4, r4, r5
 800a016:	10a4      	asrs	r4, r4, #2
 800a018:	42a6      	cmp	r6, r4
 800a01a:	d109      	bne.n	800a030 <__libc_init_array+0x24>
 800a01c:	f000 fabe 	bl	800a59c <_init>
 800a020:	2600      	movs	r6, #0
 800a022:	4d0a      	ldr	r5, [pc, #40]	@ (800a04c <__libc_init_array+0x40>)
 800a024:	4c0a      	ldr	r4, [pc, #40]	@ (800a050 <__libc_init_array+0x44>)
 800a026:	1b64      	subs	r4, r4, r5
 800a028:	10a4      	asrs	r4, r4, #2
 800a02a:	42a6      	cmp	r6, r4
 800a02c:	d105      	bne.n	800a03a <__libc_init_array+0x2e>
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	f855 3b04 	ldr.w	r3, [r5], #4
 800a034:	4798      	blx	r3
 800a036:	3601      	adds	r6, #1
 800a038:	e7ee      	b.n	800a018 <__libc_init_array+0xc>
 800a03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03e:	4798      	blx	r3
 800a040:	3601      	adds	r6, #1
 800a042:	e7f2      	b.n	800a02a <__libc_init_array+0x1e>
 800a044:	0800b830 	.word	0x0800b830
 800a048:	0800b830 	.word	0x0800b830
 800a04c:	0800b830 	.word	0x0800b830
 800a050:	0800b834 	.word	0x0800b834

0800a054 <__retarget_lock_init_recursive>:
 800a054:	4770      	bx	lr

0800a056 <__retarget_lock_acquire_recursive>:
 800a056:	4770      	bx	lr

0800a058 <__retarget_lock_release_recursive>:
 800a058:	4770      	bx	lr

0800a05a <strcpy>:
 800a05a:	4603      	mov	r3, r0
 800a05c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a060:	f803 2b01 	strb.w	r2, [r3], #1
 800a064:	2a00      	cmp	r2, #0
 800a066:	d1f9      	bne.n	800a05c <strcpy+0x2>
 800a068:	4770      	bx	lr

0800a06a <memchr>:
 800a06a:	4603      	mov	r3, r0
 800a06c:	b510      	push	{r4, lr}
 800a06e:	b2c9      	uxtb	r1, r1
 800a070:	4402      	add	r2, r0
 800a072:	4293      	cmp	r3, r2
 800a074:	4618      	mov	r0, r3
 800a076:	d101      	bne.n	800a07c <memchr+0x12>
 800a078:	2000      	movs	r0, #0
 800a07a:	e003      	b.n	800a084 <memchr+0x1a>
 800a07c:	7804      	ldrb	r4, [r0, #0]
 800a07e:	3301      	adds	r3, #1
 800a080:	428c      	cmp	r4, r1
 800a082:	d1f6      	bne.n	800a072 <memchr+0x8>
 800a084:	bd10      	pop	{r4, pc}

0800a086 <memcpy>:
 800a086:	440a      	add	r2, r1
 800a088:	4291      	cmp	r1, r2
 800a08a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a08e:	d100      	bne.n	800a092 <memcpy+0xc>
 800a090:	4770      	bx	lr
 800a092:	b510      	push	{r4, lr}
 800a094:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a098:	4291      	cmp	r1, r2
 800a09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a09e:	d1f9      	bne.n	800a094 <memcpy+0xe>
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <abort>:
 800a0a2:	2006      	movs	r0, #6
 800a0a4:	b508      	push	{r3, lr}
 800a0a6:	f000 fa2b 	bl	800a500 <raise>
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f7f6 fbd1 	bl	8000852 <_exit>

0800a0b0 <_free_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d040      	beq.n	800a13a <_free_r+0x8a>
 800a0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0bc:	1f0c      	subs	r4, r1, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfb8      	it	lt
 800a0c2:	18e4      	addlt	r4, r4, r3
 800a0c4:	f000 f8de 	bl	800a284 <__malloc_lock>
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a13c <_free_r+0x8c>)
 800a0ca:	6813      	ldr	r3, [r2, #0]
 800a0cc:	b933      	cbnz	r3, 800a0dc <_free_r+0x2c>
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	6014      	str	r4, [r2, #0]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d8:	f000 b8da 	b.w	800a290 <__malloc_unlock>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d908      	bls.n	800a0f2 <_free_r+0x42>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	1821      	adds	r1, r4, r0
 800a0e4:	428b      	cmp	r3, r1
 800a0e6:	bf01      	itttt	eq
 800a0e8:	6819      	ldreq	r1, [r3, #0]
 800a0ea:	685b      	ldreq	r3, [r3, #4]
 800a0ec:	1809      	addeq	r1, r1, r0
 800a0ee:	6021      	streq	r1, [r4, #0]
 800a0f0:	e7ed      	b.n	800a0ce <_free_r+0x1e>
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	b10b      	cbz	r3, 800a0fc <_free_r+0x4c>
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d9fa      	bls.n	800a0f2 <_free_r+0x42>
 800a0fc:	6811      	ldr	r1, [r2, #0]
 800a0fe:	1850      	adds	r0, r2, r1
 800a100:	42a0      	cmp	r0, r4
 800a102:	d10b      	bne.n	800a11c <_free_r+0x6c>
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	4401      	add	r1, r0
 800a108:	1850      	adds	r0, r2, r1
 800a10a:	4283      	cmp	r3, r0
 800a10c:	6011      	str	r1, [r2, #0]
 800a10e:	d1e0      	bne.n	800a0d2 <_free_r+0x22>
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4408      	add	r0, r1
 800a116:	6010      	str	r0, [r2, #0]
 800a118:	6053      	str	r3, [r2, #4]
 800a11a:	e7da      	b.n	800a0d2 <_free_r+0x22>
 800a11c:	d902      	bls.n	800a124 <_free_r+0x74>
 800a11e:	230c      	movs	r3, #12
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	e7d6      	b.n	800a0d2 <_free_r+0x22>
 800a124:	6820      	ldr	r0, [r4, #0]
 800a126:	1821      	adds	r1, r4, r0
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1809      	addeq	r1, r1, r0
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	6054      	str	r4, [r2, #4]
 800a138:	e7cb      	b.n	800a0d2 <_free_r+0x22>
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20002f60 	.word	0x20002f60

0800a140 <sbrk_aligned>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	4e0f      	ldr	r6, [pc, #60]	@ (800a180 <sbrk_aligned+0x40>)
 800a144:	460c      	mov	r4, r1
 800a146:	6831      	ldr	r1, [r6, #0]
 800a148:	4605      	mov	r5, r0
 800a14a:	b911      	cbnz	r1, 800a152 <sbrk_aligned+0x12>
 800a14c:	f000 fa16 	bl	800a57c <_sbrk_r>
 800a150:	6030      	str	r0, [r6, #0]
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f000 fa11 	bl	800a57c <_sbrk_r>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d103      	bne.n	800a166 <sbrk_aligned+0x26>
 800a15e:	f04f 34ff 	mov.w	r4, #4294967295
 800a162:	4620      	mov	r0, r4
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	1cc4      	adds	r4, r0, #3
 800a168:	f024 0403 	bic.w	r4, r4, #3
 800a16c:	42a0      	cmp	r0, r4
 800a16e:	d0f8      	beq.n	800a162 <sbrk_aligned+0x22>
 800a170:	1a21      	subs	r1, r4, r0
 800a172:	4628      	mov	r0, r5
 800a174:	f000 fa02 	bl	800a57c <_sbrk_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	d1f2      	bne.n	800a162 <sbrk_aligned+0x22>
 800a17c:	e7ef      	b.n	800a15e <sbrk_aligned+0x1e>
 800a17e:	bf00      	nop
 800a180:	20002f5c 	.word	0x20002f5c

0800a184 <_malloc_r>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	1ccd      	adds	r5, r1, #3
 800a18a:	f025 0503 	bic.w	r5, r5, #3
 800a18e:	3508      	adds	r5, #8
 800a190:	2d0c      	cmp	r5, #12
 800a192:	bf38      	it	cc
 800a194:	250c      	movcc	r5, #12
 800a196:	2d00      	cmp	r5, #0
 800a198:	4606      	mov	r6, r0
 800a19a:	db01      	blt.n	800a1a0 <_malloc_r+0x1c>
 800a19c:	42a9      	cmp	r1, r5
 800a19e:	d904      	bls.n	800a1aa <_malloc_r+0x26>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	6033      	str	r3, [r6, #0]
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a280 <_malloc_r+0xfc>
 800a1ae:	f000 f869 	bl	800a284 <__malloc_lock>
 800a1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	bb44      	cbnz	r4, 800a20c <_malloc_r+0x88>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ffbf 	bl	800a140 <sbrk_aligned>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	d158      	bne.n	800a27a <_malloc_r+0xf6>
 800a1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a1cc:	4627      	mov	r7, r4
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d143      	bne.n	800a25a <_malloc_r+0xd6>
 800a1d2:	2c00      	cmp	r4, #0
 800a1d4:	d04b      	beq.n	800a26e <_malloc_r+0xea>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	4639      	mov	r1, r7
 800a1da:	4630      	mov	r0, r6
 800a1dc:	eb04 0903 	add.w	r9, r4, r3
 800a1e0:	f000 f9cc 	bl	800a57c <_sbrk_r>
 800a1e4:	4581      	cmp	r9, r0
 800a1e6:	d142      	bne.n	800a26e <_malloc_r+0xea>
 800a1e8:	6821      	ldr	r1, [r4, #0]
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	1a6d      	subs	r5, r5, r1
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7ff ffa6 	bl	800a140 <sbrk_aligned>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d03a      	beq.n	800a26e <_malloc_r+0xea>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	442b      	add	r3, r5
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	bb62      	cbnz	r2, 800a260 <_malloc_r+0xdc>
 800a206:	f8c8 7000 	str.w	r7, [r8]
 800a20a:	e00f      	b.n	800a22c <_malloc_r+0xa8>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	1b52      	subs	r2, r2, r5
 800a210:	d420      	bmi.n	800a254 <_malloc_r+0xd0>
 800a212:	2a0b      	cmp	r2, #11
 800a214:	d917      	bls.n	800a246 <_malloc_r+0xc2>
 800a216:	1961      	adds	r1, r4, r5
 800a218:	42a3      	cmp	r3, r4
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	bf18      	it	ne
 800a21e:	6059      	strne	r1, [r3, #4]
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	bf08      	it	eq
 800a224:	f8c8 1000 	streq.w	r1, [r8]
 800a228:	5162      	str	r2, [r4, r5]
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f82f 	bl	800a290 <__malloc_unlock>
 800a232:	f104 000b 	add.w	r0, r4, #11
 800a236:	1d23      	adds	r3, r4, #4
 800a238:	f020 0007 	bic.w	r0, r0, #7
 800a23c:	1ac2      	subs	r2, r0, r3
 800a23e:	bf1c      	itt	ne
 800a240:	1a1b      	subne	r3, r3, r0
 800a242:	50a3      	strne	r3, [r4, r2]
 800a244:	e7af      	b.n	800a1a6 <_malloc_r+0x22>
 800a246:	6862      	ldr	r2, [r4, #4]
 800a248:	42a3      	cmp	r3, r4
 800a24a:	bf0c      	ite	eq
 800a24c:	f8c8 2000 	streq.w	r2, [r8]
 800a250:	605a      	strne	r2, [r3, #4]
 800a252:	e7eb      	b.n	800a22c <_malloc_r+0xa8>
 800a254:	4623      	mov	r3, r4
 800a256:	6864      	ldr	r4, [r4, #4]
 800a258:	e7ae      	b.n	800a1b8 <_malloc_r+0x34>
 800a25a:	463c      	mov	r4, r7
 800a25c:	687f      	ldr	r7, [r7, #4]
 800a25e:	e7b6      	b.n	800a1ce <_malloc_r+0x4a>
 800a260:	461a      	mov	r2, r3
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	42a3      	cmp	r3, r4
 800a266:	d1fb      	bne.n	800a260 <_malloc_r+0xdc>
 800a268:	2300      	movs	r3, #0
 800a26a:	6053      	str	r3, [r2, #4]
 800a26c:	e7de      	b.n	800a22c <_malloc_r+0xa8>
 800a26e:	230c      	movs	r3, #12
 800a270:	4630      	mov	r0, r6
 800a272:	6033      	str	r3, [r6, #0]
 800a274:	f000 f80c 	bl	800a290 <__malloc_unlock>
 800a278:	e794      	b.n	800a1a4 <_malloc_r+0x20>
 800a27a:	6005      	str	r5, [r0, #0]
 800a27c:	e7d6      	b.n	800a22c <_malloc_r+0xa8>
 800a27e:	bf00      	nop
 800a280:	20002f60 	.word	0x20002f60

0800a284 <__malloc_lock>:
 800a284:	4801      	ldr	r0, [pc, #4]	@ (800a28c <__malloc_lock+0x8>)
 800a286:	f7ff bee6 	b.w	800a056 <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	20002f58 	.word	0x20002f58

0800a290 <__malloc_unlock>:
 800a290:	4801      	ldr	r0, [pc, #4]	@ (800a298 <__malloc_unlock+0x8>)
 800a292:	f7ff bee1 	b.w	800a058 <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	20002f58 	.word	0x20002f58

0800a29c <__sflush_r>:
 800a29c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	0716      	lsls	r6, r2, #28
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	d454      	bmi.n	800a354 <__sflush_r+0xb8>
 800a2aa:	684b      	ldr	r3, [r1, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dc02      	bgt.n	800a2b6 <__sflush_r+0x1a>
 800a2b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd48      	ble.n	800a348 <__sflush_r+0xac>
 800a2b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2b8:	2e00      	cmp	r6, #0
 800a2ba:	d045      	beq.n	800a348 <__sflush_r+0xac>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2c2:	682f      	ldr	r7, [r5, #0]
 800a2c4:	6a21      	ldr	r1, [r4, #32]
 800a2c6:	602b      	str	r3, [r5, #0]
 800a2c8:	d030      	beq.n	800a32c <__sflush_r+0x90>
 800a2ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	0759      	lsls	r1, r3, #29
 800a2d0:	d505      	bpl.n	800a2de <__sflush_r+0x42>
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	1ad2      	subs	r2, r2, r3
 800a2d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2d8:	b10b      	cbz	r3, 800a2de <__sflush_r+0x42>
 800a2da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2dc:	1ad2      	subs	r2, r2, r3
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2e4:	6a21      	ldr	r1, [r4, #32]
 800a2e6:	47b0      	blx	r6
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	d106      	bne.n	800a2fc <__sflush_r+0x60>
 800a2ee:	6829      	ldr	r1, [r5, #0]
 800a2f0:	291d      	cmp	r1, #29
 800a2f2:	d82b      	bhi.n	800a34c <__sflush_r+0xb0>
 800a2f4:	4a28      	ldr	r2, [pc, #160]	@ (800a398 <__sflush_r+0xfc>)
 800a2f6:	410a      	asrs	r2, r1
 800a2f8:	07d6      	lsls	r6, r2, #31
 800a2fa:	d427      	bmi.n	800a34c <__sflush_r+0xb0>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6062      	str	r2, [r4, #4]
 800a300:	6922      	ldr	r2, [r4, #16]
 800a302:	04d9      	lsls	r1, r3, #19
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	d504      	bpl.n	800a312 <__sflush_r+0x76>
 800a308:	1c42      	adds	r2, r0, #1
 800a30a:	d101      	bne.n	800a310 <__sflush_r+0x74>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b903      	cbnz	r3, 800a312 <__sflush_r+0x76>
 800a310:	6560      	str	r0, [r4, #84]	@ 0x54
 800a312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a314:	602f      	str	r7, [r5, #0]
 800a316:	b1b9      	cbz	r1, 800a348 <__sflush_r+0xac>
 800a318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a31c:	4299      	cmp	r1, r3
 800a31e:	d002      	beq.n	800a326 <__sflush_r+0x8a>
 800a320:	4628      	mov	r0, r5
 800a322:	f7ff fec5 	bl	800a0b0 <_free_r>
 800a326:	2300      	movs	r3, #0
 800a328:	6363      	str	r3, [r4, #52]	@ 0x34
 800a32a:	e00d      	b.n	800a348 <__sflush_r+0xac>
 800a32c:	2301      	movs	r3, #1
 800a32e:	4628      	mov	r0, r5
 800a330:	47b0      	blx	r6
 800a332:	4602      	mov	r2, r0
 800a334:	1c50      	adds	r0, r2, #1
 800a336:	d1c9      	bne.n	800a2cc <__sflush_r+0x30>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0c6      	beq.n	800a2cc <__sflush_r+0x30>
 800a33e:	2b1d      	cmp	r3, #29
 800a340:	d001      	beq.n	800a346 <__sflush_r+0xaa>
 800a342:	2b16      	cmp	r3, #22
 800a344:	d11d      	bne.n	800a382 <__sflush_r+0xe6>
 800a346:	602f      	str	r7, [r5, #0]
 800a348:	2000      	movs	r0, #0
 800a34a:	e021      	b.n	800a390 <__sflush_r+0xf4>
 800a34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a350:	b21b      	sxth	r3, r3
 800a352:	e01a      	b.n	800a38a <__sflush_r+0xee>
 800a354:	690f      	ldr	r7, [r1, #16]
 800a356:	2f00      	cmp	r7, #0
 800a358:	d0f6      	beq.n	800a348 <__sflush_r+0xac>
 800a35a:	0793      	lsls	r3, r2, #30
 800a35c:	bf18      	it	ne
 800a35e:	2300      	movne	r3, #0
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	bf08      	it	eq
 800a364:	694b      	ldreq	r3, [r1, #20]
 800a366:	1bf6      	subs	r6, r6, r7
 800a368:	600f      	str	r7, [r1, #0]
 800a36a:	608b      	str	r3, [r1, #8]
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	ddeb      	ble.n	800a348 <__sflush_r+0xac>
 800a370:	4633      	mov	r3, r6
 800a372:	463a      	mov	r2, r7
 800a374:	4628      	mov	r0, r5
 800a376:	6a21      	ldr	r1, [r4, #32]
 800a378:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a37c:	47e0      	blx	ip
 800a37e:	2800      	cmp	r0, #0
 800a380:	dc07      	bgt.n	800a392 <__sflush_r+0xf6>
 800a382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a38a:	f04f 30ff 	mov.w	r0, #4294967295
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a392:	4407      	add	r7, r0
 800a394:	1a36      	subs	r6, r6, r0
 800a396:	e7e9      	b.n	800a36c <__sflush_r+0xd0>
 800a398:	dfbffffe 	.word	0xdfbffffe

0800a39c <_fflush_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	690b      	ldr	r3, [r1, #16]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	b913      	cbnz	r3, 800a3ac <_fflush_r+0x10>
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	b118      	cbz	r0, 800a3b6 <_fflush_r+0x1a>
 800a3ae:	6a03      	ldr	r3, [r0, #32]
 800a3b0:	b90b      	cbnz	r3, 800a3b6 <_fflush_r+0x1a>
 800a3b2:	f7ff f93d 	bl	8009630 <__sinit>
 800a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0f3      	beq.n	800a3a6 <_fflush_r+0xa>
 800a3be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3c0:	07d0      	lsls	r0, r2, #31
 800a3c2:	d404      	bmi.n	800a3ce <_fflush_r+0x32>
 800a3c4:	0599      	lsls	r1, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_fflush_r+0x32>
 800a3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ca:	f7ff fe44 	bl	800a056 <__retarget_lock_acquire_recursive>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f7ff ff63 	bl	800a29c <__sflush_r>
 800a3d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3d8:	4605      	mov	r5, r0
 800a3da:	07da      	lsls	r2, r3, #31
 800a3dc:	d4e4      	bmi.n	800a3a8 <_fflush_r+0xc>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	059b      	lsls	r3, r3, #22
 800a3e2:	d4e1      	bmi.n	800a3a8 <_fflush_r+0xc>
 800a3e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3e6:	f7ff fe37 	bl	800a058 <__retarget_lock_release_recursive>
 800a3ea:	e7dd      	b.n	800a3a8 <_fflush_r+0xc>

0800a3ec <__swhatbuf_r>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	461e      	mov	r6, r3
 800a3fa:	b096      	sub	sp, #88	@ 0x58
 800a3fc:	da0c      	bge.n	800a418 <__swhatbuf_r+0x2c>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	2100      	movs	r1, #0
 800a402:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a406:	bf14      	ite	ne
 800a408:	2340      	movne	r3, #64	@ 0x40
 800a40a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a40e:	2000      	movs	r0, #0
 800a410:	6031      	str	r1, [r6, #0]
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	b016      	add	sp, #88	@ 0x58
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	466a      	mov	r2, sp
 800a41a:	f000 f879 	bl	800a510 <_fstat_r>
 800a41e:	2800      	cmp	r0, #0
 800a420:	dbed      	blt.n	800a3fe <__swhatbuf_r+0x12>
 800a422:	9901      	ldr	r1, [sp, #4]
 800a424:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a428:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a42c:	4259      	negs	r1, r3
 800a42e:	4159      	adcs	r1, r3
 800a430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a434:	e7eb      	b.n	800a40e <__swhatbuf_r+0x22>

0800a436 <__smakebuf_r>:
 800a436:	898b      	ldrh	r3, [r1, #12]
 800a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a43a:	079d      	lsls	r5, r3, #30
 800a43c:	4606      	mov	r6, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	d507      	bpl.n	800a452 <__smakebuf_r+0x1c>
 800a442:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	2301      	movs	r3, #1
 800a44c:	6163      	str	r3, [r4, #20]
 800a44e:	b003      	add	sp, #12
 800a450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a452:	466a      	mov	r2, sp
 800a454:	ab01      	add	r3, sp, #4
 800a456:	f7ff ffc9 	bl	800a3ec <__swhatbuf_r>
 800a45a:	9f00      	ldr	r7, [sp, #0]
 800a45c:	4605      	mov	r5, r0
 800a45e:	4639      	mov	r1, r7
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff fe8f 	bl	800a184 <_malloc_r>
 800a466:	b948      	cbnz	r0, 800a47c <__smakebuf_r+0x46>
 800a468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46c:	059a      	lsls	r2, r3, #22
 800a46e:	d4ee      	bmi.n	800a44e <__smakebuf_r+0x18>
 800a470:	f023 0303 	bic.w	r3, r3, #3
 800a474:	f043 0302 	orr.w	r3, r3, #2
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	e7e2      	b.n	800a442 <__smakebuf_r+0xc>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	9b01      	ldr	r3, [sp, #4]
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	b15b      	cbz	r3, 800a4a6 <__smakebuf_r+0x70>
 800a48e:	4630      	mov	r0, r6
 800a490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a494:	f000 f84e 	bl	800a534 <_isatty_r>
 800a498:	b128      	cbz	r0, 800a4a6 <__smakebuf_r+0x70>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f023 0303 	bic.w	r3, r3, #3
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	431d      	orrs	r5, r3
 800a4aa:	81a5      	strh	r5, [r4, #12]
 800a4ac:	e7cf      	b.n	800a44e <__smakebuf_r+0x18>

0800a4ae <_raise_r>:
 800a4ae:	291f      	cmp	r1, #31
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	d904      	bls.n	800a4c2 <_raise_r+0x14>
 800a4b8:	2316      	movs	r3, #22
 800a4ba:	6003      	str	r3, [r0, #0]
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4c4:	b112      	cbz	r2, 800a4cc <_raise_r+0x1e>
 800a4c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4ca:	b94b      	cbnz	r3, 800a4e0 <_raise_r+0x32>
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f000 f853 	bl	800a578 <_getpid_r>
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4dc:	f000 b83a 	b.w	800a554 <_kill_r>
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d00a      	beq.n	800a4fa <_raise_r+0x4c>
 800a4e4:	1c59      	adds	r1, r3, #1
 800a4e6:	d103      	bne.n	800a4f0 <_raise_r+0x42>
 800a4e8:	2316      	movs	r3, #22
 800a4ea:	6003      	str	r3, [r0, #0]
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	e7e7      	b.n	800a4c0 <_raise_r+0x12>
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a4f8:	4798      	blx	r3
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	e7e0      	b.n	800a4c0 <_raise_r+0x12>
	...

0800a500 <raise>:
 800a500:	4b02      	ldr	r3, [pc, #8]	@ (800a50c <raise+0xc>)
 800a502:	4601      	mov	r1, r0
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	f7ff bfd2 	b.w	800a4ae <_raise_r>
 800a50a:	bf00      	nop
 800a50c:	2000001c 	.word	0x2000001c

0800a510 <_fstat_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	2300      	movs	r3, #0
 800a514:	4d06      	ldr	r5, [pc, #24]	@ (800a530 <_fstat_r+0x20>)
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	602b      	str	r3, [r5, #0]
 800a51e:	f7f6 f9e7 	bl	80008f0 <_fstat>
 800a522:	1c43      	adds	r3, r0, #1
 800a524:	d102      	bne.n	800a52c <_fstat_r+0x1c>
 800a526:	682b      	ldr	r3, [r5, #0]
 800a528:	b103      	cbz	r3, 800a52c <_fstat_r+0x1c>
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	bf00      	nop
 800a530:	20002f54 	.word	0x20002f54

0800a534 <_isatty_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	2300      	movs	r3, #0
 800a538:	4d05      	ldr	r5, [pc, #20]	@ (800a550 <_isatty_r+0x1c>)
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f6 f9e5 	bl	800090e <_isatty>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_isatty_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_isatty_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20002f54 	.word	0x20002f54

0800a554 <_kill_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	2300      	movs	r3, #0
 800a558:	4d06      	ldr	r5, [pc, #24]	@ (800a574 <_kill_r+0x20>)
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	4611      	mov	r1, r2
 800a560:	602b      	str	r3, [r5, #0]
 800a562:	f7f6 f966 	bl	8000832 <_kill>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d102      	bne.n	800a570 <_kill_r+0x1c>
 800a56a:	682b      	ldr	r3, [r5, #0]
 800a56c:	b103      	cbz	r3, 800a570 <_kill_r+0x1c>
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	bd38      	pop	{r3, r4, r5, pc}
 800a572:	bf00      	nop
 800a574:	20002f54 	.word	0x20002f54

0800a578 <_getpid_r>:
 800a578:	f7f6 b954 	b.w	8000824 <_getpid>

0800a57c <_sbrk_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	2300      	movs	r3, #0
 800a580:	4d05      	ldr	r5, [pc, #20]	@ (800a598 <_sbrk_r+0x1c>)
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	f7f6 f9d8 	bl	800093c <_sbrk>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_sbrk_r+0x1a>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_sbrk_r+0x1a>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	20002f54 	.word	0x20002f54

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
